# Date: July 04, 2014


List of Classes:
autumn.lang.F
autumn.lang.Functor
autumn.lang.TypedFunctor
autumn.lang.Delegate
autumn.lang.Tuple
autumn.lang.Prototype
autumn.lang.Property
autumn.lang.Method

autumn.util.ArrayOfBoolean
autumn.util.ArrayOfChar
autumn.util.ArrayOfByte
autumn.util.ArrayOfShort
autumn.util.ArrayOfInt
autumn.util.ArrayOfLong
autumn.util.ArrayOfFloat
autumn.util.ArrayOfDouble
autumn.util.ArrayOfObject
autumn.util.Functors
autumn.util.Predicates
autumn.util.SimpleGraph
autumn.util.PastaStack
autumn.util.Atom
autumn.util.Proto - Provides a data-structure style wrapper around a prototype. Very useful on the Java side.


---------------------------------------------------------

autumn.lang.F
. I/O
. . print (value : Object) : void
. . println () : void
. . println (value : Object) : void
. . printf
. . printiter
. . readln

. . write (file : File, value : CharSequence) : void
. . write (file : File, value : byte[]) : void
. . readText  (file : File) : String
. . readBytes (file : File) : byte[]


. Data Structure Algorithms

. . first (ds : List) : Object
. . first (ds : Tuple) : Object

. . last

. . set (ds : CharSequence, index : char) : String
. . set (ds : List, index : int, value : Object) : List
. . set (ds : boolean[], index : int, value : boolean) : boolean[]
. . set (ds : char[], index : int, value : char) : char[]
. . set (ds : byte[], index : int, value : byte) : byte[]
. . set (ds : short[], index : int, value : short) : short[]
. . set (ds : int[], index : int, value : int) : int[]
. . set (ds : long[], index : int, value : long) : long[]
. . set (ds : float[], index : int, value : float) : float[]
. . set (ds : double[], index : int, value : double) : double[]
. . set (ds : Object[], index : int, value : Object) : Object[]

. . get (ds : CharSequence) : int
. . get (ds : List, index : int) : Object
. . get (ds : boolean[], index : int) : boolean[]
. . get (ds : char[], index : int) : char[]
. . get (ds : byte[], index : int) : byte[]
. . get (ds : short[], index : int) : short[]
. . get (ds : int[], index : int) : int[]
. . get (ds : long[], index : int) : long[]
. . get (ds : float[], index : int) : float[]
. . get (ds : double[], index : int) : double[]
. . get (ds : Object[], index : int) : Object[]


. . len (ds : CharSequence) : int
. . len (ds : Iterable) : int - Requires O(n) time. 
. . len (ds : Collection) : int
. . len (ds : Map) : int
. . len (ds : boolean[]) : int
. . len (ds : char[]) : int
. . len (ds : byte[]) : int
. . len (ds : short[]) : int
. . len (ds : int[]) : int
. . len (ds : long[]) : int
. . len (ds : float[]) : int
. . len (ds : double[]) : int
. . len (ds : Object[]) : int

. . iter (iterable : Functor) : Iterable - Infinite Iteration. Invokes the functor to produce values. 
. . iter (iterable : Functor, condition : Functor) : Iterable - Invokes the functor to produce values, while the condition returns true.
. . iter (iterable : Iterable) : Iterable - Identity Function
. . iter (iterable : boolean[]) : Iterable
. . iter (iterable : char[]) : Iterable
. . iter (iterable : byte[]) : Iterable
. . iter (iterable : short[]) : Iterable
. . iter (iterable : int[]) : Iterable
. . iter (iterable : long[]) : Iterable
. . iter (iterable : float[]) : Iterable
. . iter (iterable : double[]) : Iterable
. . iter (iterable : Object[]) : Iterable

. . copy (ds : Collection) : Collection
. . copy (ds : Iterable) : List

. . immutable

. . find (container : Iterable, predicate : Functor) : int
. . find (container : Iterable, predicate : Functor, skip : int) : int

. . contains (container : Iterable, predicate : Functor) : boolean

. . count (container : Iterable, value : Object) : int
. . count (container : Iterable, condition : Functor) : int

. . map (ds : Iterable, functor : Functor) : List
. . map (ds : Iterable, functor : Functor, predicate : Functor) : List

. . filter (ds : Iterable, predicate : Functor) : List

. . reduce 

. . any (ds : Iterable, predicate : Functor) : boolean

. . all (ds : Iterable, predicate : Functor) : boolean

. . sum (ds : Iterable) : TODO 

. . average (ds : Iterable) : TODO

. . generic (list : List, type : Class) : List - Creates a wrapper around the list that uses reflection to enforce the values added to the list.
. . generic (set : Set, type : Class) : Set
. . generic (collection : Collection, type : Class) : Collection
. . generic (map : Map, keys : Class, values : Class) : Map

. Prototypes
. . property (owner : Prototype, name : String) : Property
. . method (owner : Prototype, name : String, parameters : List<Class>) : Method
. . derive (parents : List<Prototype>) : Prototype 

. Threading
. . run (action : Functor) : Thread
. . sync (object : Object, body : Functor) : void
. . thread (action : Functor) : Thread

. Time
. . now () - Returns the current local time. 
. . utc () - Returns the current UTC time. 

. Strings
. . escape
. . unescape
. . zfill

. Other
. . compare(left : Comparable, right : Comparable) : int

. . unique() : BigInteger - Generates consecuative positive integers.  

. . min (x : Comparable, y : Comparable) : Comparable
. . max (x : Comparable, y : Comparable) : Comparable

. . apply (functor : Functor, arguments : List) : Object



autumn.util.Functors
. memoize (inner : TypedFunctor) : TypedFunctor
. closure (inner : TypedFunctor, value : Object) : TypedFunctor - Passes the inner functor value whenever it is invoked. 
. range 
. compose (functors : Iterable<TypedFunctor>) : Functor


autumn.util.Predicates - A predicate is a functor of the form (value : Object) => boolean.
. eq (value : Object) : TypedFunctor - Creates a functor that returns true, iff its only argument equals the given value. 
. ne (value : Object) : TypedFunctor
. lt (value : Comparable) : TypedFunctor
. le (value : Comparable) : TypedFunctor
. gt (value : Comparable) : TypedFunctor
. ge (value : Comparable) : TypedFunctor
. between (min : Comparable, max : Comparable) : TypedFunctor
. between (min : Comparable, min_inclusive : boolean, max : Comparable, max_inclusive : boolean) : TypedFunctor
. matches (regex : String) : TypedFunctor
. contains (value : String) : TypedFunctor
. allow (acceptable : Iterable) : TypedFunctor
. forbid (forbidden : Iterable) : TypedFunctor
. isa (supertype : Class) : TypedFunctor
. isa (supertypes : Iterable<Class>) : TypedFunctor
. not (predicate  : TypedFunctor) : TypedFunctor
. and (predicates : Iterable) : TypedFunctor  
. or  (predicates : Iterable) : TypedFunctor
. xor (predicates : Iterable) : TypedFunctor
. odd  () : TypedFunctor
. even () : TypedFunctor
. alwaysTrue  () : TypedFunctor - Creates a predicate that always returns true.
. alwaysFalse () : TypedFunctor









