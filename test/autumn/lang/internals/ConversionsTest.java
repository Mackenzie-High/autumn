package autumn.lang.internals;

import static org.junit.Assert.*;
import org.junit.Test;

/**
 * This is a test of the Conversions class.
 *
 * <p>
 * This test ensures that all the predefined conversions work as expected.
 * </p>
 *
 * <p>
 * Note: The Conversions class was mostly autogenerated via a script and is rather simple.
 * As a result, the tests in this class are somewhat half hearted.
 * </p>
 *
 * @author Mackenzie High
 */
public final class ConversionsTest
{
    /**
     * This test tests the primitive-to-primitive conversions.
     */
    @Test
    public void testPrimitiveToPrimitive()
    {
        Object expected;
        Object actual;

        // boolean => boolean
        expected = false;
        actual = Conversions.convertToBoolean(false);
        assertEquals(expected, actual);

        // boolean => boolean
        expected = true;
        actual = Conversions.convertToBoolean(true);
        assertEquals(expected, actual);

        // boolean => char
        expected = (char) 0;
        actual = Conversions.convertToChar(false);
        assertEquals(expected, actual);

        // boolean => char
        expected = (char) 1;
        actual = Conversions.convertToChar(true);
        assertEquals(expected, actual);

        // boolean => byte
        expected = (byte) 0;
        actual = Conversions.convertToByte(false);
        assertEquals(expected, actual);

        // boolean => byte
        expected = (byte) 1;
        actual = Conversions.convertToByte(true);
        assertEquals(expected, actual);

        // boolean => short
        expected = (short) 0;
        actual = Conversions.convertToShort(false);
        assertEquals(expected, actual);

        // boolean => short
        expected = (short) 1;
        actual = Conversions.convertToShort(true);
        assertEquals(expected, actual);

        // boolean => int
        expected = (int) 0;
        actual = Conversions.convertToInt(false);
        assertEquals(expected, actual);

        // boolean => int
        expected = (int) 1;
        actual = Conversions.convertToInt(true);
        assertEquals(expected, actual);

        // boolean => long
        expected = (long) 0;
        actual = Conversions.convertToLong(false);
        assertEquals(expected, actual);

        // boolean => long
        expected = (long) 1;
        actual = Conversions.convertToLong(true);
        assertEquals(expected, actual);

        // boolean => float
        expected = (float) 0;
        actual = Conversions.convertToFloat(false);
        assertEquals(expected, actual);

        // boolean => float
        expected = (float) 1;
        actual = Conversions.convertToFloat(true);
        assertEquals(expected, actual);

        // boolean => double
        expected = (double) 0;
        actual = Conversions.convertToDouble(false);
        assertEquals(expected, actual);

        // boolean => double
        expected = (double) 1;
        actual = Conversions.convertToDouble(true);
        assertEquals(expected, actual);


        // char => boolean
        expected = false;
        actual = Conversions.convertToBoolean((char) 0);
        assertEquals(expected, actual);

        // char => boolean
        expected = true;
        actual = Conversions.convertToBoolean((char) 1);
        assertEquals(expected, actual);

        // char => boolean
        expected = true;
        actual = Conversions.convertToBoolean((char) 2);
        assertEquals(expected, actual);


        // char => char
        expected = (char) 123;
        actual = Conversions.convertToChar((char) 123);
        assertEquals(expected, actual);


        // char => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((char) 123);
        assertEquals(expected, actual);


        // char => short
        expected = (short) 123;
        actual = Conversions.convertToShort((char) 123);
        assertEquals(expected, actual);


        // char => int
        expected = (int) 123;
        actual = Conversions.convertToInt((char) 123);
        assertEquals(expected, actual);


        // char => long
        expected = (long) 123;
        actual = Conversions.convertToLong((char) 123);
        assertEquals(expected, actual);


        // char => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((char) 123);
        assertEquals(expected, actual);


        // char => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((char) 123);
        assertEquals(expected, actual);


        // byte => boolean
        expected = false;
        actual = Conversions.convertToBoolean((byte) 0);
        assertEquals(expected, actual);

        // byte => boolean
        expected = true;
        actual = Conversions.convertToBoolean((byte) 1);
        assertEquals(expected, actual);

        // byte => boolean
        expected = true;
        actual = Conversions.convertToBoolean((byte) 2);
        assertEquals(expected, actual);


        // byte => char
        expected = (char) 123;
        actual = Conversions.convertToChar((byte) 123);
        assertEquals(expected, actual);


        // byte => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((byte) 123);
        assertEquals(expected, actual);


        // byte => short
        expected = (short) 123;
        actual = Conversions.convertToShort((byte) 123);
        assertEquals(expected, actual);


        // byte => int
        expected = (int) 123;
        actual = Conversions.convertToInt((byte) 123);
        assertEquals(expected, actual);


        // byte => long
        expected = (long) 123;
        actual = Conversions.convertToLong((byte) 123);
        assertEquals(expected, actual);


        // byte => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((byte) 123);
        assertEquals(expected, actual);


        // byte => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((byte) 123);
        assertEquals(expected, actual);


        // short => boolean
        expected = false;
        actual = Conversions.convertToBoolean((short) 0);
        assertEquals(expected, actual);

        // short => boolean
        expected = true;
        actual = Conversions.convertToBoolean((short) 1);
        assertEquals(expected, actual);

        // short => boolean
        expected = true;
        actual = Conversions.convertToBoolean((short) 2);
        assertEquals(expected, actual);


        // short => char
        expected = (char) 123;
        actual = Conversions.convertToChar((short) 123);
        assertEquals(expected, actual);


        // short => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((short) 123);
        assertEquals(expected, actual);


        // short => short
        expected = (short) 123;
        actual = Conversions.convertToShort((short) 123);
        assertEquals(expected, actual);


        // short => int
        expected = (int) 123;
        actual = Conversions.convertToInt((short) 123);
        assertEquals(expected, actual);


        // short => long
        expected = (long) 123;
        actual = Conversions.convertToLong((short) 123);
        assertEquals(expected, actual);


        // short => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((short) 123);
        assertEquals(expected, actual);


        // short => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((short) 123);
        assertEquals(expected, actual);


        // int => boolean
        expected = false;
        actual = Conversions.convertToBoolean((int) 0);
        assertEquals(expected, actual);

        // int => boolean
        expected = true;
        actual = Conversions.convertToBoolean((int) 1);
        assertEquals(expected, actual);

        // int => boolean
        expected = true;
        actual = Conversions.convertToBoolean((int) 2);
        assertEquals(expected, actual);


        // int => char
        expected = (char) 123;
        actual = Conversions.convertToChar((int) 123);
        assertEquals(expected, actual);


        // int => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((int) 123);
        assertEquals(expected, actual);


        // int => short
        expected = (short) 123;
        actual = Conversions.convertToShort((int) 123);
        assertEquals(expected, actual);


        // int => int
        expected = (int) 123;
        actual = Conversions.convertToInt((int) 123);
        assertEquals(expected, actual);


        // int => long
        expected = (long) 123;
        actual = Conversions.convertToLong((int) 123);
        assertEquals(expected, actual);


        // int => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((int) 123);
        assertEquals(expected, actual);


        // int => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((int) 123);
        assertEquals(expected, actual);


        // long => boolean
        expected = false;
        actual = Conversions.convertToBoolean((long) 0);
        assertEquals(expected, actual);

        // long => boolean
        expected = true;
        actual = Conversions.convertToBoolean((long) 1);
        assertEquals(expected, actual);

        // long => boolean
        expected = true;
        actual = Conversions.convertToBoolean((long) 2);
        assertEquals(expected, actual);


        // long => char
        expected = (char) 123;
        actual = Conversions.convertToChar((long) 123);
        assertEquals(expected, actual);


        // long => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((long) 123);
        assertEquals(expected, actual);


        // long => short
        expected = (short) 123;
        actual = Conversions.convertToShort((long) 123);
        assertEquals(expected, actual);


        // long => int
        expected = (int) 123;
        actual = Conversions.convertToInt((long) 123);
        assertEquals(expected, actual);


        // long => long
        expected = (long) 123;
        actual = Conversions.convertToLong((long) 123);
        assertEquals(expected, actual);


        // long => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((long) 123);
        assertEquals(expected, actual);


        // long => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((long) 123);
        assertEquals(expected, actual);


        // float => boolean
        expected = false;
        actual = Conversions.convertToBoolean((float) 0);
        assertEquals(expected, actual);

        // float => boolean
        expected = true;
        actual = Conversions.convertToBoolean((float) 1);
        assertEquals(expected, actual);

        // float => boolean
        expected = true;
        actual = Conversions.convertToBoolean((float) 2);
        assertEquals(expected, actual);


        // float => char
        expected = (char) 123;
        actual = Conversions.convertToChar((float) 123);
        assertEquals(expected, actual);


        // float => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((float) 123);
        assertEquals(expected, actual);


        // float => short
        expected = (short) 123;
        actual = Conversions.convertToShort((float) 123);
        assertEquals(expected, actual);


        // float => int
        expected = (int) 123;
        actual = Conversions.convertToInt((float) 123);
        assertEquals(expected, actual);


        // float => long
        expected = (long) 123;
        actual = Conversions.convertToLong((float) 123);
        assertEquals(expected, actual);


        // float => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((float) 123);
        assertEquals(expected, actual);


        // float => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((float) 123);
        assertEquals(expected, actual);


        // double => boolean
        expected = false;
        actual = Conversions.convertToBoolean((double) 0);
        assertEquals(expected, actual);

        // double => boolean
        expected = true;
        actual = Conversions.convertToBoolean((double) 1);
        assertEquals(expected, actual);

        // double => boolean
        expected = true;
        actual = Conversions.convertToBoolean((double) 2);
        assertEquals(expected, actual);


        // double => char
        expected = (char) 123;
        actual = Conversions.convertToChar((double) 123);
        assertEquals(expected, actual);


        // double => byte
        expected = (byte) 123;
        actual = Conversions.convertToByte((double) 123);
        assertEquals(expected, actual);


        // double => short
        expected = (short) 123;
        actual = Conversions.convertToShort((double) 123);
        assertEquals(expected, actual);


        // double => int
        expected = (int) 123;
        actual = Conversions.convertToInt((double) 123);
        assertEquals(expected, actual);


        // double => long
        expected = (long) 123;
        actual = Conversions.convertToLong((double) 123);
        assertEquals(expected, actual);


        // double => float
        expected = (float) 123;
        actual = Conversions.convertToFloat((double) 123);
        assertEquals(expected, actual);


        // double => double
        expected = (double) 123;
        actual = Conversions.convertToDouble((double) 123);
        assertEquals(expected, actual);

    }

    /**
     * This test tests the to-string conversions.
     */
    @Test
    public void testConvertToString()
    {
        Object expected;
        Object actual;

        // boolean => String
        expected = "false";
        actual = Conversions.convertToString(false);
        assertEquals(expected, actual);

        // boolean => String
        expected = "true";
        actual = Conversions.convertToString(true);
        assertEquals(expected, actual);

        // char => String
        expected = "M";
        actual = Conversions.convertToString('M');
        assertEquals(expected, actual);

        // byte => String
        expected = "123";
        actual = Conversions.convertToString((byte) 123);
        assertEquals(expected, actual);

        // short => String
        expected = "123";
        actual = Conversions.convertToString((short) 123);
        assertEquals(expected, actual);

        // int => String
        expected = "123";
        actual = Conversions.convertToString((int) 123);
        assertEquals(expected, actual);

        // long => String
        expected = "123";
        actual = Conversions.convertToString((long) 123);
        assertEquals(expected, actual);

        // float => String
        expected = "123.0";
        actual = Conversions.convertToString((float) 123);
        assertEquals(expected, actual);

        // double => String
        expected = "123.0";
        actual = Conversions.convertToString((double) 123);
        assertEquals(expected, actual);
    }

    /**
     * This test tests the boxing conversions.
     */
    @Test
    public void testBox()
    {
        Object expected;
        Object actual;

        // boolean => Boolean
        expected = Boolean.FALSE;
        actual = Conversions.box(false);
        assertEquals(expected, actual);

        // boolean => Boolean
        expected = Boolean.TRUE;
        actual = Conversions.box(true);
        assertEquals(expected, actual);

        // char => Character
        expected = Character.valueOf('M');
        actual = Conversions.box('M');
        assertEquals(expected, actual);

        // byte => Byte
        expected = Byte.valueOf((byte) 123);
        actual = Conversions.box((byte) 123);
        assertEquals(expected, actual);

        // short => Short
        expected = Short.valueOf((short) 123);
        actual = Conversions.box((short) 123);
        assertEquals(expected, actual);

        // int => Integer
        expected = Integer.valueOf((int) 123);
        actual = Conversions.box((int) 123);
        assertEquals(expected, actual);

        // long => Long
        expected = Long.valueOf((long) 123);
        actual = Conversions.box((long) 123);
        assertEquals(expected, actual);

        // float => Float
        expected = Float.valueOf((float) 123);
        actual = Conversions.box((float) 123);
        assertEquals(expected, actual);

        // double => Double
        expected = Double.valueOf((double) 123);
        actual = Conversions.box((double) 123);
        assertEquals(expected, actual);
    }

    /**
     * This test tests the unboxing conversions, when the input is non-null.
     */
    @Test
    public void testUnbox()
    {
        Object expected;
        Object actual;

        // Boolean => boolean
        expected = Boolean.FALSE;
        actual = Conversions.unbox(false);
        assertEquals(expected, actual);

        // Boolean => boolean
        expected = Boolean.TRUE;
        actual = Conversions.unbox(true);
        assertEquals(expected, actual);

        // Character => char
        expected = Character.valueOf('M');
        actual = Conversions.unbox(Character.valueOf('M'));
        assertEquals(expected, actual);

        // Byte => byte
        expected = Byte.valueOf((byte) 123);
        actual = Conversions.unbox((byte) 123);
        assertEquals(expected, actual);

        // Short => short
        expected = Short.valueOf((short) 123);
        actual = Conversions.unbox((short) 123);
        assertEquals(expected, actual);

        // Integer => int
        expected = Integer.valueOf((int) 123);
        actual = Conversions.unbox((int) 123);
        assertEquals(expected, actual);

        // Long => long
        expected = Long.valueOf((long) 123);
        actual = Conversions.unbox((long) 123);
        assertEquals(expected, actual);

        // Float => float
        expected = Float.valueOf((float) 123);
        actual = Conversions.unbox((float) 123);
        assertEquals(expected, actual);

        // Double => double
        expected = Double.valueOf((double) 123);
        actual = Conversions.unbox((double) 123);
        assertEquals(expected, actual);
    }

    /**
     * This test tests the unboxing conversions, when the input is null.
     */
    @Test
    public void testUnboxNull()
    {
        Object expected;
        Object actual;

        // Boolean => boolean
        expected = false;
        actual = Conversions.unbox((Boolean) null);
        assertEquals(expected, actual);

        // Boolean => boolean
        expected = false;
        actual = Conversions.unbox((Boolean) null);
        assertEquals(expected, actual);

        // Character => char
        expected = (char) 0;
        actual = Conversions.unbox((Character) null);
        assertEquals(expected, actual);

        // Byte => byte
        expected = (byte) 0;
        actual = Conversions.unbox((Byte) null);
        assertEquals(expected, actual);

        // Short => short
        expected = (short) 0;
        actual = Conversions.unbox((Short) null);
        assertEquals(expected, actual);

        // Integer => int
        expected = 0;
        actual = Conversions.unbox((Integer) null);
        assertEquals(expected, actual);

        // Long => long
        expected = 0L;
        actual = Conversions.unbox((Long) null);
        assertEquals(expected, actual);

        // Float => float
        expected = 0.0F;
        actual = Conversions.unbox((Float) null);
        assertEquals(expected, actual);

        // Double => double
        expected = 0.0;
        actual = Conversions.unbox((Double) null);
        assertEquals(expected, actual);
    }
}
