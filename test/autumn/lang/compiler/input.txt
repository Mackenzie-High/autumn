


'' This is a doc-comment 1.
'' This is a doc-comment 2.
'' This is a doc-comment 3.
@Anno1
@Anno2
@Anno3
@Author = "Hello \n World"
module * in program ;
module * in program.xoo ;
module * in program.xoo.moo ;
module * in program.xoo.moo.boo ;

module Main in program ;
module Main in program.xoo ;
module Main in program.xoo.moo ;
module Main in program.xoo.moo.boo ;



import List ;
import List [ ] ;
import List [ ] [ ] ;
import List [ ] [ ] [ ] ;
import java.util.Map ;
import java.util.Map [ ] ;
import java.util.Map [ ] [ ] ;
import java.util.Map [ ] [ ] [ ] ;



'' This is a doc-comment.
@Anno01A
@Anno02A
@Anno03A
annotation Anno17 ;



@Anno01B
@Anno02B
@Anno03B
annotation Anno17 ;



'' This is a doc-comment.
@Anno04A
@Anno05A
@Anno06A
exception Goo extends Boo ;



@Anno04B
@Anno05B
@Anno06B
exception Goo extends Boo ;



'' This is a doc-comment.
@Anno04B
@Anno05B
@Anno06B
enum City ( ) ;



@Anno04B
@Anno05B
@Anno06B
enum City ( Paris ) ;



@Anno04B
@Anno05B
@Anno06B
enum City ( Moscow , Geneva , Turin ) ;





'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
design Person ( name : String , age : int ) ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
design Person ( name : String , age : int ) extends Taxable ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
design Person ( name : String , age : int ) extends Taxable & Citizen ;



'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
tuple Person ( name : String , age : int ) ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
tuple Person ( name : String , age : int ) extends Taxable ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
tuple Person ( name : String , age : int ) extends Taxable & Citizen ;





'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
struct Person ( name : String , age : int ) ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
struct Person ( name : String , age : int ) extends Taxable ;

'' This is a doc-comment.
@Anno01
@Anno02
@Anno03
struct Person ( name : String , age : int ) extends Taxable & Citizen ;





'' This is a doc-comment.
@Anno07
@Anno08
@Anno09
functor Function0 ( ) : boolean ;



@Anno07
@Anno08
@Anno09
functor Function1 ( x : byte ) : boolean ;



@Anno07
@Anno08
@Anno09
functor Function2 ( x : byte, y : short ) : boolean ;



@Anno07
@Anno08
@Anno09
functor Function3 ( x : byte, y : short, z : int ) : boolean ;



'' This is a doc-comment.
@Anno07
@Anno08
@Anno09
functor FilePredicate ( value : File ) : boolean extends Predicate ;





'' This is a doc-comment.
@Anno37
@Anno38
@Anno39
defun main (args : String[]) : void
{
    # Positive Datums
    val xoo = 'A' ;
    val xoo = 90C ;
    val xoo = 955C;
    val xoo = 123B ;
    val xoo = 123S ;
    val xoo = 123 ;
    val xoo = 123L ;
    val xoo = 123.456F ;
    val xoo = 123.456 ;

    nop;

    # Negative Datums
    val xoo = -123B ;
    val xoo = -123S ;
    val xoo = -123 ;
    val xoo = -123L ;
    val xoo = -123.456F ;
    val xoo = -123.456 ;

    nop;

    # Floating-Point Datums with Exponents
    val xoo = 123.456e789F ;
    val xoo = 123.456e-789F ;
    val xoo = 123.456e789 ;
    val xoo = 123.456e-789 ;

    nop;

    # String Datums
    val xoo = "" ;
    val xoo = "1" ;
    val xoo = "12" ;
    val xoo = "123" ;
    val xoo = '''''' ;
    val xoo = '''1''' ;
    val xoo = '''12''' ;
    val xoo = '''123''' ;

    nop;

    # String Datums
    val xoo = @"" ;
    val xoo = @"4" ;
    val xoo = @"45" ;
    val xoo = @"456" ;
    val xoo = @'''''' ;
    val xoo = @'''4''' ;
    val xoo = @'''45''' ;
    val xoo = @'''456''' ;

    nop;

    # Other Datums
    val xoo = true ;
    val xoo = false ;
    val xoo = null ;
    val xoo = ( class String ) ;
    val xoo = moo ;

    nop;

    # Expression Statement
    1 + 2 + 3 ;

    nop;

    # Unary Operators
    val xoo = - moo;
    val xoo = - - moo;
    val xoo = - - - moo;
    val xoo = ! moo;
    val xoo = ! ! moo;
    val xoo = ! ! ! moo;
    val xoo = ! - ! - ! - moo;
    val xoo = - ! - ! - ! moo;

    nop;

    # Binary Operators - Associativity
    val xoo = 12 / 34 / 56 / 78 / 90 ;
    val xoo = 12 % 34 % 56 % 78 % 90 ;
    val xoo = 12 * 34 * 56 * 78 * 90 ;
    val xoo = 12 + 34 + 56 + 78 + 90 ;
    val xoo = 12 - 34 - 56 - 78 - 90 ;
    val xoo = 12 .. 34 .. 56 .. 78 .. 90;
    val xoo = 12 === 34 === 56 === 78 === 90 ;
    val xoo = 12 !== 34 !== 56 !== 78 !== 90 ;
    val xoo = 12 == 34 == 56 == 78 == 90 ;
    val xoo = 12 != 34 != 56 != 78 != 90 ;
    val xoo = 12 <= 34 <= 56 <= 78 <= 90 ;
    val xoo = 12 >= 34 >= 56 >= 78 >= 90 ;
    val xoo = 12 < 34 < 56 < 78 < 90 ;
    val xoo = 12 > 34 > 56 > 78 > 90 ;
    val xoo = 12 & 34 & 56 & 78 & 90 ;
    val xoo = 12 | 34 | 56 | 78 | 90 ;
    val xoo = 12 & 34 & 56 & 78 & 90 ;
    val xoo = 12 | 34 | 56 | 78 | 90 ;
    val xoo = 12 ^ 34 ^ 56 ^ 78 ^ 90 ;
    val xoo = 12 -> 34 -> 56 -> 78 -> 90 ;
    val xoo = 12 ?? 34 ?? 56 ?? 78 ?? 90 ;
    val xoo = 12 as String as String as String ;
    val xoo = 12 is String is String is String ;

    nop;

    # Operators - Precedence
    val xoo = 12 / 34 + 56 / 78;
    val xoo = 12 % 34 + 56 % 78;
    val xoo = 12 * 34 + 56 * 78;
    val xoo = 12 / 34 - 56 / 78;
    val xoo = 12 % 34 - 56 % 78;
    val xoo = 12 * 34 - 56 * 78;
    val xoo = 12 - 34 === 56 - 78;
    val xoo = 12 - 34 !== 56 - 78;
    val xoo = 12 - 34 == 56 - 78;
    val xoo = 12 - 34 != 56 - 78;
    val xoo = 12 - 34 >= 56 - 78;
    val xoo = 12 - 34 <= 56 - 78;
    val xoo = 12 - 34 > 56 - 78;
    val xoo = 12 - 34 < 56 - 78;
    val xoo = 12 == 34 & 56 == 78;
    val xoo = 12 == 34 & 56 == 78;
    val xoo = 12 == 34 & 56 == 78;
    val xoo = 12 == 34 & 56 == 78;
    val xoo = 12 == 34 & 56 == 78;
    val xoo = 12 & 34 ?? 56 & 78;
    val xoo = 12 ?? 34 as String;
    val xoo = 12 ?? 34 as String;

    nop;

    # Precedence - Equal Precedence
    var xoo = 12 / 34 / 56 / 78;
    var xoo = 12 / 34 % 56 / 78;
    var xoo = 12 / 34 * 56 / 78;
    var xoo = 12 % 34 / 56 % 78;
    var xoo = 12 % 34 % 56 % 78;
    var xoo = 12 % 34 * 56 % 78;
    var xoo = 12 * 34 / 56 * 78;
    var xoo = 12 * 34 % 56 * 78;
    var xoo = 12 * 34 * 56 * 78;
    var xoo = 12 + 34 + 56 + 78;
    var xoo = 12 + 34 - 56 + 78;
    var xoo = 1 === 2 !== 3 == 4 != 5 >= 6 <= 7 > 8 < 9;
    var xoo = 1 < 2 > 3 <= 4 >= 5 != 6 == 7 !== 8 === 9;
    var xoo = 1 & 2 | 3 & 4 | 5 ^ 6;
    var xoo = 1 ^ 2 | 3 & 4 | 5 & 6;
    var xoo = 1 ^ 2 | 3 & 4 | 5 -> 6;
    var xoo = 12 as String is Object;
    var xoo = 12 is String as Object;

    nop;

    # Subtraction and Negate Together
    val xoo = - - - moo - - - - zoo;

    nop;

    val xoo = [ ] ;
    val xoo = [ 12 ] ;
    val xoo = [ 12 , 34 ] ;
    val xoo = [ 12 , 34 , 56] ;

    nop;

    val xoo = ( new Goo ) ;
    val xoo = ( new Goo 12 ) ;
    val xoo = ( new Goo 12 , 34 ) ;
    val xoo = ( new Goo 12 , 34 , 56 ) ;

    nop;

    val xoo = ( call Goo :: boo ) ;
    val xoo = ( call Goo :: boo 12 ) ;
    val xoo = ( call Goo :: boo 12 , 34 ) ;
    val xoo = ( call Goo :: boo 12 , 34 , 56 ) ;

    nop;

    val xoo = ( call goo . boo ) ;
    val xoo = ( call goo . boo 12 ) ;
    val xoo = ( call goo . boo 12 , 34 ) ;
    val xoo = ( call goo . boo 12 , 34 , 56 ) ;

    nop;

    val xoo = ( dispatch moo ) ;
    val xoo = ( dispatch moo 12 ) ;
    val xoo = ( dispatch moo 12 , 34 ) ;
    val xoo = ( dispatch moo 12 , 34 , 56 ) ;

    nop;

    val xoo = ( field barn . moo = hay ) ;

    nop;

    val xoo = ( field barn . moo ) ;

    nop;

    val xoo = ( field Barn :: moo = hay ) ;

    nop;

    val xoo = ( field Barn :: moo ) ;

    nop;

    val xoo = ( instanceof 12 + 34 : String ) ;

    nop;

    val xoo = ( if 12 == 34 then 56 else 78 ) ;

    nop;

    val xoo = ( progn 12 ) ;
    val xoo = ( progn 12 , 34 ) ;
    val xoo = ( progn 12 , 34 , 56 ) ;

    nop;

    if ( 12 == 34 )
    {
        nop;
    }

    nop ;

    if ( 12 == 34 )
    {
        nop;
    }
    elif ( 12 == 56 )
    {
        nop;
    }
    elif ( 12 == 78 )
    {
        nop;
    }
    else
    {
        nop;
    }

    nop ;

    if ( 12 == 34 )
    {
        nop;
    }
    else
    {
        nop;
    }

    nop;

    break ;
    continue ;
    redo ;

    nop;

    while ( 12 == 34 )
    {
        nop;
    }

    nop;

    until ( 12 == 34 )
    {
        nop;
    }

    nop;

    do
    {
        nop;
    }
    while ( 12 == 34 )

    nop;

    do
    {
        nop;
    }
    until ( 12 == 34 )

    nop;

    assert 12 + 34 ;
    assert 12 + 34 echo 56 + 78 ;

    nop;

    assume 12 + 34 ;
    assume 12 + 34 echo 56 + 78 ;

    nop;

    throw 12 + 34 ;

    nop;

    var xoo = 12 + 34 ;

    nop;

    val xoo = 12 + 34 ;

    nop;

    let xoo = 12 + 34 ;

    xoo = 13 + 17;

    nop;

    return ;

    nop;

    return 12 + 34 ;

    nop;

    yield ;

    nop;

    yield 12 + 34 ;

    nop;

    recur ;
    recur 12 ;
    recur 12 , 34 ;
    recur 12 , 34 , 56 ;

    nop;

    try
    {
        nop;
    }
    catch ( xoo : Exception )
    {
        nop;
    }
    catch ( moo : Throwable )
    {
        nop;
    }

    nop;

    try
    {
        nop;
    }
    catch ( xoo : Exception )
    {
        nop;
    }

    nop;

    for ( xoo = 100 ; xoo < 500 ; xoo + 2 )
    {
        nop;
    }

    nop;

    foreach ( xoo : String in 12 + 34 )
    {
        nop;
    }

    nop;

    # Name Components
    (dispatch $);
    (dispatch _);
    (dispatch A);
    (dispatch Z);
    (dispatch a);
    (dispatch z);
    (dispatch A0123456789$_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz);

    nop;

    # Variable Components
    val $ = 0;
    val _ = 0;
    val A = 0;
    val Z = 0;
    val a = 0;
    val z = 0;
    val A0123456789$_ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz = 0;

    nop;

    goto Moo ;

    nop;

    marker Moo ;

    nop;

    branch ( 1 + 2 ) ( ) default CASE_ELSE;
    branch ( 1 + 2 ) ( CASE_1 ) default CASE_ELSE;
    branch ( 1 + 2 ) ( CASE_1 , CASE_2 ) default CASE_ELSE;
    branch ( 1 + 2 ) ( CASE_1 , CASE_2 , CASE_3 ) default CASE_ELSE;

    nop;

    var xoo = [ 1 + 2 for x : Integer in 3 + 4 ] ;
    var xoo = [ 1 + 2 for x : Integer in 3 + 4 if x < 5 ] ;

    nop;

    when ( x == 5 ) then return 17 ;

    nop;

    val xoo = ( locals ) ;

    nop;

    debug ;

    nop ;

    forever
    {
        nop;
    }

    nop;

    delegate p : Predicate => Main::moo;

    nop;

    lambda xoo : Moo => 1 + 2 ;
    lambda xoo : Moo => 1 + 2 ;
    lambda xoo : Moo => 1 + 2 ;
    lambda xoo : Moo => 1 + 2 ;

    nop;

    val x = "\t\b\n\r\f\'\"\\";
}



defun main ( aoo : int , boo : int , xoo : int , zoo : int ) : void
{
    nop;
}







