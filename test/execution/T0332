module Main in execution;

@Start
defun main (args : String[]) : void
{
    val info = My::instance().moduleInfo();

    var memory = null is Memoizer;


    # Case: Memoization of booleans
    #
    memory = info.memoizerOf("memory1");
    assert memory.cache().isEmpty();
    My::memory1(true);
    assert memory.cache().size() == 1;
    assert memory.cache().get([true]) == true;



    # Case: Memoization of chars
    #
    memory = info.memoizerOf("memory2");
    assert memory.cache().isEmpty();
    My::memory2('X');
    assert memory.cache().size() == 1;
    assert memory.cache().get(['X']) == 'X';



    # Case: Memoization of bytes
    #
    memory = info.memoizerOf("memory3");
    assert memory.cache().isEmpty();
    My::memory3(11B);
    assert memory.cache().size() == 1;
    assert memory.cache().get([11B]) == 11B;



    # Case: Memoization of shorts
    #
    memory = info.memoizerOf("memory4");
    assert memory.cache().isEmpty();
    My::memory4(13S);
    assert memory.cache().size() == 1;
    assert memory.cache().get([13S]) == 13S;



    # Case: Memoization of ints
    #
    memory = info.memoizerOf("memory5");
    assert memory.cache().isEmpty();
    My::memory5(15);
    assert memory.cache().size() == 1;
    assert memory.cache().get([15]) == 15;



    # Case: Memoization of longs
    #
    memory = info.memoizerOf("memory6");
    assert memory.cache().isEmpty();
    My::memory6(17L);
    assert memory.cache().size() == 1;
    assert memory.cache().get([17L]) == 17L;



    # Case: Memoization of floats
    #
    memory = info.memoizerOf("memory7");
    assert memory.cache().isEmpty();
    My::memory7(19.0F);
    assert memory.cache().size() == 1;
    assert memory.cache().get([19.0F]) == 19.0F;



    # Case: Memoization of doubles
    #
    memory = info.memoizerOf("memory8");
    assert memory.cache().isEmpty();
    My::memory8(21.0);
    assert memory.cache().size() == 1;
    assert memory.cache().get([21.0]) == 21.0;



    # Case: Memoization of Objects
    #
    memory = info.memoizerOf("memory9");
    assert memory.cache().isEmpty();
    My::memory9("Venus");
    assert memory.cache().size() == 1;
    assert memory.cache().get(["Venus"]) == "Venus";
}

@Memoize
defun memory1 (x : boolean) : boolean
{
    return x;
}

@Memoize
defun memory2 (x : char) : char
{
    return x;
}

@Memoize
defun memory3 (x : byte) : byte
{
    return x;
}

@Memoize
defun memory4 (x : short) : short
{
    return x;
}

@Memoize
defun memory5 (x : int) : int
{
    return x;
}

@Memoize
defun memory6 (x : long) : long
{
    return x;
}

@Memoize
defun memory7 (x : float) : float
{
    return x;
}

@Memoize
defun memory8 (x : double) : double
{
    return x;
}

@Memoize
defun memory9 (x : String) : Object
{
    return x;
}