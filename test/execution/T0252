module Main in execution;

tuple Person (name : String, age : int);

@Start
defun main (args : String[]) : void
{
    delegate compare : MethodCompareTo => My::compare;
    delegate equals  : MethodEquals => My::equals;
    delegate hash    : MethodHashCode => My::hash;
    delegate string  : MethodToString => My::string;
    delegate iter    : MethodIterator => My::iterator;

    var p = (Person::instance);
    p = (p.name "Emma");
    p = (p.age 24);

    p = (Records::bindCompare p, compare);
    p = (Records::bindEquals  p, equals);
    p = (Records::bindHash    p, hash);
    p = (Records::bindStr     p, string);
    p = (Records::bindIter    p, iter);

    assert (p.bindings) !== (SpecialMethods::instance);
    assert ((p.bindings).getCompareTo) === compare;
    assert ((p.bindings).getEquals) === equals;
    assert ((p.bindings).getHashCode) === hash;
    assert ((p.bindings).getToString) === string;
    assert ((p.bindings).getIterator) === iter;
}

defun compare (self : Object, other : Object) : int
{
    return 0;
}

defun equals (self : Object, other : Object) : boolean
{
    return false;
}

defun hash (self : Object) : int
{
    return 0;
}

defun string (self : Object) : String
{
    return "";
}

defun iterator (self : Object) : Iterator
{
    return null;
}
