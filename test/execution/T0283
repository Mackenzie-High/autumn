module Main in execution;


functor Boo (x : int) : int;

functor Moo (x : int) : int extends Boo;

functor Foo (x : int) : int extends Moo;


@Start
defun main (args : String[]) : void
{
    delegate p : Foo => My::moo;
    val q = p is Moo;
    val r = q is Boo;

    assert (p.invoke 3) == 30;
    assert (p.invoke 5) == 50;
    assert (r.invoke 7) == 70;

    assert (instanceof p : Boo);
    assert (instanceof p : Moo);
    assert (instanceof p : Foo);

    assert p === q;
    assert p === r;
}


defun moo (x : int) : int
{
    return 10 * x;
}