module Main in execution;

@Start
defun main (args : String[]) : void
{
    # Get the list object that will be used for testing.
    # Each time function F02 recurses, a value will be added to the list.
    # Specifically, the size of the list will be added to it.
    # As a result, the final state of the list should look like [0, 1, 2, 3, ...].
    val list1 = call Main::F01();

    # Create a list that contains the numbers 0, 1, 2, 3, ..., 123455.
    val list2 = (new LinkedList);

    var i = 0;

    while(i < 123456)
    {
          list2.add(i);
          let i = i + 1;
    }

    # Check the state of the lists before the recursive function is invoked.
    assert list1.isEmpty();
    assert list2.size() == 123456;

    call Main::F02();

    # Check the state of the lists after the recursive function was invoked.
    assert list1.size() == 123456;
    assert list2.size() == 123456;
    assert list1 !== list2;
    assert list1 == list2;
}

defun F01() : List
{
    val list = (new LinkedList);

    forever
    {
        yield list;
    }
}

defun F02 () : int
{
    # This function will recur 123456 times.
    # If tail-recursion is not properly implemented, then a stack-overflow should occur.

    val list = call Main::F01();

    val size = list.size();

    when (size == 123456) then return size;

    list.add(size);

    recur;
}