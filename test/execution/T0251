module Main in execution;

tuple Person (name : String, age : int);

@Start
defun main (args : String[]) : void
{
    delegate method : MethodEquals => My::equals;


    # Create a simple immutable tuple.
    #
    var p = Person::instance();
    p = p.name("Emma");
    p = p.age(24);



    # By default, the special-bindings will be the empty instance of the SpecialMethods class.
    #
    assert p.bindings() === SpecialMethods::instance();
    assert p.bindings().getEquals() == null;



    # Redefine the equals(Object) method.
    #
    p = Records::bindEquals(p, method);



    # The tuple should now contain a reference to the functor that implements the method.
    #
    assert p.bindings() !== SpecialMethods::instance();
    assert p.bindings().getEquals() != null;



    # The reference should be preserved whenever an immutable copy is made.
    #
    p = p.immutable();
    assert p.bindings() !== SpecialMethods::instance();
    assert p.bindings().getEquals() != null;



    # The reference should be preserved whenever an mutable copy is made, also.
    #
    p = p.mutable();
    assert p.bindings() !== SpecialMethods::instance();
    assert p.bindings().getEquals() != null;
}

defun equals(self : Record, other : Object) : boolean
{
    return false;
}









