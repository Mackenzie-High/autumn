module Main in execution;



@Start
defun main (args : String[]) : void
{
    val tester = (new UnitTester);

    (tester.add (call Main::instance));


    assert ((tester.modules).contains (call Main::instance));
    assert ((tester.modules).size) == 1;



    val results = (tester.run);



    # Tests Overall
    assert (results.passed) == false;
    assert (results.failed) == true;
    assert (results.executionTime) >= 0;



    # Test #1 - Wrong Number of Parameters
    assert (((results.find "Main::test1").thrown).getClass) == (class MalformedTestException);

    # Test #2 - Wrong Type of Parameter
    assert (((results.find "Main::test2").thrown).getClass) == (class MalformedTestException);

    # Test #3 - Wrong Return Type
    assert (((results.find "Main::test3").thrown).getClass) == (class MalformedTestException);

    # Test #4 - Test Failed, due to an exception, when an exception was not expected.
    assert (((results.find "test4").thrown).getClass) == (class IllegalArgumentException);
    assert ((results.find "test4").passed) == false;
    assert ((results.find "test4").failed) == true;

    # Test #5 - Test Failed, due to an exception, when an exception was expected.
    assert (((results.find "test5").thrown).getClass) == (class RuntimeException);
    assert ((results.find "test5").passed) == false;
    assert ((results.find "test5").failed) == true;

    # Test #6 - Test Passed, due to an exception.
    assert (((results.find "test6").expected)) == (class IllegalArgumentException);
    assert (((results.find "test6").thrown).getClass) == (class IllegalArgumentException);
    assert ((results.find "test6").passed) == true;
    assert ((results.find "test6").failed) == false;

    # Test #7 - Test Passed, when no exception was thrown.
    assert (((results.find "test7").thrown)) == null;
    assert ((results.find "test7").passed) == true;
    assert ((results.find "test7").failed) == false;
    assert (((results.find "test7")).executionTime) >= 0;

    # Test #8 - Custom Description
    assert (((results.find "test8").description)) == "Folderol";

    # Test #9 - Default Description
    assert (((results.find "test9").description)) == null;

    # Test #10 - Delegate
    assert (((results.find "test10").function).name) == "test10";
    assert ((results.find "test10").passed) == true;
    assert ((results.find "test10").failed) == false;
}

@Test
defun test1 () : void
{
    nop;
}

@Test
defun test2 (test : int) : void
{

}

@Test
defun test3 (test : TestCase) : int
{
    (test.name "test3");
}

@Test
defun test4 (test : TestCase) : void
{
    (test.name "test4");

    throw (new IllegalArgumentException);
}

@Test
defun test5 (test : TestCase) : void
{
    (test.name "test5");
    (test.expect (class IllegalArgumentException));

    throw (new RuntimeException);
}

@Test
defun test6 (test : TestCase) : void
{
    (test.name "test6");
    (test.expect (class IllegalArgumentException));

    throw (new IllegalArgumentException);
}

@Test
defun test7 (test : TestCase) : void
{
    (test.name "test7");
}

@Test
defun test8 (test : TestCase) : void
{
    (test.name "test8");

    (test.describe "Folderol");
}

@Test
defun test9 (test : TestCase) : void
{
    (test.name "test9");
}

@Test
defun test10 (test : TestCase) : void
{
    (test.name "test10");

    assert ((test.function).name) == "test10";
}