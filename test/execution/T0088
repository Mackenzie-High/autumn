module * in execution;

@Start
defun main (args : String[]) : void
{
    val T = true;
    val F = false;

    // boolean
    assert (F != F) == F;
    assert (F != T) == T;
    assert (T != F) == T;
    assert (T != T) == F;

    // char
    assert (2C != 3C) == T;
    assert (3C != 3C) == F;
    assert (3C != 2C) == T;

    // byte
    assert (2B != 3B) == T;
    assert (3B != 3B) == F;
    assert (3B != 2B) == T;

    // short
    assert (2S != 3S) == T;
    assert (3S != 3S) == F;
    assert (3S != 2S) == T;

    // int
    assert (2 != 3) == T;
    assert (3 != 3) == F;
    assert (3 != 2) == T;

    // long
    assert (2L != 3L) == T;
    assert (3L != 3L) == F;
    assert (3L != 2L) == T;

    // float
    assert (2.0F != 3.0F) == T;
    assert (3.0F != 3.0F) == F;
    assert (3.0F != 2.0F) == T;

    // double
    assert (2.0 != 3.0) == T;
    assert (3.0 != 3.0) == F;
    assert (3.0 != 2.0) == T;

    // BigInteger
    assert ((new BigInteger "2") != (new BigInteger "3")) == T;
    assert ((new BigInteger "3") != (new BigInteger "3")) == F;
    assert ((new BigInteger "3") != (new BigInteger "2")) == T;

    // BigInteger - null
    assert (null != (new BigInteger "3")) == T;
    assert ((new BigInteger "3") != null) == T;

    // BigInteger
    assert ((new BigDecimal 2) != (new BigDecimal 3)) == T;
    assert ((new BigDecimal 3) != (new BigDecimal 3)) == F;
    assert ((new BigDecimal 3) != (new BigDecimal 2)) == T;

    // BigDecimal - Weird Behavior of equals(Object)
    assert ((new BigDecimal "3") != (new BigDecimal "3.00")) == T;

    // BigDecimal - null
    assert (null != (new BigInteger "3")) == T;
    assert ((new BigInteger "3") != null) == T;

    // Object - Neither operand is null.
    assert ("Hello" != "Hello") == F;
    assert ("Hello" != "World") == T;

    // Object - One operand is null.
    assert (null != "Venus") == T;
    assert ("Venus" != null) == T;

    // Object - Both operands are null.
    assert (null != null) == F;
}










