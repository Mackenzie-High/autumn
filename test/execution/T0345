module Main in execution;

exception A extends RuntimeException;

exception B extends A;

exception C extends B;

@Start
defun main (args : String[]) : void
{
    var s = new StringBuilder();

    My::catcher(s, 0);
    My::catcher(s, 1);
    My::catcher(s, 2);
    My::catcher(s, 3);
    My::catcher(s, 4);

    assert "0ABC4" == s.toString();
}

defun catcher (s : StringBuilder,
               n : int) : void
{
    try
    {
        My::thrower(n);

        s.append(n);
    }
    catch (c : C)
    {
        s.append("C");
    }
    catch (b : B)
    {
        s.append("B");
    }
    catch (a : A)
    {
        s.append("A");
    }
}

defun thrower (x : int) : void
{
    when (x == 1) then throw new A();

    when (x == 2) then throw new B();

    when (x == 3) then throw new C();
}