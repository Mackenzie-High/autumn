module * in execution;

@Start
defun main (args : String[]) : void
{
    // Case: Overloads where the left-operand is a primitive and the right-operand is a string.
    assert (true .. "5") == "true5";
    assert (65C .. "5") == "A5";
    assert (7B .. "5") == "75";
    assert (7S .. "5") == "75";
    assert (7 .. "5") == "75";
    assert (7L .. "5") == "75";
    assert (7.0F .. "5") == "7.05";
    assert (7.0 .. "5") == "7.05";

    // Case: Overloads where the left-operand is a string and the right-operand is a primitive.
    assert ("5" .. true) == "5true";
    assert ("5" .. 65C) == "5A";
    assert ("5" .. 7B) == "57";
    assert ("5" .. 7S) == "57";
    assert ("5" .. 7) == "57";
    assert ("5" .. 7L) == "57";
    assert ("5" .. 7.0F) == "57.0";
    assert ("5" .. 7.0) == "57.0";

    // Case: Overload where both operands are strings.
    assert ("A" .. "Z") == "AZ";

    // Case: Overload where both operands are primitive.
    assert (1 .. 7) == "17";

    // Multiple Concatenations
    assert ("A" .. 1 .. 2.. 3 .. "Z") == "A123Z";
}