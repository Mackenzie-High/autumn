module Main in execution;

@Start
defun main (args : String[]) : void
{
    assert My::test01();
    assert My::test02();
    assert My::test03();
    assert My::test04();
    assert My::test05();
    assert My::test06();
    assert My::test07();
    assert My::test08();
    assert My::test09();
    assert My::test10();
    assert My::test11();
}

defun test01 () : boolean
{
    try
    {
        10C % 0C;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test02 () : boolean
{
    try
    {
        10B % 0B;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test03 () : boolean
{
    try
    {
        10S % 0S;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test04 () : boolean
{
    try
    {
        10 % 0;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test05 () : boolean
{
    try
    {
        10L % 0L;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test06 () : boolean
{
    return Float::isNaN(10.0F % 0.0F);
}

defun test07 () : boolean
{
    return Double::isNaN(10.0 % 0.0);
}

defun test08 () : boolean
{
    try
    {
        10BI % 0BI;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test09 () : boolean
{
    try
    {
        10.0BD % 0.0BD;

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test10 () : boolean
{
    try
    {
        10BI % (null is BigInteger);

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}

defun test11 () : boolean
{
    try
    {
        10.0BD % (null is BigDecimal);

        return false;
    }
    catch (ex : ArithmeticException)
    {
        return true;
    }
}



