module Main in execution;


functor Boo (x : Object) : String;

functor Moo (x : Number) : String extends Boo;

functor Foo (x : Integer) : String extends Moo;


@Start
defun main (args : String[]) : void
{
    delegate p : Foo => My::moo;
    val q = p is Moo;
    val r = q is Boo;

    assert p == q;
    assert p == r;



    # The invocations must actually work.
    #
    val x = p.invoke(3);
    val y = q.invoke(5);
    val z = r.invoke(7);

    assert x == "30";
    assert y == "50";
    assert z == "70";



    # Ensure that the compiler correctly figured out the return-type.
    #
    assert p.returnType() == (class String);



    # Ensure that the compiler correctly figured out the parameter-types.
    #
    assert p.parameterTypes() == [(class Integer)];
}


defun moo (x : Integer) : String
{
    return Strings::str(x * 10);
}
