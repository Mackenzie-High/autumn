module Main in execution;

import high.mackenzie.autumn.lang.compiler.typesystem.TypeFactory;
import high.mackenzie.autumn.lang.compiler.utils.TypeSystemUtils;
import java.util.AbstractList;
import java.io.Serializable;

@Start
defun main (args : String[]) : void
{
    # In order to test the isAssignableTo function,
    # we need to ensure that always works the same as the type-system.
    # So, we are going to create a dataset of types.
    # Then, we are going to test whether the function acts like the type-system.

    val types = new LinkedList();

    types.add(null);                 # null-type
    types.add((class void));         # void-type
    types.add((class boolean));      # primitive
    types.add((class char));         # primitive
    types.add((class byte));         # primitive
    types.add((class short));        # primitive
    types.add((class int));          # primitive
    types.add((class long));         # primitive
    types.add((class float));        # primitive
    types.add((class double));       # primitive
    types.add((class Boolean));      # boxed
    types.add((class Character));    # boxed
    types.add((class Byte));         # boxed
    types.add((class Short));        # boxed
    types.add((class Integer));      # boxed
    types.add((class Long));         # boxed
    types.add((class Float));        # boxed
    types.add((class Double));       # boxed
    types.add((class BigInteger));   # special type
    types.add((class BigDecimal));   # special type
    types.add((class String));       # special type
    types.add((class Comparable));   # special type
    types.add((class Number));       # special type
    types.add((class Serializable)); # special type
    types.add((class Object));       # top type of references
    types.add((class Iterable));     # subtype of Object
    types.add((class Collection));   # subtype of Iterable
    types.add((class Set));          # subtype of Collection, but not a List
    types.add((class List));         # subtype of Collection, but not a Set
    types.add((class AbstractList)); # subtype of List and supertype of ArrayList & LinkedList
    types.add((class ArrayList));    # subtype of List, but not a LinkedList
    types.add((class LinkedList));   # subtype of List, but not an ArrayList
    types.add((class boolean[]));    # array of primitives
    types.add((class Boolean[]));    # array of boxed
    types.add((class String[]));     # array of references
    types.add((class Object[]));     # array of top reference type

    ##########################################################################
    # Run Test Cases
    ##########################################################################

    # This is the type-system used by the compiler.
    val system = new TypeFactory();

    foreach (assignee : Class in types)
    {
        foreach (value : Class in types)
        {
            My::test(system, assignee, value);
        }
    }
}

defun test (system : TypeFactory, assignee : Class, value : Class) : void
{
    val utils = new TypeSystemUtils(system);

    val output = (if assignee == null then (field utils.NULL) else system.fromClass(assignee));
    val input = (if value == null then (field utils.NULL) else system.fromClass(value));

    val expected = utils.assign(input, output) != null;
    val actual = F::isAssignableTo(assignee, value);

    assert expected == actual echo F::str([assignee, value, expected, actual]);
}