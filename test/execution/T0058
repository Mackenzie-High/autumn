module Main in execution;

@Start
defun main (args : String[]) : void
{
    # Note: The loop is needed in order to detect operand-stack leakage.

    var i = 0;

    while(i < 25000)
    {
        var value = [];

        # Zero Element
        let value = [];
        assert (value.size) == 0;

        # One Element
        let value = [100];
        assert (value.size) == 1;
        assert (value.get 0) == 100;

        # Two Elements
        let value = [100, 200];
        assert (value.size) == 2;
        assert (value.get 0) == 100;
        assert (value.get 1) == 200;

        # Multiple Elements
        let value = [100, 200, 300];
        assert (value.size) == 3;
        assert (value.get 0) == 100;
        assert (value.get 1) == 200;
        assert (value.get 2) == 300;

        # Values of Different Types
        let value = [true, 10C, 20B, 30S, 40, 50L, 60.0F, 70.0, "Venus", false];
        assert (value.size) == 10;
        assert (value.get 0) == (true as Object);
        assert (value.get 1) == (10C as Object);
        assert (value.get 2) == (20B as Object);
        assert (value.get 3) == (30S as Object);
        assert (value.get 4) == (40  as Object);
        assert (value.get 5) == (50L as Object);
        assert (value.get 6) == (60.0F as Object);
        assert (value.get 7) == (70.0  as Object);
        assert (value.get 8) == "Venus";
        assert (value.get 9) == (false as Object);

        # Lists must be immutable.
        try
        {
            let value = [];
            (value.add "Pluto");
            assert false;
        }
        catch(ex : Exception)
        {
            assert true;
        }

        # Lists must actually be lists.
        let value = [];
        assert (instanceof value : List);

        let i = i + 1;
    }
}

