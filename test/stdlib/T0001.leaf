module Main in tests;

import high.mackenzie.autumn.util.ds.ConcreteMutableList;
import high.mackenzie.autumn.util.ds.ConcreteImmutableList;

@Start
defun main(args : String[]) : void
{
    val builder = (new ConcreteMutableList);

    assert builder.size() == 0;
    assert builder.isEmpty() == true;

    builder.add("A");
    builder.add("B");
    builder.add("C");
    builder.add("D");
    builder.add("E");

    assert builder.size() == 5;
    assert builder.isEmpty() == false;

    val list = builder.immutable() is ConcreteImmutableList;

    assert Reflect::isSubtypeOflist.getClass((), (class ConcreteImmutableList));

    assert "[A, B, C, D, E]" == list.toString();

    assert list.size() == 5;
    assert list.isEmpty() == false;

    assert list.get(0) == "A";
    assert list.get(1) == "B";
    assert list.get(2) == "C";
    assert list.get(3) == "D";
    assert list.get(4) == "E";

    val modifier = list.mutable();

    modifier.add("X");
    modifier.add("Y");
    modifier.add("Z");

    val modified = modifier.immutable();

    assert builder !== list;
    assert modifier !== modified;

    assert "[A, B, C, D, E]" == builder.toString();
    assert "[A, B, C, D, E]" == list.toString();
    assert "[A, B, C, D, E, X, Y, Z]" == modifier.toString();
    assert "[A, B, C, D, E, X, Y, Z]" == modified.toString();

    builder.add("P");
    modifier.add("Q");

    assert "[A, B, C, D, E, P]" == builder.toString();
    assert "[A, B, C, D, E]" == list.toString();
    assert "[A, B, C, D, E, X, Y, Z, Q]" == modifier.toString();
    assert "[A, B, C, D, E, X, Y, Z]" == modified.toString();
}