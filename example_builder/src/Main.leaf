module Main in program;

import java.io.File;
import java.lang.ProcessBuilder;

@Start
defun main (args : String[]) : void
{
    # This is the folder that contains the example folders. 
    val folder = new File (F::get(args, 0));

    # This will be used to sort the examples. 
    val examples = new TreeSet(); 

    # Find the examples. 
    foreach (file : File in F::filesOf(folder, false))
    {
        # Skip hidden folders. 
        when (file.isHidden()) then continue;
        
        examples.add(file);
    }

    # Reverse the order of the examples.
    # Higher numbered examples are newer.
    # Newer examples are more likely to fail, because they are still ebing developed. 
    val reversed = F::reversed(examples);

    # Run the examples.
    foreach (example : File in reversed)
    {
        F::print(example);

        # This is the path to the stdout.txt file of the example. 
        val stdout = new File(example, "stdout.txt");
        when (stdout.exists()) then stdout.delete();

        # This is the path to the project folder of the example. 
        val project = new File(example, "project");

        # Run the example and wait for it to finish.
        val builder = new ProcessBuilder(["autumn", "run"]);
        builder.directory(project);
        builder.redirectOutput(stdout);
        builder.redirectError(stdout);
        val process = builder.start();
        process.waitFor();

        F::println("; exit-code = " .. process.exitValue());

        # If the example failed due to a syntax error, report it.
        val text = F::readText(stdout, null);

        if (text.contains("Parsing Failed!"))
        { 
            F::println("Bad Example - Parsing Failed!");
            return;
        }
    }
    
}