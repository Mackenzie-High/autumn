module Main in execution;

design Taxable (income : int);

design Citizen (id : int);

tuple Person (name : String, 
              id : int, 
              income : int) extends Citizen & Taxable;

@Start
defun main (args : String[]) : void
{
    val anna = new Person ("Anna", 7_433_9_7452, 25_000);
    val emma = new Person ("Emma", 9_214_7_6357, 50_000);
    val kate = new Person ("Kate", 8_123_3_8721, 10_000);

    My::printTax(anna);
    My::printTax(emma);
    My::printTax(kate);
}

defun printTax (person : Person) : void
{
    val name = person.name();

    val id = person.id();

    val tax = My::computeTax(person);

    F::println("Name = " .. name);
    F::println("ID   = " .. id);
    F::println("Tax  = " .. tax);
    F::println();
}

defun computeTax (taxable : Taxable) : int
{
    val income = taxable.income();

    # 25% Tax Rate
    return income / 4; 
}
