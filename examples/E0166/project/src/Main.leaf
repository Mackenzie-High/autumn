module Main in execution;

enum Places ();

exception Apocalypse extends RuntimeException;

design Taxable ();

struct Company () extends Taxable;

tuple Person () extends Taxable;

functor Transform (x : int) : int;


@Start
defun main (args : String[]) : void
{
    My::describe(class Start);
    My::describe(class Apocalypse);
    My::describe(class Taxable);
    My::describe(class Company);
    My::describe(class Person);
    My::describe(class Transform);
}

defun describe (klass : Class) : void
{
    F::println("Name = " .. klass.getSimpleName());
    F::println("  Module? = " .. F::isModuleType(klass));
    F::println("  Annotation? = " .. F::isAnnotationType(klass));
    F::println("  Enum? = " .. F::isEnumType(klass));
    F::println("  Exception? = " .. F::isExceptionType(klass));
    F::println("  Record? = " .. F::isRecordType(klass));
    F::println("  Design? = " .. F::isDesignType(klass));
    F::println("  Struct? = " .. F::isStructType(klass));
    F::println("  Tuple? = " .. F::isTupleType(klass));
    F::println("  Functor? = " .. F::isFunctorType(klass));
    F::println();
}