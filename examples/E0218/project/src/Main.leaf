module Main in execution;

design Animal (name : String);

tuple Cat (name : String) extends Animal;

tuple Dog (name : String) extends Animal;

tuple Cow (name : String) extends Animal;

tuple AnimalHouse (owner : Animal, area : int);


@Start
defun main (args : String[]) : void
{
    # Create some animals. 
    val owner_1 = new Cat("Fluffy");
    val owner_2 = new Dog("Jet");
    val owner_3 = new Cow("Moo");

    # Place them in appropriately sized houses.
    My::provideHome(owner_1);
    My::provideHome(owner_2);
    My::provideHome(owner_3);
}

defun provideHome (owner : Animal) : void
{
    val house = dispatch create (owner) is AnimalHouse;

    F::println("Home Owner: " .. owner.name());
    F::println("Home Size:  " .. house.area());
    F::println();
}

defun create (owner : Cat) : AnimalHouse
{
    # Assume that a cat needs a 25 sqft. house. 
    return new AnimalHouse(owner, 5 * 5);
}

defun create (owner : Dog) : AnimalHouse
{
    # Assume that a dog needs a 100 sqft. house. 
    return new AnimalHouse(owner, 10 * 10);
}

defun create (owner : Cow) : AnimalHouse
{
    # Assume that a cow needs a 2500 sqft. house. 
    return new AnimalHouse(owner, 50 * 50);
}

