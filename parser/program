
def fum () : void
{
  var xoo = null;

  var xoo = 123;
  val xoo = 456;
  let xoo = 789;

  var xoo = - 123;
  # var xoo = - - 123;
  var xoo = ! 123;
  # var xoo = ! ! 123;
  var xoo = 123 / 456 / 789;
  var xoo = 123 % 456 % 789;
  var xoo = 123 * 456 * 789;
  var xoo = 123 + 456 + 789;
  var xoo = 123 - 456 - 789;
  var xoo = 123 == 456 == 789;
  var xoo = 123 != 456 != 789;
  var xoo = 123 <= 456 <= 789;
  var xoo = 123 >= 456 >= 789;
  var xoo = 123 < 456 < 789;
  var xoo = 123 > 456 > 789;
  var xoo = 123 & 456 & 789;
  var xoo = 123 | 456 | 789;
  var xoo = 123 ^ 456 ^ 789;
  var xoo = 123 && 456 && 789;
  var xoo = 123 || 456 || 789;
  var xoo = 123 ?? 456 ?? 789;

  var xoo = (new Moo);
  var xoo = (new Moo 123);
  var xoo = (new Moo 123 , 456);
  var xoo = (new Moo 123 , 456 , 789);

  var xoo = (call moo.boo);
  var xoo = (call moo.boo 123);
  var xoo = (call moo.boo 123 , 456);
  var xoo = (call moo.boo 123 , 456 , 789);

  var xoo = (call Moo::boo);
  var xoo = (call Moo::boo 123);
  var xoo = (call Moo::boo 123 , 456);
  var xoo = (call Moo::boo 123 , 456 , 789);

  var xoo = (set_field moo.boo = 123);
  
  var xoo = (set_static Moo::boo = 123);

  var xoo = (get_field moo.boo);
  
  var xoo = (get_static Moo::boo);

  var xoo = (iof 123 : String);

  var xoo = (class_of String);

  assert 12 == 34;

  throw 123;

  (call Goo.fum);

  if(2 == 3)
  {
    nop;
  }

  if(2 == 3)
  {
    var xoo = 23;
  }
  else
  {
    var xoo = 57;
  }


  try
  {
    throw 456;
  }
  catch(ex : SomeException)
  {
    return 123;
  }

  nop;
  nop;
  break;
  continue;

  while(0xF)
  {
    nop;
  }

  until(13)
  {
    nop;
  }

  do
  {
    nop;
  }
  while(i < 3)

  do
  {
    nop;
  }
  until(i < 7)

  for(i = 0; i < 5; 23)
  {
    nop;
  }

  foreach(x as int in iterable)
  {
    nop;
  }

  return;

  return 123;

  recur;

  recur 123;
  recur 123 , 456;
  recur 123 , 456 , 789;
} 


