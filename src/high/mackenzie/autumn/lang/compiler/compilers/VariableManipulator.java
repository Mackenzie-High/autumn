package high.mackenzie.autumn.lang.compiler.compilers;

import com.google.common.base.Preconditions;
import high.mackenzie.autumn.lang.compiler.typesystem.design.IVariableType;
import high.mackenzie.autumn.lang.compiler.utils.Utils;
import high.mackenzie.autumn.resources.Finished;
import org.objectweb.asm.tree.InsnList;

/**
 * An instance of this class is used to generate bytecode that manipulates local-variables.
 *
 * @author Mackenzie High
 */
@Finished("2014/07/12")
public final class VariableManipulator
{
    /**
     * This is the scope that contains the variables that are manipulatable.
     */
    private final VariableScope scope;

    /**
     * This is the list of bytecode instructions that is being generated by the compiler.
     */
    private final InsnList code;

    /**
     * Sole Constructor.
     *
     * @param scope is the scope of the variables to manipulate.
     * @param code is the code being generated.
     */
    public VariableManipulator(final VariableScope scope,
                               final InsnList code)
    {
        Preconditions.checkNotNull(scope);
        Preconditions.checkNotNull(code);

        this.scope = scope;
        this.code = code;
    }

    /**
     * This method retrieves the scope that contains the variables that can be manipulated.
     *
     * @return the scope of the variables.
     */
    public VariableScope scope()
    {
        return scope;
    }

    /**
     * This method generates the bytecode necessary to initialize the scope.
     */
    public void initScope()
    {
        // For each variable declared in the scope, assign it a default value.
        for (String name : scope.getVariables())
        {
            // If the variable is a parameter, skip it.
            // Parameter's do not need a default value.
            if (scope.isParameter(name))
            {
                continue;
            }

            // Load the default value of the variable onto the operand-stack.
            // The default value varies based on the type of the variable.
            code.add(Utils.ldcDefault(scope.typeOf(name)));

            // Assign the default value to the variable itself.
            store(name);
        }
    }

    /**
     * This method generates bytecode that loads a variable onto the operand-stack.
     *
     * @param name is the name of the variable to load.
     */
    public void load(final String name)
    {
        Preconditions.checkNotNull(name);

        // Get the type of the variable.
        final IVariableType type = scope.typeOf(name);

        // Get the address where the variable is stored in the stack-frame.
        final int address = scope.addressOf(name);

        // Load the variable onto the operand-stack.
        code.add(Utils.selectLoadVarInsn(type, address));
    }

    /**
     * This method generates bytecode that assigns a value to a variable.
     *
     * @param name is the name of the variable that is being assigned a value.
     */
    public void store(final String name)
    {
        final IVariableType type = scope.typeOf(name);

        final int address = scope.addressOf(name);

        code.add(Utils.selectStoreVarInsn(type, address));
    }
}
