package high.mackenzie.autumn.lang.compiler.parser;

import high.mackenzie.snowflake.Grammar;
import high.mackenzie.snowflake.GrammarBuilder;
import high.mackenzie.snowflake.IParser;
import high.mackenzie.snowflake.ParserOutput;


/**
 * This class was auto-generated using the Snowflake parser-generator.
 *
 * <p>Generated On: Mon Jul 14 10:23:35 EDT 2014</p>
 */
public final class Parser implements IParser
{

    private static final Grammar grammar = grammar();


    /**
     * This method constructs the grammar object.
     */
    private static Grammar grammar()
    {
        final GrammarBuilder g = new GrammarBuilder();

        // Character Classes
        g.range("@class0", (char) 64, (char) 64);
        g.range("@class1", (char) 123, (char) 123);
        g.range("@class2", (char) 125, (char) 125);
        g.range("@class3", (char) 58, (char) 58);
        g.range("@class4", (char) 58, (char) 58);
        g.range("@class5", (char) 123, (char) 123);
        g.range("@class6", (char) 125, (char) 125);
        g.range("@class7", (char) 123, (char) 123);
        g.range("@class8", (char) 125, (char) 125);
        g.range("@class9", (char) 40, (char) 40);
        g.range("@class10", (char) 58, (char) 58);
        g.range("@class11", (char) 41, (char) 41);
        g.range("@class12", (char) 40, (char) 40);
        g.range("@class13", (char) 41, (char) 41);
        g.range("@class14", (char) 61, (char) 61);
        g.range("@class15", (char) 40, (char) 40);
        g.range("@class16", (char) 41, (char) 41);
        g.range("@class17", (char) 58, (char) 58);
        g.range("@class18", (char) 61, (char) 61);
        g.range("@class19", (char) 61, (char) 61);
        g.range("@class20", (char) 61, (char) 61);
        g.range("@class21", (char) 46, (char) 46);
        g.range("@class22", (char) 46, (char) 46);
        g.range("@class23", (char) 46, (char) 46);
        g.range("@class24", (char) 38, (char) 38);
        g.range("@class25", (char) 124, (char) 124);
        g.range("@class26", (char) 94, (char) 94);
        g.range("@class27", (char) 62, (char) 62);
        g.range("@class28", (char) 60, (char) 60);
        g.range("@class29", (char) 43, (char) 43);
        g.range("@class30", (char) 45, (char) 45);
        g.range("@class31", (char) 47, (char) 47);
        g.range("@class32", (char) 37, (char) 37);
        g.range("@class33", (char) 42, (char) 42);
        g.range("@class34", (char) 45, (char) 45);
        g.range("@class35", (char) 33, (char) 33);
        g.range("@class36", (char) 40, (char) 40);
        g.range("@class37", (char) 41, (char) 41);
        g.range("@class38", (char) 40, (char) 40);
        g.range("@class39", (char) 41, (char) 41);
        g.range("@class40", (char) 44, (char) 44);
        g.range("@class41", (char) 91, (char) 91);
        g.range("@class42", (char) 93, (char) 93);
        g.range("@class43", (char) 61, (char) 61);
        g.range("@class44", (char) 61, (char) 61);
        g.range("@class45", (char) 58, (char) 58);
        g.range("@class46", (char) 46, (char) 46);
        g.range("@class47", (char) 58, (char) 58);
        g.range("@class48", (char) 40, (char) 40);
        g.range("@class49", (char) 44, (char) 44);
        g.range("@class50", (char) 41, (char) 41);
        g.range("@class51", (char) 58, (char) 58);
        g.range("@class52", (char) 44, (char) 44);
        g.range("@class53", (char) 91, (char) 91);
        g.range("@class54", (char) 93, (char) 93);
        g.range("@class55", (char) 46, (char) 46);
        g.range("@class56", (char) 46, (char) 46);
        g.range("@class57", (char) 0, (char) 65535);
        g.range("@class58", (char) 67, (char) 67);
        g.range("@class59", (char) 45, (char) 45);
        g.range("@class60", (char) 66, (char) 66);
        g.range("@class61", (char) 45, (char) 45);
        g.range("@class62", (char) 83, (char) 83);
        g.range("@class63", (char) 45, (char) 45);
        g.range("@class64", (char) 45, (char) 45);
        g.range("@class65", (char) 76, (char) 76);
        g.range("@class66", (char) 45, (char) 45);
        g.range("@class67", (char) 46, (char) 46);
        g.range("@class68", (char) 70, (char) 70);
        g.range("@class69", (char) 45, (char) 45);
        g.range("@class70", (char) 46, (char) 46);
        g.range("@class71", (char) 40, (char) 40);
        g.range("@class72", (char) 41, (char) 41);
        g.range("@class73", (char) 59, (char) 59);
        g.range("@class74", (char) 65, (char) 90);
        g.range("@class75", (char) 97, (char) 122);
        g.range("@class76", (char) 95, (char) 95);
        g.range("@class77", (char) 36, (char) 36);
        g.combine("@class78", "@class74", "@class75", "@class76", "@class77");
        g.range("@class79", (char) 65, (char) 90);
        g.range("@class80", (char) 97, (char) 122);
        g.range("@class81", (char) 95, (char) 95);
        g.range("@class82", (char) 36, (char) 36);
        g.range("@class83", (char) 48, (char) 57);
        g.combine("@class84", "@class79", "@class80", "@class81", "@class82", "@class83");
        g.range("@class85", (char) 48, (char) 57);
        g.range("@class86", (char) 101, (char) 101);
        g.range("@class87", (char) 69, (char) 69);
        g.combine("@class88", "@class86", "@class87");
        g.range("@class89", (char) 45, (char) 45);
        g.range("@class90", (char) 48, (char) 57);
        g.combine("@class91", "@class89", "@class90");
        g.range("@class92", (char) 48, (char) 57);
        g.range("@class93", (char) 34, (char) 34);
        g.range("@class94", (char) 34, (char) 34);
        g.combine("@class95", "@class94");
        g.negate("@class96", "@class95");
        g.range("@class97", (char) 39, (char) 39);
        g.combine("@class98", "@class97");
        g.negate("@class99", "@class98");
        g.range("@class100", (char) 35, (char) 35);
        g.range("@class101", (char) 10, (char) 10);
        g.range("@class102", (char) 13, (char) 13);
        g.combine("@class103", "@class101", "@class102");
        g.negate("@class104", "@class103");
        g.range("@class105", (char) 10, (char) 10);
        g.range("@class106", (char) 13, (char) 13);
        g.combine("@class107", "@class105", "@class106");
        g.range("@class108", (char) 0, (char) 65535);
        g.combine("@class109", "@class108");
        g.range("@class110", (char) 10, (char) 10);
        g.range("@class111", (char) 13, (char) 13);
        g.combine("@class112", "@class110", "@class111");
        g.range("@class113", (char) 10, (char) 10);
        g.range("@class114", (char) 13, (char) 13);
        g.combine("@class115", "@class113", "@class114");
        g.negate("@class116", "@class115");
        g.range("@class117", (char) 32, (char) 32);
        g.range("@class118", (char) 9, (char) 9);
        g.range("@class119", (char) 10, (char) 10);
        g.range("@class120", (char) 11, (char) 11);
        g.range("@class121", (char) 12, (char) 12);
        g.range("@class122", (char) 13, (char) 13);
        g.combine("@class123", "@class117", "@class118", "@class119", "@class120", "@class121", "@class122");

        // Grammar Rules
        g.choose("@213", "SP", "COMMENT");
        g.choose("@216", "@214", "@215");
        g.choose("@59", "do_until", "do_while");
        g.choose("COMMENT", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT");
        g.choose("NON_TRIPLE_QUOTE", "@211", "@212");
        g.choose("STRING_LITERAL", "STRING_LITERAL_STYLE1", "STRING_LITERAL_STYLE2");
        g.choose("assertion_echo_opt", "assertion_echo", "assertion_echo_empty");
        g.choose("assumption_echo_opt", "assumption_echo", "assumption_echo_empty");
        g.choose("boolean_value", "true", "false");
        g.choose("char_value", "literal_char_value", "numeric_char_value");
        g.choose("datum", "string_datum", "boolean_datum", "char_datum", "float_datum", "double_datum", "long_datum", "short_datum", "byte_datum", "int_datum", "null_datum", "class_datum", "variable_datum");
        g.choose("definition", "function_definition", "exception_definition", "design_definition", "enum_definition", "annotation_definition");
        g.choose("design_extends_opt", "design_extends", "design_extends_empty");
        g.choose("design_member", "property", "method");
        g.choose("expression", "p1", "keyword_expression", "nested_expression");
        g.choose("extends_list", "extends_list_cons", "extends_list_end");
        g.choose("keyword_expression_body", "funcall_expression", "delegate_expression", "locals_expression", "dispatch_expression", "new_expression", "call_static_method_expression", "call_method_expression", "set_static_expression", "get_static_expression", "set_field_expression", "get_field_expression", "instanceof_expression", "create_expression", "ternary_conditional_expression", "progn_expression");
        g.choose("module_member", "module_directive", "import_directive", "definition");
        g.choose("module_name", "name_of_anonymous_module", "name_of_named_module");
        g.choose("namespace", "namespace_explicit", "namespace_implicit");
        g.choose("p1_operation", "as_operation", "is_operation");
        g.choose("p3_operation", "short_circuit_and_operation", "short_circuit_or_operation", "and_operation", "or_operation", "xor_operation", "implies_operation");
        g.choose("p4_operation", "identity_equals_operation", "identity_not_equals_operation", "equals_operation", "not_equals_operation", "greater_or_equals_operation", "less_or_equals_operation", "greater_operation", "less_operation");
        g.choose("p6_operation", "add_operation", "subtract_operation");
        g.choose("p7_operation", "divide_operation", "modulo_operation", "multiply_operation");
        g.choose("p8", "datum", "negate_operation", "not_operation", "keyword_expression", "nested_expression", "list_expression", "delegate_expression");
        g.choose("statement", "sequence_statement", "if_statement", "when_statement", "goto_statement", "marker_statement", "do_statement", "break_statement", "continue_statement", "redo_statement", "foreach_statement", "for_statement", "until_statement", "while_statement", "forever_statement", "assert_statement", "assume_statement", "throw_statement", "try_catch_statement", "var_statement", "val_statement", "let_statement", "setter_statement", "getter_statement", "method_statement", "nop_statement", "debug_statement", "return_value_statement", "return_void_statement", "recur_statement", "yield_value_statement", "yield_void_statement", "expression_statement");
        g.choose("type_namespace", "type_namespace_explicit", "type_namespace_implicit");
        g.chr("@10", "@class2");
        g.chr("@100", "@class28");
        g.chr("@102", "@class29");
        g.chr("@103", "@class30");
        g.chr("@104", "@class31");
        g.chr("@105", "@class32");
        g.chr("@106", "@class33");
        g.chr("@107", "@class34");
        g.chr("@108", "@class35");
        g.chr("@109", "@class36");
        g.chr("@110", "@class37");
        g.chr("@111", "@class38");
        g.chr("@112", "@class39");
        g.chr("@116", "@class40");
        g.chr("@124", "@class41");
        g.chr("@125", "@class42");
        g.chr("@137", "@class43");
        g.chr("@14", "@class3");
        g.chr("@140", "@class44");
        g.chr("@142", "@class45");
        g.chr("@144", "@class46");
        g.chr("@148", "@class47");
        g.chr("@149", "@class48");
        g.chr("@150", "@class49");
        g.chr("@155", "@class50");
        g.chr("@156", "@class51");
        g.chr("@157", "@class52");
        g.chr("@16", "@class4");
        g.chr("@162", "@class53");
        g.chr("@163", "@class54");
        g.chr("@164", "@class55");
        g.chr("@167", "@class56");
        g.chr("@174", "@class57");
        g.chr("@176", "@class58");
        g.chr("@177", "@class59");
        g.chr("@179", "@class60");
        g.chr("@18", "@class5");
        g.chr("@180", "@class61");
        g.chr("@182", "@class62");
        g.chr("@183", "@class63");
        g.chr("@185", "@class64");
        g.chr("@187", "@class65");
        g.chr("@188", "@class66");
        g.chr("@19", "@class6");
        g.chr("@190", "@class67");
        g.chr("@191", "@class68");
        g.chr("@192", "@class69");
        g.chr("@194", "@class70");
        g.chr("@195", "@class71");
        g.chr("@197", "@class72");
        g.chr("@199", "@class73");
        g.chr("@200", "@class78");
        g.chr("@201", "@class84");
        g.chr("@203", "@class85");
        g.chr("@204", "@class88");
        g.chr("@205", "@class91");
        g.chr("@206", "@class92");
        g.chr("@212", "@class99");
        g.chr("@215", "@class100");
        g.chr("@217", "@class104");
        g.chr("@219", "@class107");
        g.chr("@22", "@class7");
        g.chr("@223", "@class109");
        g.chr("@23", "@class8");
        g.chr("@4", "@class0");
        g.chr("@40", "@class9");
        g.chr("@41", "@class10");
        g.chr("@42", "@class11");
        g.chr("@47", "@class12");
        g.chr("@48", "@class13");
        g.chr("@49", "@class14");
        g.chr("@51", "@class15");
        g.chr("@53", "@class16");
        g.chr("@54", "@class17");
        g.chr("@63", "@class18");
        g.chr("@65", "@class19");
        g.chr("@69", "@class20");
        g.chr("@71", "@class21");
        g.chr("@74", "@class22");
        g.chr("@77", "@class23");
        g.chr("@89", "@class24");
        g.chr("@9", "@class1");
        g.chr("@90", "@class25");
        g.chr("@91", "@class26");
        g.chr("@99", "@class27");
        g.chr("NEWLINE", "@class112");
        g.chr("NON_NEWLINE", "@class116");
        g.chr("NON_QUOTE", "@class96");
        g.chr("QUOTE", "@class93");
        g.chr("SP", "@class123");
        g.not("@114", "ID");
        g.not("@170", "ID");
        g.not("@172", "ID");
        g.not("@210", "@209");
        g.not("@222", "@221");
        g.repeat("@118", "@117", 0, 1);
        g.repeat("@131", "@130", 0, 1);
        g.repeat("@134", "@133", 0, 1);
        g.repeat("@146", "@145", 0, 2147483647);
        g.repeat("@152", "@151", 0, 2147483647);
        g.repeat("@154", "@153", 0, 1);
        g.repeat("@159", "@158", 0, 2147483647);
        g.repeat("@166", "@165", 1, 2147483647);
        g.repeat("@178", "@177", 0, 1);
        g.repeat("@181", "@180", 0, 1);
        g.repeat("@184", "@183", 0, 1);
        g.repeat("@186", "@185", 0, 1);
        g.repeat("@189", "@188", 0, 1);
        g.repeat("@193", "@192", 0, 1);
        g.repeat("@202", "@201", 0, 2147483647);
        g.repeat("@207", "@206", 0, 2147483647);
        g.repeat("@218", "@217", 0, 2147483647);
        g.repeat("@225", "@224", 0, 2147483647);
        g.repeat("@3", "annotation", 0, 2147483647);
        g.repeat("@68", "@67", 0, 1);
        g.repeat("DIGITS", "@203", 1, 2147483647);
        g.repeat("EXPONENT_OPT", "EXPONENT", 0, 1);
        g.repeat("NON_NEWLINES", "NON_NEWLINE", 0, 2147483647);
        g.repeat("NON_QUOTES", "NON_QUOTE", 0, 2147483647);
        g.repeat("NON_TRIPLE_QUOTES", "NON_TRIPLE_QUOTE", 0, 2147483647);
        g.repeat("WS", "@213", 0, 2147483647);
        g.repeat("arguments", "@160", 0, 1);
        g.repeat("design_members", "design_member", 0, 2147483647);
        g.repeat("dimensions", "@161", 0, 2147483647);
        g.repeat("elif_cases_opt", "elif_case", 0, 2147483647);
        g.repeat("else_case_opt", "else_case", 0, 1);
        g.repeat("enum_constants", "enum_constant", 0, 2147483647);
        g.repeat("module_members", "module_member", 0, 2147483647);
        g.repeat("p1_operations", "p1_operation", 0, 2147483647);
        g.repeat("p2_operations", "p2_operation", 0, 2147483647);
        g.repeat("p3_operations", "p3_operation", 0, 2147483647);
        g.repeat("p4_operations", "p4_operation", 0, 2147483647);
        g.repeat("p5_operations", "p5_operation", 0, 2147483647);
        g.repeat("p6_operations", "p6_operation", 0, 2147483647);
        g.repeat("p7_operations", "p7_operation", 0, 2147483647);
        g.repeat("statements", "statement", 0, 2147483647);
        g.repeat("trycatch_handlers", "trycatch_handler", 0, 2147483647);
        g.sequence("@117", "WS", "@116", "WS", "arguments");
        g.sequence("@130", "@129", "SP");
        g.sequence("@133", "@132", "SP");
        g.sequence("@145", "@144", "name_id");
        g.sequence("@147", "name_id", "@146");
        g.sequence("@151", "WS", "@150", "WS", "parameter");
        g.sequence("@153", "parameter", "@152");
        g.sequence("@158", "WS", "@157", "WS", "WS", "argument");
        g.sequence("@160", "argument", "@159", "WS");
        g.sequence("@161", "dimension", "WS");
        g.sequence("@165", "name_id", "@164");
        g.sequence("@211", "@208", "@210");
        g.sequence("@224", "@222", "@223");
        g.sequence("@67", "@66", "SP");
        g.sequence("EXPONENT", "@204", "@205", "@207");
        g.sequence("ID", "@200", "@202");
        g.sequence("MULTI_LINE_COMMENT", "@220", "@225", "@226", "WS");
        g.sequence("SEMICOLON", "@199", "WS");
        g.sequence("SINGLE_LINE_COMMENT", "@216", "@218", "@219");
        g.sequence("STRING_LITERAL_STYLE1", "QUOTE", "NON_QUOTES", "QUOTE");
        g.sequence("STRING_LITERAL_STYLE2", "TRIPLE_QUOTE", "NON_TRIPLE_QUOTES", "TRIPLE_QUOTE");
        g.sequence("add_operation", "@102", "WS", "p6_operand");
        g.sequence("and_operation", "@89", "WS", "p3_operand");
        g.sequence("annotation", "PS", "@4", "WS", "annotation_type", "WS");
        g.sequence("annotation_definition", "PS", "annotation_list", "WS", "@5", "SP", "WS", "name", "WS", "SEMICOLON", "WS");
        g.sequence("annotation_list", "PS", "@3");
        g.sequence("annotation_type", "type");
        g.sequence("argument", "expression");
        g.sequence("as_operation", "@84", "SP", "WS", "type", "WS");
        g.sequence("assert_statement", "PS", "@33", "SP", "WS", "condition", "WS", "assertion_echo_opt", "WS", "SEMICOLON");
        g.sequence("assertion_echo", "@34", "SP", "WS", "expression", "WS");
        g.sequence("assume_statement", "PS", "@35", "SP", "WS", "condition", "WS", "assumption_echo_opt", "WS", "SEMICOLON");
        g.sequence("assumption_echo", "@36", "SP", "WS", "expression", "WS");
        g.sequence("boolean_datum", "boolean_value");
        g.sequence("break_statement", "PS", "@43", "WS", "SEMICOLON");
        g.sequence("byte_datum", "byte_value");
        g.sequence("byte_value", "@178", "DIGITS", "@179", "WS");
        g.sequence("call_method_expression", "PS", "@131", "WS", "instance_member_access", "arguments", "WS");
        g.sequence("call_static_method_expression", "PS", "@134", "WS", "static_member_access", "arguments", "WS");
        g.sequence("char_datum", "char_value");
        g.sequence("class_datum", "class_value", "WS");
        g.sequence("class_value", "@195", "WS", "@196", "SP", "WS", "type", "WS", "@197", "WS");
        g.sequence("concat_operation", "@101", "WS", "p5_operand");
        g.sequence("condition", "expression");
        g.sequence("conditional_case", "PS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("continue_statement", "PS", "@44", "WS", "SEMICOLON");
        g.sequence("create_expression", "PS", "@143", "SP", "WS", "type", "WS");
        g.sequence("debug_statement", "PS", "@32", "WS", "SEMICOLON");
        g.sequence("delegate_expression", "PS", "@119", "SP", "WS", "static_member_access", "WS");
        g.sequence("design_definition", "PS", "annotation_list", "WS", "@8", "SP", "WS", "name", "WS", "design_extends_opt", "WS", "@9", "WS", "design_members", "@10", "WS");
        g.sequence("design_extends", "@11", "SP", "WS", "extends_list");
        g.sequence("dimension", "@162", "WS", "@163");
        g.sequence("dispatch_expression", "PS", "@127", "SP", "WS", "name", "WS", "arguments", "WS");
        g.sequence("divide_operation", "@104", "WS", "p7_operand");
        g.sequence("do_statement", "PS", "@58", "WS", "sequence_statement", "WS", "@59", "WS");
        g.sequence("do_until", "@60", "WS", "paren_condition", "WS", "do_until_trigger");
        g.sequence("do_while", "@61", "WS", "paren_condition", "WS", "do_while_trigger");
        g.sequence("double_datum", "double_value");
        g.sequence("double_value", "@193", "DIGITS", "@194", "DIGITS", "EXPONENT_OPT", "WS");
        g.sequence("elif_case", "@26", "WS", "conditional_case", "WS");
        g.sequence("else_case", "@27", "WS", "sequence_statement", "WS");
        g.sequence("enum_constant", "PS", "annotation_list", "WS", "@20", "SP", "WS", "name", "WS", "SEMICOLON", "WS");
        g.sequence("enum_definition", "PS", "annotation_list", "WS", "@17", "SP", "WS", "name", "WS", "@18", "WS", "enum_constants", "WS", "@19", "WS");
        g.sequence("enum_value", "@198", "SP", "WS", "static_member_access", "WS");
        g.sequence("equals_operation", "@95", "WS", "p4_operand");
        g.sequence("exception_definition", "PS", "annotation_list", "WS", "@6", "SP", "WS", "name", "WS", "@7", "SP", "WS", "type", "WS", "SEMICOLON", "WS");
        g.sequence("expression_statement", "PS", "expression", "SEMICOLON");
        g.sequence("extends_list_cons", "type", "WS", "@12", "WS", "extends_list");
        g.sequence("extends_list_end", "type");
        g.sequence("false", "@171", "@172", "WS");
        g.sequence("filepath", "string_value");
        g.sequence("float_datum", "float_value");
        g.sequence("float_value", "@189", "DIGITS", "@190", "DIGITS", "EXPONENT_OPT", "@191", "WS");
        g.sequence("for_body", "sequence_statement");
        g.sequence("for_condition", "expression", "WS");
        g.sequence("for_controller", "@47", "WS", "for_init", "WS", "SEMICOLON", "WS", "for_condition", "WS", "SEMICOLON", "WS", "for_modifier", "WS", "@48", "WS");
        g.sequence("for_init", "variable", "WS", "@49", "WS", "expression", "WS");
        g.sequence("for_modifier", "expression");
        g.sequence("for_statement", "PS", "@46", "WS", "for_controller", "WS", "for_body", "WS");
        g.sequence("foreach_body", "sequence_statement");
        g.sequence("foreach_controller", "@51", "WS", "foreach_vardec", "@52", "WS", "foreach_iterator", "@53");
        g.sequence("foreach_iterator", "expression", "WS");
        g.sequence("foreach_statement", "PS", "@50", "WS", "foreach_controller", "WS", "foreach_body", "WS");
        g.sequence("foreach_vardec", "variable", "WS", "@54", "WS", "type", "WS");
        g.sequence("forever_statement", "PS", "@55", "WS", "sequence_statement", "WS");
        g.sequence("formals", "PS", "@149", "WS", "@154", "WS", "@155", "WS");
        g.sequence("funcall_expression", "PS", "@115", "SP", "WS", "expression", "@118", "WS");
        g.sequence("function_definition", "PS", "annotation_list", "WS", "@21", "SP", "WS", "signature", "WS", "sequence_statement", "WS");
        g.sequence("get_field_expression", "PS", "@135", "SP", "WS", "instance_member_access", "WS");
        g.sequence("get_static_expression", "PS", "@138", "SP", "WS", "static_member_access", "WS");
        g.sequence("getter_statement", "PS", "@73", "SP", "WS", "variable", "WS", "@74", "WS", "name", "WS", "@75", "WS", "static_member_access", "WS", "SEMICOLON");
        g.sequence("goto_statement", "PS", "@30", "SP", "WS", "label", "WS", "SEMICOLON");
        g.sequence("greater_operation", "@99", "WS", "p4_operand");
        g.sequence("greater_or_equals_operation", "@97", "WS", "p4_operand");
        g.sequence("identity_equals_operation", "@93", "WS", "p4_operand");
        g.sequence("identity_not_equals_operation", "@94", "WS", "p4_operand");
        g.sequence("if_case", "@25", "WS", "conditional_case", "WS");
        g.sequence("if_statement", "PS", "if_case", "elif_cases_opt", "WS", "else_case_opt", "WS");
        g.sequence("implies_operation", "@92", "WS", "p3_operand");
        g.sequence("import_directive", "PS", "@2", "SP", "WS", "type", "WS", "SEMICOLON");
        g.sequence("instance_member_access", "expression", "WS", "@167", "WS", "name", "WS");
        g.sequence("instanceof_expression", "PS", "@141", "SP", "WS", "expression", "WS", "@142", "WS", "type", "WS");
        g.sequence("int_datum", "int_value");
        g.sequence("int_value", "@184", "DIGITS", "WS");
        g.sequence("is_operation", "@85", "SP", "WS", "type", "WS");
        g.sequence("keyword_expression", "@109", "WS", "keyword_expression_body", "WS", "@110", "WS");
        g.sequence("label", "ID", "WS");
        g.sequence("less_operation", "@100", "WS", "p4_operand");
        g.sequence("less_or_equals_operation", "@98", "WS", "p4_operand");
        g.sequence("let_statement", "PS", "@68", "WS", "variable", "WS", "@69", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("list_expression", "PS", "@124", "WS", "arguments", "WS", "@125", "WS");
        g.sequence("literal_char_value", "@173", "@174", "@175", "WS");
        g.sequence("locals_expression", "PS", "@120", "WS");
        g.sequence("long_datum", "long_value");
        g.sequence("long_value", "@186", "DIGITS", "@187", "WS");
        g.sequence("marker_statement", "PS", "@31", "SP", "WS", "label", "WS", "SEMICOLON");
        g.sequence("method", "PS", "annotation_list", "WS", "@15", "SP", "WS", "name", "WS", "formals", "WS", "@16", "WS", "type", "WS", "SEMICOLON", "WS");
        g.sequence("method_statement", "PS", "@76", "SP", "WS", "variable", "WS", "@77", "WS", "name", "WS", "@78", "WS", "static_member_access", "WS", "SEMICOLON");
        g.sequence("module", "WS", "module_members", "END");
        g.sequence("module_directive", "PS", "annotation_list", "WS", "@0", "SP", "WS", "module_name", "WS", "@1", "WS", "namespace", "WS", "SEMICOLON");
        g.sequence("modulo_operation", "@105", "WS", "p7_operand");
        g.sequence("multiply_operation", "@106", "WS", "p7_operand");
        g.sequence("name", "name_id", "WS");
        g.sequence("name_id", "ID");
        g.sequence("name_of_named_module", "name");
        g.sequence("namespace_explicit", "PS", "@147");
        g.sequence("negate_operation", "@107", "WS", "p8", "WS");
        g.sequence("nested_expression", "@111", "WS", "expression", "WS", "@112", "WS");
        g.sequence("new_expression", "PS", "@128", "SP", "WS", "type", "WS", "arguments", "WS");
        g.sequence("nop_statement", "PS", "@24", "SEMICOLON");
        g.sequence("not_equals_operation", "@96", "WS", "p4_operand");
        g.sequence("not_operation", "@108", "WS", "p8", "WS");
        g.sequence("null_coalescing_operation", "@86", "WS", "p2_operand");
        g.sequence("null_datum", "@113", "@114", "WS");
        g.sequence("numeric_char_value", "DIGITS", "@176", "WS");
        g.sequence("or_operation", "@90", "WS", "p3_operand");
        g.sequence("p1", "p1_operand", "p1_operations");
        g.sequence("p1_operand", "p2");
        g.sequence("p2", "p2_operand", "p2_operations");
        g.sequence("p2_operand", "p3");
        g.sequence("p2_operation", "null_coalescing_operation");
        g.sequence("p3", "p3_operand", "p3_operations");
        g.sequence("p3_operand", "p4");
        g.sequence("p4", "p4_operand", "p4_operations");
        g.sequence("p4_operand", "p5");
        g.sequence("p5", "p5_operand", "p5_operations");
        g.sequence("p5_operand", "p6");
        g.sequence("p5_operation", "concat_operation");
        g.sequence("p6", "p6_operand", "p6_operations");
        g.sequence("p6_operand", "p7");
        g.sequence("p7", "p7_operand", "p7_operations");
        g.sequence("p7_operand", "p8");
        g.sequence("parameter", "PS", "variable", "WS", "@156", "WS", "type", "WS");
        g.sequence("paren_condition", "nested_expression");
        g.sequence("paren_expression", "nested_expression");
        g.sequence("progn_expression", "PS", "@126", "SP", "WS", "arguments", "WS");
        g.sequence("property", "PS", "annotation_list", "WS", "@13", "SP", "WS", "name", "WS", "@14", "WS", "type", "WS", "SEMICOLON", "WS");
        g.sequence("recur_statement", "PS", "@79", "WS", "arguments", "WS", "SEMICOLON");
        g.sequence("redo_statement", "PS", "@45", "WS", "SEMICOLON");
        g.sequence("return_type", "type");
        g.sequence("return_value_statement", "PS", "@81", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("return_void_statement", "PS", "@80", "WS", "SEMICOLON");
        g.sequence("sequence_statement", "PS", "@22", "WS", "statements", "WS", "@23", "WS");
        g.sequence("set_field_expression", "PS", "@136", "SP", "WS", "instance_member_access", "@137", "WS", "expression", "WS");
        g.sequence("set_static_expression", "PS", "@139", "SP", "WS", "static_member_access", "WS", "@140", "WS", "expression", "WS");
        g.sequence("setter_statement", "PS", "@70", "SP", "WS", "variable", "WS", "@71", "WS", "name", "WS", "@72", "WS", "static_member_access", "WS", "SEMICOLON");
        g.sequence("short_circuit_and_operation", "@87", "WS", "p3_operand");
        g.sequence("short_circuit_or_operation", "@88", "WS", "p3_operand");
        g.sequence("short_datum", "short_value");
        g.sequence("short_value", "@181", "DIGITS", "@182", "WS");
        g.sequence("signature", "name", "WS", "formals", "WS", "@148", "WS", "return_type", "WS");
        g.sequence("simple_name", "name_id");
        g.sequence("static_member_access", "static_owner", "WS", "name", "WS");
        g.sequence("static_owner", "static_owner_explicit");
        g.sequence("static_owner_explicit", "type", "WS", "@168");
        g.sequence("string_datum", "string_value");
        g.sequence("string_value", "STRING_LITERAL", "WS");
        g.sequence("subtract_operation", "@103", "WS", "p6_operand");
        g.sequence("ternary_conditional_expression", "PS", "@121", "SP", "WS", "condition", "WS", "@122", "SP", "WS", "expression", "@123", "SP", "WS", "expression", "WS");
        g.sequence("throw_statement", "PS", "@37", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("true", "@169", "@170", "WS");
        g.sequence("try_catch_statement", "PS", "@38", "WS", "trycatch_body", "WS", "trycatch_handlers", "WS");
        g.sequence("trycatch_body", "sequence_statement");
        g.sequence("trycatch_handler", "PS", "@39", "WS", "trycatch_vardec", "WS", "sequence_statement", "WS");
        g.sequence("trycatch_vardec", "@40", "WS", "variable", "WS", "@41", "WS", "type", "WS", "@42");
        g.sequence("type", "type_name", "WS", "dimensions", "WS");
        g.sequence("type_name", "type_namespace", "simple_name", "WS");
        g.sequence("type_namespace_explicit", "PS", "@166");
        g.sequence("until_statement", "PS", "@56", "WS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("val_statement", "PS", "@64", "SP", "WS", "variable", "WS", "@65", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("var_statement", "PS", "@62", "SP", "WS", "variable", "WS", "@63", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("variable", "ID", "WS");
        g.sequence("variable_datum", "variable");
        g.sequence("when_statement", "PS", "@28", "SP", "WS", "paren_condition", "WS", "@29", "WS", "statement", "WS");
        g.sequence("while_statement", "PS", "@57", "WS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("xor_operation", "@91", "WS", "p3_operand");
        g.sequence("yield_value_statement", "PS", "@83", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("yield_void_statement", "PS", "@82", "WS", "SEMICOLON");
        g.str("@0", "module");
        g.str("@1", "in");
        g.str("@101", "..");
        g.str("@11", "extends");
        g.str("@113", "null");
        g.str("@115", "funcall");
        g.str("@119", "delegate");
        g.str("@12", "&");
        g.str("@120", "locals");
        g.str("@121", "if");
        g.str("@122", "then");
        g.str("@123", "else");
        g.str("@126", "progn");
        g.str("@127", "dispatch");
        g.str("@128", "new");
        g.str("@129", "call");
        g.str("@13", "data");
        g.str("@132", "call");
        g.str("@135", "field");
        g.str("@136", "field");
        g.str("@138", "field");
        g.str("@139", "field");
        g.str("@141", "instanceof");
        g.str("@143", "create");
        g.str("@15", "method");
        g.str("@168", "::");
        g.str("@169", "true");
        g.str("@17", "enum");
        g.str("@171", "false");
        g.str("@173", "'");
        g.str("@175", "'");
        g.str("@196", "class");
        g.str("@198", "enum");
        g.str("@2", "import");
        g.str("@20", "constant");
        g.str("@208", "'");
        g.str("@209", "''");
        g.str("@21", "defun");
        g.str("@214", "//");
        g.str("@220", "/*");
        g.str("@221", "*/");
        g.str("@226", "*/");
        g.str("@24", "nop");
        g.str("@25", "if");
        g.str("@26", "elif");
        g.str("@27", "else");
        g.str("@28", "when");
        g.str("@29", "then");
        g.str("@30", "goto");
        g.str("@31", "marker");
        g.str("@32", "debug");
        g.str("@33", "assert");
        g.str("@34", "echo");
        g.str("@35", "assume");
        g.str("@36", "echo");
        g.str("@37", "throw");
        g.str("@38", "try");
        g.str("@39", "catch");
        g.str("@43", "break");
        g.str("@44", "continue");
        g.str("@45", "redo");
        g.str("@46", "for");
        g.str("@5", "annotation");
        g.str("@50", "foreach");
        g.str("@52", "in");
        g.str("@55", "forever");
        g.str("@56", "until");
        g.str("@57", "while");
        g.str("@58", "do");
        g.str("@6", "exception");
        g.str("@60", "until");
        g.str("@61", "while");
        g.str("@62", "var");
        g.str("@64", "val");
        g.str("@66", "let");
        g.str("@7", "extends");
        g.str("@70", "setter");
        g.str("@72", "=>");
        g.str("@73", "getter");
        g.str("@75", "=>");
        g.str("@76", "method");
        g.str("@78", "=>");
        g.str("@79", "recur");
        g.str("@8", "design");
        g.str("@80", "return");
        g.str("@81", "return");
        g.str("@82", "yield");
        g.str("@83", "yield");
        g.str("@84", "as");
        g.str("@85", "is");
        g.str("@86", "??");
        g.str("@87", "&&");
        g.str("@88", "||");
        g.str("@92", "->");
        g.str("@93", "===");
        g.str("@94", "!==");
        g.str("@95", "==");
        g.str("@96", "!=");
        g.str("@97", ">=");
        g.str("@98", "<=");
        g.str("PS", "");
        g.str("TRIPLE_QUOTE", "'''");
        g.str("assertion_echo_empty", "");
        g.str("assumption_echo_empty", "");
        g.str("design_extends_empty", "");
        g.str("do_until_trigger", "");
        g.str("do_while_trigger", "");
        g.str("name_of_anonymous_module", "*");
        g.str("namespace_implicit", "");
        g.str("static_owner_implicit", "");
        g.str("type_namespace_implicit", "");

        // Specify which rule is the root of the grammar.
        g.setRoot("module");

        // Specify the number of tracing records to store concurrently.
        g.setTraceCount(1024);

        // Perform the actual construction of the grammar object.
        return g.build();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public ParserOutput parse(final char[] input)
    {
        return grammar.newParser().parse(input);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public ParserOutput parse(final String input)
    {
        return parse(input.toCharArray());
    }
}
