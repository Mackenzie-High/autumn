package high.mackenzie.autumn.lang.compiler.parser;

import high.mackenzie.snowflake.Grammar;
import high.mackenzie.snowflake.GrammarBuilder;
import high.mackenzie.snowflake.IParser;
import high.mackenzie.snowflake.ParserOutput;


/**
 * This class was auto-generated using the Snowflake parser-generator.
 *
 * <p>Generated On: Sun Oct 12 03:19:16 EDT 2014</p>
 */
public final class Parser implements IParser
{

    private static final Grammar grammar = grammar();


    /**
     * This method constructs the grammar object.
     */
    private static Grammar grammar()
    {
        final GrammarBuilder g = new GrammarBuilder();

        // Character Classes
        g.range("@class0", (char) 58, (char) 58);
        g.range("@class1", (char) 40, (char) 40);
        g.range("@class2", (char) 44, (char) 44);
        g.range("@class3", (char) 41, (char) 41);
        g.range("@class4", (char) 123, (char) 123);
        g.range("@class5", (char) 125, (char) 125);
        g.range("@class6", (char) 40, (char) 40);
        g.range("@class7", (char) 58, (char) 58);
        g.range("@class8", (char) 41, (char) 41);
        g.range("@class9", (char) 40, (char) 40);
        g.range("@class10", (char) 41, (char) 41);
        g.range("@class11", (char) 61, (char) 61);
        g.range("@class12", (char) 40, (char) 40);
        g.range("@class13", (char) 41, (char) 41);
        g.range("@class14", (char) 58, (char) 58);
        g.range("@class15", (char) 61, (char) 61);
        g.range("@class16", (char) 61, (char) 61);
        g.range("@class17", (char) 61, (char) 61);
        g.range("@class18", (char) 58, (char) 58);
        g.range("@class19", (char) 58, (char) 58);
        g.range("@class20", (char) 38, (char) 38);
        g.range("@class21", (char) 124, (char) 124);
        g.range("@class22", (char) 94, (char) 94);
        g.range("@class23", (char) 62, (char) 62);
        g.range("@class24", (char) 60, (char) 60);
        g.range("@class25", (char) 43, (char) 43);
        g.range("@class26", (char) 45, (char) 45);
        g.range("@class27", (char) 47, (char) 47);
        g.range("@class28", (char) 37, (char) 37);
        g.range("@class29", (char) 42, (char) 42);
        g.range("@class30", (char) 45, (char) 45);
        g.range("@class31", (char) 33, (char) 33);
        g.range("@class32", (char) 40, (char) 40);
        g.range("@class33", (char) 41, (char) 41);
        g.range("@class34", (char) 40, (char) 40);
        g.range("@class35", (char) 41, (char) 41);
        g.range("@class36", (char) 91, (char) 91);
        g.range("@class37", (char) 93, (char) 93);
        g.range("@class38", (char) 61, (char) 61);
        g.range("@class39", (char) 61, (char) 61);
        g.range("@class40", (char) 58, (char) 58);
        g.range("@class41", (char) 10, (char) 10);
        g.range("@class42", (char) 13, (char) 13);
        g.combine("@class43", "@class41", "@class42");
        g.negate("@class44", "@class43");
        g.range("@class45", (char) 64, (char) 64);
        g.range("@class46", (char) 46, (char) 46);
        g.range("@class47", (char) 58, (char) 58);
        g.range("@class48", (char) 40, (char) 40);
        g.range("@class49", (char) 44, (char) 44);
        g.range("@class50", (char) 41, (char) 41);
        g.range("@class51", (char) 58, (char) 58);
        g.range("@class52", (char) 40, (char) 40);
        g.range("@class53", (char) 44, (char) 44);
        g.range("@class54", (char) 41, (char) 41);
        g.range("@class55", (char) 58, (char) 58);
        g.range("@class56", (char) 44, (char) 44);
        g.range("@class57", (char) 91, (char) 91);
        g.range("@class58", (char) 93, (char) 93);
        g.range("@class59", (char) 46, (char) 46);
        g.range("@class60", (char) 46, (char) 46);
        g.range("@class61", (char) 0, (char) 65535);
        g.range("@class62", (char) 67, (char) 67);
        g.range("@class63", (char) 45, (char) 45);
        g.range("@class64", (char) 66, (char) 66);
        g.range("@class65", (char) 45, (char) 45);
        g.range("@class66", (char) 83, (char) 83);
        g.range("@class67", (char) 45, (char) 45);
        g.range("@class68", (char) 45, (char) 45);
        g.range("@class69", (char) 76, (char) 76);
        g.range("@class70", (char) 45, (char) 45);
        g.range("@class71", (char) 46, (char) 46);
        g.range("@class72", (char) 70, (char) 70);
        g.range("@class73", (char) 45, (char) 45);
        g.range("@class74", (char) 46, (char) 46);
        g.range("@class75", (char) 64, (char) 64);
        g.range("@class76", (char) 40, (char) 40);
        g.range("@class77", (char) 41, (char) 41);
        g.range("@class78", (char) 59, (char) 59);
        g.range("@class79", (char) 65, (char) 90);
        g.range("@class80", (char) 97, (char) 122);
        g.range("@class81", (char) 95, (char) 95);
        g.range("@class82", (char) 36, (char) 36);
        g.combine("@class83", "@class79", "@class80", "@class81", "@class82");
        g.range("@class84", (char) 65, (char) 90);
        g.range("@class85", (char) 97, (char) 122);
        g.range("@class86", (char) 95, (char) 95);
        g.range("@class87", (char) 36, (char) 36);
        g.range("@class88", (char) 48, (char) 57);
        g.combine("@class89", "@class84", "@class85", "@class86", "@class87", "@class88");
        g.range("@class90", (char) 48, (char) 57);
        g.range("@class91", (char) 101, (char) 101);
        g.range("@class92", (char) 69, (char) 69);
        g.combine("@class93", "@class91", "@class92");
        g.range("@class94", (char) 45, (char) 45);
        g.range("@class95", (char) 48, (char) 57);
        g.combine("@class96", "@class94", "@class95");
        g.range("@class97", (char) 48, (char) 57);
        g.range("@class98", (char) 34, (char) 34);
        g.range("@class99", (char) 34, (char) 34);
        g.combine("@class100", "@class99");
        g.negate("@class101", "@class100");
        g.range("@class102", (char) 39, (char) 39);
        g.combine("@class103", "@class102");
        g.negate("@class104", "@class103");
        g.range("@class105", (char) 92, (char) 92);
        g.range("@class106", (char) 116, (char) 116);
        g.range("@class107", (char) 98, (char) 98);
        g.range("@class108", (char) 110, (char) 110);
        g.range("@class109", (char) 114, (char) 114);
        g.range("@class110", (char) 102, (char) 102);
        g.range("@class111", (char) 34, (char) 34);
        g.range("@class112", (char) 92, (char) 92);
        g.range("@class113", (char) 35, (char) 35);
        g.range("@class114", (char) 10, (char) 10);
        g.range("@class115", (char) 13, (char) 13);
        g.combine("@class116", "@class114", "@class115");
        g.negate("@class117", "@class116");
        g.range("@class118", (char) 10, (char) 10);
        g.range("@class119", (char) 13, (char) 13);
        g.combine("@class120", "@class118", "@class119");
        g.range("@class121", (char) 0, (char) 65535);
        g.combine("@class122", "@class121");
        g.range("@class123", (char) 10, (char) 10);
        g.range("@class124", (char) 13, (char) 13);
        g.combine("@class125", "@class123", "@class124");
        g.range("@class126", (char) 10, (char) 10);
        g.range("@class127", (char) 13, (char) 13);
        g.combine("@class128", "@class126", "@class127");
        g.negate("@class129", "@class128");
        g.range("@class130", (char) 32, (char) 32);
        g.range("@class131", (char) 9, (char) 9);
        g.range("@class132", (char) 10, (char) 10);
        g.range("@class133", (char) 11, (char) 11);
        g.range("@class134", (char) 12, (char) 12);
        g.range("@class135", (char) 13, (char) 13);
        g.combine("@class136", "@class130", "@class131", "@class132", "@class133", "@class134", "@class135");

        // Grammar Rules
        g.choose("@225", "SP", "COMMENT");
        g.choose("@228", "@226", "@227");
        g.choose("@57", "do_until", "do_while");
        g.choose("COMMENT", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT");
        g.choose("ESCAPE_CHAR", "@216", "@217", "@218", "@219", "@220", "@221", "@222", "@223", "@224");
        g.choose("NON_QUOTE", "ESCAPE_SEQUENCE", "@209");
        g.choose("NON_TRIPLE_QUOTE", "ESCAPE_SEQUENCE", "@213", "@214");
        g.choose("STRING_LITERAL", "STRING_LITERAL_STYLE1", "STRING_LITERAL_STYLE2");
        g.choose("assertion_echo_opt", "assertion_echo", "assertion_echo_empty");
        g.choose("assumption_echo_opt", "assumption_echo", "assumption_echo_empty");
        g.choose("boolean_value", "true", "false");
        g.choose("char_value", "literal_char_value", "numeric_char_value");
        g.choose("datum", "string_datum", "boolean_datum", "char_datum", "float_datum", "double_datum", "long_datum", "short_datum", "byte_datum", "int_datum", "null_datum", "class_datum", "variable_datum");
        g.choose("definition", "function_definition", "exception_definition", "design_definition", "tuple_definition", "struct_definition", "functor_definition", "enum_definition", "annotation_definition");
        g.choose("expression", "p1", "keyword_expression", "nested_expression");
        g.choose("keyword_expression_body", "locals_expression", "dispatch_expression", "new_expression", "call_static_method_expression", "call_method_expression", "set_static_expression", "get_static_expression", "set_field_expression", "get_field_expression", "instanceof_expression", "ternary_conditional_expression", "progn_expression");
        g.choose("module_member", "module_directive", "import_directive", "definition");
        g.choose("module_name", "name_of_anonymous_module", "name_of_named_module");
        g.choose("namespace", "namespace_explicit", "namespace_implicit");
        g.choose("p1_operation", "as_operation", "is_operation");
        g.choose("p3_operation", "and_operation", "or_operation", "xor_operation", "implies_operation");
        g.choose("p4_operation", "identity_equals_operation", "identity_not_equals_operation", "equals_operation", "not_equals_operation", "greater_or_equals_operation", "less_or_equals_operation", "greater_operation", "less_operation");
        g.choose("p6_operation", "add_operation", "subtract_operation");
        g.choose("p7_operation", "divide_operation", "modulo_operation", "multiply_operation");
        g.choose("p8", "datum", "negate_operation", "not_operation", "keyword_expression", "nested_expression", "list_expression");
        g.choose("statement", "sequence_statement", "if_statement", "when_statement", "goto_statement", "marker_statement", "do_statement", "break_statement", "continue_statement", "redo_statement", "foreach_statement", "for_statement", "until_statement", "while_statement", "forever_statement", "assert_statement", "assume_statement", "throw_statement", "try_catch_statement", "var_statement", "val_statement", "let_statement", "lambda_statement", "delegate_statement", "nop_statement", "debug_statement", "return_value_statement", "return_void_statement", "recur_statement", "yield_value_statement", "yield_void_statement", "expression_statement");
        g.choose("string_value", "verbatim_string_value", "regular_string_value");
        g.choose("supers_list", "supers_list_cons", "supers_list_end");
        g.choose("type_namespace", "type_namespace_explicit", "type_namespace_implicit");
        g.chr("@10", "@class0");
        g.chr("@100", "@class30");
        g.chr("@101", "@class31");
        g.chr("@102", "@class32");
        g.chr("@103", "@class33");
        g.chr("@104", "@class34");
        g.chr("@105", "@class35");
        g.chr("@112", "@class36");
        g.chr("@113", "@class37");
        g.chr("@12", "@class1");
        g.chr("@125", "@class38");
        g.chr("@128", "@class39");
        g.chr("@13", "@class2");
        g.chr("@130", "@class40");
        g.chr("@133", "@class44");
        g.chr("@135", "@class45");
        g.chr("@136", "@class46");
        g.chr("@140", "@class47");
        g.chr("@143", "@class48");
        g.chr("@144", "@class49");
        g.chr("@149", "@class50");
        g.chr("@150", "@class51");
        g.chr("@151", "@class52");
        g.chr("@152", "@class53");
        g.chr("@157", "@class54");
        g.chr("@158", "@class55");
        g.chr("@159", "@class56");
        g.chr("@164", "@class57");
        g.chr("@165", "@class58");
        g.chr("@166", "@class59");
        g.chr("@169", "@class60");
        g.chr("@176", "@class61");
        g.chr("@178", "@class62");
        g.chr("@179", "@class63");
        g.chr("@18", "@class3");
        g.chr("@181", "@class64");
        g.chr("@182", "@class65");
        g.chr("@184", "@class66");
        g.chr("@185", "@class67");
        g.chr("@187", "@class68");
        g.chr("@189", "@class69");
        g.chr("@190", "@class70");
        g.chr("@192", "@class71");
        g.chr("@193", "@class72");
        g.chr("@194", "@class73");
        g.chr("@196", "@class74");
        g.chr("@197", "@class75");
        g.chr("@198", "@class76");
        g.chr("@20", "@class4");
        g.chr("@200", "@class77");
        g.chr("@201", "@class78");
        g.chr("@202", "@class83");
        g.chr("@203", "@class89");
        g.chr("@205", "@class93");
        g.chr("@206", "@class96");
        g.chr("@207", "@class97");
        g.chr("@209", "@class101");
        g.chr("@21", "@class5");
        g.chr("@214", "@class104");
        g.chr("@215", "@class105");
        g.chr("@216", "@class106");
        g.chr("@217", "@class107");
        g.chr("@218", "@class108");
        g.chr("@219", "@class109");
        g.chr("@220", "@class110");
        g.chr("@222", "@class111");
        g.chr("@223", "@class112");
        g.chr("@227", "@class113");
        g.chr("@229", "@class117");
        g.chr("@231", "@class120");
        g.chr("@235", "@class122");
        g.chr("@38", "@class6");
        g.chr("@39", "@class7");
        g.chr("@40", "@class8");
        g.chr("@45", "@class9");
        g.chr("@46", "@class10");
        g.chr("@47", "@class11");
        g.chr("@49", "@class12");
        g.chr("@51", "@class13");
        g.chr("@52", "@class14");
        g.chr("@61", "@class15");
        g.chr("@63", "@class16");
        g.chr("@67", "@class17");
        g.chr("@69", "@class18");
        g.chr("@72", "@class19");
        g.chr("@82", "@class20");
        g.chr("@83", "@class21");
        g.chr("@84", "@class22");
        g.chr("@92", "@class23");
        g.chr("@93", "@class24");
        g.chr("@95", "@class25");
        g.chr("@96", "@class26");
        g.chr("@97", "@class27");
        g.chr("@98", "@class28");
        g.chr("@99", "@class29");
        g.chr("DIGIT", "@class90");
        g.chr("NEWLINE", "@class125");
        g.chr("NON_NEWLINE", "@class129");
        g.chr("QUOTE", "@class98");
        g.chr("SP", "@class136");
        g.not("@107", "ID");
        g.not("@172", "ID");
        g.not("@174", "ID");
        g.not("@212", "@211");
        g.not("@234", "@233");
        g.repeat("@119", "@118", 0, 1);
        g.repeat("@122", "@121", 0, 1);
        g.repeat("@131", "api_comment_line", 0, 2147483647);
        g.repeat("@134", "annotation", 0, 2147483647);
        g.repeat("@138", "@137", 0, 2147483647);
        g.repeat("@146", "@145", 0, 2147483647);
        g.repeat("@148", "@147", 0, 1);
        g.repeat("@15", "@14", 0, 2147483647);
        g.repeat("@154", "@153", 0, 2147483647);
        g.repeat("@156", "@155", 0, 1);
        g.repeat("@161", "@160", 0, 2147483647);
        g.repeat("@168", "@167", 1, 2147483647);
        g.repeat("@17", "@16", 0, 1);
        g.repeat("@180", "@179", 0, 1);
        g.repeat("@183", "@182", 0, 1);
        g.repeat("@186", "@185", 0, 1);
        g.repeat("@188", "@187", 0, 1);
        g.repeat("@191", "@190", 0, 1);
        g.repeat("@195", "@194", 0, 1);
        g.repeat("@204", "@203", 0, 2147483647);
        g.repeat("@208", "@207", 0, 2147483647);
        g.repeat("@230", "@229", 0, 2147483647);
        g.repeat("@237", "@236", 0, 2147483647);
        g.repeat("@66", "@65", 0, 1);
        g.repeat("DIGITS", "DIGIT", 1, 2147483647);
        g.repeat("EXPONENT_OPT", "EXPONENT", 0, 1);
        g.repeat("NON_NEWLINES", "NON_NEWLINE", 0, 2147483647);
        g.repeat("NON_QUOTES", "NON_QUOTE", 0, 2147483647);
        g.repeat("NON_TRIPLE_QUOTES", "NON_TRIPLE_QUOTE", 0, 2147483647);
        g.repeat("WS", "@225", 0, 2147483647);
        g.repeat("api_comment_text", "@133", 0, 2147483647);
        g.repeat("arguments", "@162", 0, 1);
        g.repeat("dimensions", "@163", 0, 2147483647);
        g.repeat("elif_cases_opt", "elif_case", 0, 2147483647);
        g.repeat("else_case_opt", "else_case", 0, 1);
        g.repeat("module_members", "module_member", 0, 2147483647);
        g.repeat("p1_operations", "p1_operation", 0, 2147483647);
        g.repeat("p2_operations", "p2_operation", 0, 2147483647);
        g.repeat("p3_operations", "p3_operation", 0, 2147483647);
        g.repeat("p4_operations", "p4_operation", 0, 2147483647);
        g.repeat("p5_operations", "p5_operation", 0, 2147483647);
        g.repeat("p6_operations", "p6_operation", 0, 2147483647);
        g.repeat("p7_operations", "p7_operation", 0, 2147483647);
        g.repeat("statements", "statement", 0, 2147483647);
        g.repeat("supers_opt", "supers", 0, 1);
        g.repeat("trycatch_handlers", "trycatch_handler", 0, 2147483647);
        g.sequence("@118", "@117", "SP");
        g.sequence("@121", "@120", "SP");
        g.sequence("@137", "@136", "name_id");
        g.sequence("@139", "name_id", "@138");
        g.sequence("@14", "WS", "@13", "WS", "enum_constant");
        g.sequence("@145", "WS", "@144", "WS", "element");
        g.sequence("@147", "element", "@146");
        g.sequence("@153", "WS", "@152", "WS", "parameter");
        g.sequence("@155", "parameter", "@154");
        g.sequence("@16", "enum_constant", "@15");
        g.sequence("@160", "WS", "@159", "WS", "WS", "argument");
        g.sequence("@162", "argument", "@161", "WS");
        g.sequence("@163", "dimension", "WS");
        g.sequence("@167", "name_id", "@166");
        g.sequence("@213", "@210", "@212");
        g.sequence("@224", "DIGIT", "DIGIT", "DIGIT", "DIGIT", "DIGIT");
        g.sequence("@236", "@234", "@235");
        g.sequence("@65", "@64", "SP");
        g.sequence("ESCAPE_SEQUENCE", "@215", "ESCAPE_CHAR");
        g.sequence("EXPONENT", "@205", "@206", "@208");
        g.sequence("ID", "@202", "@204");
        g.sequence("MULTI_LINE_COMMENT", "@232", "@237", "@238", "WS");
        g.sequence("SEMICOLON", "@201", "WS");
        g.sequence("SINGLE_LINE_COMMENT", "@228", "@230", "@231");
        g.sequence("STRING_LITERAL_STYLE1", "QUOTE", "NON_QUOTES", "QUOTE");
        g.sequence("STRING_LITERAL_STYLE2", "TRIPLE_QUOTE", "NON_TRIPLE_QUOTES", "TRIPLE_QUOTE");
        g.sequence("add_operation", "@95", "WS", "p6_operand");
        g.sequence("and_operation", "@82", "WS", "p3_operand");
        g.sequence("annotation", "PS", "@135", "WS", "annotation_type", "WS");
        g.sequence("annotation_definition", "PS", "api_comment", "annotation_list", "WS", "@3", "SP", "WS", "name", "WS", "SEMICOLON", "WS");
        g.sequence("annotation_list", "PS", "@134");
        g.sequence("annotation_type", "type");
        g.sequence("api_comment", "PS", "@131");
        g.sequence("api_comment_line", "PS", "WS", "@132", "api_comment_text", "WS");
        g.sequence("argument", "expression");
        g.sequence("as_operation", "@79", "SP", "WS", "type", "WS");
        g.sequence("assert_statement", "PS", "@31", "SP", "WS", "condition", "WS", "assertion_echo_opt", "WS", "SEMICOLON");
        g.sequence("assertion_echo", "@32", "SP", "WS", "expression", "WS");
        g.sequence("assume_statement", "PS", "@33", "SP", "WS", "condition", "WS", "assumption_echo_opt", "WS", "SEMICOLON");
        g.sequence("assumption_echo", "@34", "SP", "WS", "expression", "WS");
        g.sequence("boolean_datum", "boolean_value");
        g.sequence("break_statement", "PS", "@41", "WS", "SEMICOLON");
        g.sequence("byte_datum", "byte_value");
        g.sequence("byte_value", "@180", "DIGITS", "@181", "WS");
        g.sequence("call_method_expression", "PS", "@119", "WS", "instance_member_access", "arguments", "WS");
        g.sequence("call_static_method_expression", "PS", "@122", "WS", "static_member_access", "arguments", "WS");
        g.sequence("char_datum", "char_value");
        g.sequence("class_datum", "class_value", "WS");
        g.sequence("class_value", "@198", "WS", "@199", "SP", "WS", "type", "WS", "@200", "WS");
        g.sequence("concat_operation", "@94", "WS", "p5_operand");
        g.sequence("condition", "expression");
        g.sequence("conditional_case", "PS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("continue_statement", "PS", "@42", "WS", "SEMICOLON");
        g.sequence("debug_statement", "PS", "@30", "WS", "SEMICOLON");
        g.sequence("delegate_statement", "PS", "@71", "SP", "WS", "variable", "WS", "@72", "WS", "type", "WS", "@73", "WS", "static_member_access", "WS", "SEMICOLON");
        g.sequence("design_definition", "PS", "api_comment", "annotation_list", "WS", "@6", "SP", "WS", "name", "WS", "elements", "WS", "supers_opt", "WS", "SEMICOLON", "WS");
        g.sequence("dimension", "@164", "WS", "@165");
        g.sequence("dispatch_expression", "PS", "@115", "SP", "WS", "name", "WS", "arguments", "WS");
        g.sequence("divide_operation", "@97", "WS", "p7_operand");
        g.sequence("do_statement", "PS", "@56", "WS", "sequence_statement", "WS", "@57", "WS");
        g.sequence("do_until", "@58", "WS", "paren_condition", "WS", "do_until_trigger");
        g.sequence("do_while", "@59", "WS", "paren_condition", "WS", "do_while_trigger");
        g.sequence("double_datum", "double_value");
        g.sequence("double_value", "@195", "DIGITS", "@196", "DIGITS", "EXPONENT_OPT", "WS");
        g.sequence("element", "PS", "name", "WS", "@150", "WS", "type", "WS");
        g.sequence("elements", "PS", "@143", "WS", "@148", "WS", "@149", "WS");
        g.sequence("elif_case", "@24", "WS", "conditional_case", "WS");
        g.sequence("else_case", "@25", "WS", "sequence_statement", "WS");
        g.sequence("enum_constant", "name");
        g.sequence("enum_constant_list", "@12", "WS", "@17", "WS", "@18");
        g.sequence("enum_definition", "PS", "api_comment", "annotation_list", "WS", "@11", "SP", "WS", "name", "WS", "enum_constant_list", "WS", "SEMICOLON", "WS");
        g.sequence("equals_operation", "@88", "WS", "p4_operand");
        g.sequence("exception_definition", "PS", "api_comment", "annotation_list", "WS", "@4", "SP", "WS", "name", "WS", "@5", "SP", "WS", "type", "WS", "SEMICOLON", "WS");
        g.sequence("expression_statement", "PS", "expression", "SEMICOLON");
        g.sequence("false", "@173", "@174", "WS");
        g.sequence("filepath", "string_value");
        g.sequence("float_datum", "float_value");
        g.sequence("float_value", "@191", "DIGITS", "@192", "DIGITS", "EXPONENT_OPT", "@193", "WS");
        g.sequence("for_body", "sequence_statement");
        g.sequence("for_condition", "expression", "WS");
        g.sequence("for_controller", "@45", "WS", "for_init", "WS", "SEMICOLON", "WS", "for_condition", "WS", "SEMICOLON", "WS", "for_modifier", "WS", "@46", "WS");
        g.sequence("for_init", "variable", "WS", "@47", "WS", "expression", "WS");
        g.sequence("for_modifier", "expression");
        g.sequence("for_statement", "PS", "@44", "WS", "for_controller", "WS", "for_body", "WS");
        g.sequence("foreach_body", "sequence_statement");
        g.sequence("foreach_controller", "@49", "WS", "foreach_vardec", "@50", "WS", "foreach_iterator", "@51");
        g.sequence("foreach_iterator", "expression", "WS");
        g.sequence("foreach_statement", "PS", "@48", "WS", "foreach_controller", "WS", "foreach_body", "WS");
        g.sequence("foreach_vardec", "variable", "WS", "@52", "WS", "type", "WS");
        g.sequence("forever_statement", "PS", "@53", "WS", "sequence_statement", "WS");
        g.sequence("formals", "PS", "@151", "WS", "@156", "WS", "@157", "WS");
        g.sequence("function_definition", "PS", "api_comment", "annotation_list", "WS", "@19", "SP", "WS", "signature", "WS", "sequence_statement", "WS");
        g.sequence("functor_definition", "PS", "api_comment", "annotation_list", "WS", "@9", "SP", "WS", "name", "WS", "formals", "WS", "@10", "WS", "type", "WS", "SEMICOLON", "WS");
        g.sequence("get_field_expression", "PS", "@123", "SP", "WS", "instance_member_access", "WS");
        g.sequence("get_static_expression", "PS", "@126", "SP", "WS", "static_member_access", "WS");
        g.sequence("goto_statement", "PS", "@28", "SP", "WS", "label", "WS", "SEMICOLON");
        g.sequence("greater_operation", "@92", "WS", "p4_operand");
        g.sequence("greater_or_equals_operation", "@90", "WS", "p4_operand");
        g.sequence("identity_equals_operation", "@86", "WS", "p4_operand");
        g.sequence("identity_not_equals_operation", "@87", "WS", "p4_operand");
        g.sequence("if_case", "@23", "WS", "conditional_case", "WS");
        g.sequence("if_statement", "PS", "if_case", "elif_cases_opt", "WS", "else_case_opt", "WS");
        g.sequence("implies_operation", "@85", "WS", "p3_operand");
        g.sequence("import_directive", "PS", "@2", "SP", "WS", "type", "WS", "SEMICOLON");
        g.sequence("instance_member_access", "expression", "WS", "@169", "WS", "name", "WS");
        g.sequence("instanceof_expression", "PS", "@129", "SP", "WS", "expression", "WS", "@130", "WS", "type", "WS");
        g.sequence("int_datum", "int_value");
        g.sequence("int_value", "@186", "DIGITS", "WS");
        g.sequence("is_operation", "@80", "SP", "WS", "type", "WS");
        g.sequence("keyword_expression", "@102", "WS", "keyword_expression_body", "WS", "@103", "WS");
        g.sequence("label", "ID", "WS");
        g.sequence("lambda_statement", "PS", "@68", "SP", "WS", "variable", "WS", "@69", "WS", "type", "WS", "formals", "WS", "@70", "WS", "expression", "WS", "SEMICOLON", "WS");
        g.sequence("less_operation", "@93", "WS", "p4_operand");
        g.sequence("less_or_equals_operation", "@91", "WS", "p4_operand");
        g.sequence("let_statement", "PS", "@66", "WS", "variable", "WS", "@67", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("list_expression", "PS", "@112", "WS", "arguments", "WS", "@113", "WS");
        g.sequence("literal_char_value", "@175", "@176", "@177", "WS");
        g.sequence("locals_expression", "PS", "@108", "WS");
        g.sequence("long_datum", "long_value");
        g.sequence("long_value", "@188", "DIGITS", "@189", "WS");
        g.sequence("marker_statement", "PS", "@29", "SP", "WS", "label", "WS", "SEMICOLON");
        g.sequence("module", "WS", "module_members", "END");
        g.sequence("module_directive", "PS", "api_comment", "annotation_list", "WS", "@0", "SP", "WS", "module_name", "WS", "@1", "WS", "namespace", "WS", "SEMICOLON");
        g.sequence("modulo_operation", "@98", "WS", "p7_operand");
        g.sequence("multiply_operation", "@99", "WS", "p7_operand");
        g.sequence("name", "name_id", "WS");
        g.sequence("name_id", "ID");
        g.sequence("name_of_named_module", "name");
        g.sequence("namespace_explicit", "PS", "@139");
        g.sequence("negate_operation", "@100", "WS", "p8", "WS");
        g.sequence("nested_expression", "@104", "WS", "expression", "WS", "@105", "WS");
        g.sequence("new_expression", "PS", "@116", "SP", "WS", "type", "WS", "arguments", "WS");
        g.sequence("nop_statement", "PS", "@22", "SEMICOLON");
        g.sequence("not_equals_operation", "@89", "WS", "p4_operand");
        g.sequence("not_operation", "@101", "WS", "p8", "WS");
        g.sequence("null_coalescing_operation", "@81", "WS", "p2_operand");
        g.sequence("null_datum", "@106", "@107", "WS");
        g.sequence("numeric_char_value", "DIGITS", "@178", "WS");
        g.sequence("or_operation", "@83", "WS", "p3_operand");
        g.sequence("p1", "p1_operand", "p1_operations");
        g.sequence("p1_operand", "p2");
        g.sequence("p2", "p2_operand", "p2_operations");
        g.sequence("p2_operand", "p3");
        g.sequence("p2_operation", "null_coalescing_operation");
        g.sequence("p3", "p3_operand", "p3_operations");
        g.sequence("p3_operand", "p4");
        g.sequence("p4", "p4_operand", "p4_operations");
        g.sequence("p4_operand", "p5");
        g.sequence("p5", "p5_operand", "p5_operations");
        g.sequence("p5_operand", "p6");
        g.sequence("p5_operation", "concat_operation");
        g.sequence("p6", "p6_operand", "p6_operations");
        g.sequence("p6_operand", "p7");
        g.sequence("p7", "p7_operand", "p7_operations");
        g.sequence("p7_operand", "p8");
        g.sequence("parameter", "PS", "variable", "WS", "@158", "WS", "type", "WS");
        g.sequence("paren_condition", "nested_expression");
        g.sequence("paren_expression", "nested_expression");
        g.sequence("progn_expression", "PS", "@114", "SP", "WS", "arguments", "WS");
        g.sequence("recur_statement", "PS", "@74", "WS", "arguments", "WS", "SEMICOLON");
        g.sequence("redo_statement", "PS", "@43", "WS", "SEMICOLON");
        g.sequence("regular_string_value", "STRING_LITERAL", "WS");
        g.sequence("return_type", "type");
        g.sequence("return_value_statement", "PS", "@76", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("return_void_statement", "PS", "@75", "WS", "SEMICOLON");
        g.sequence("sequence_statement", "PS", "@20", "WS", "statements", "WS", "@21", "WS");
        g.sequence("set_field_expression", "PS", "@124", "SP", "WS", "instance_member_access", "@125", "WS", "expression", "WS");
        g.sequence("set_static_expression", "PS", "@127", "SP", "WS", "static_member_access", "WS", "@128", "WS", "expression", "WS");
        g.sequence("short_datum", "short_value");
        g.sequence("short_value", "@183", "DIGITS", "@184", "WS");
        g.sequence("signature", "name", "WS", "formals", "WS", "@140", "WS", "return_type", "WS");
        g.sequence("simple_name", "name_id");
        g.sequence("static_member_access", "static_owner", "WS", "name", "WS");
        g.sequence("static_owner", "static_owner_explicit");
        g.sequence("static_owner_explicit", "type", "WS", "@170");
        g.sequence("string_datum", "string_value");
        g.sequence("struct_definition", "PS", "api_comment", "annotation_list", "WS", "@8", "SP", "WS", "name", "WS", "elements", "WS", "supers_opt", "WS", "SEMICOLON", "WS");
        g.sequence("subtract_operation", "@96", "WS", "p6_operand");
        g.sequence("supers", "@141", "WS", "supers_list", "WS");
        g.sequence("supers_list_cons", "type", "WS", "@142", "WS", "supers_list");
        g.sequence("supers_list_end", "type");
        g.sequence("ternary_conditional_expression", "PS", "@109", "SP", "WS", "condition", "WS", "@110", "SP", "WS", "expression", "@111", "SP", "WS", "expression", "WS");
        g.sequence("throw_statement", "PS", "@35", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("true", "@171", "@172", "WS");
        g.sequence("try_catch_statement", "PS", "@36", "WS", "trycatch_body", "WS", "trycatch_handlers", "WS");
        g.sequence("trycatch_body", "sequence_statement");
        g.sequence("trycatch_handler", "PS", "@37", "WS", "trycatch_vardec", "WS", "sequence_statement", "WS");
        g.sequence("trycatch_vardec", "@38", "WS", "variable", "WS", "@39", "WS", "type", "WS", "@40");
        g.sequence("tuple_definition", "PS", "api_comment", "annotation_list", "WS", "@7", "SP", "WS", "name", "WS", "elements", "WS", "supers_opt", "WS", "SEMICOLON", "WS");
        g.sequence("type", "type_name", "WS", "dimensions", "WS");
        g.sequence("type_name", "type_namespace", "simple_name", "WS");
        g.sequence("type_namespace_explicit", "PS", "@168");
        g.sequence("until_statement", "PS", "@54", "WS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("val_statement", "PS", "@62", "SP", "WS", "variable", "WS", "@63", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("var_statement", "PS", "@60", "SP", "WS", "variable", "WS", "@61", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("variable", "ID", "WS");
        g.sequence("variable_datum", "variable");
        g.sequence("verbatim_string_value", "@197", "WS", "STRING_LITERAL", "WS");
        g.sequence("when_statement", "PS", "@26", "SP", "WS", "paren_condition", "WS", "@27", "WS", "statement", "WS");
        g.sequence("while_statement", "PS", "@55", "WS", "paren_condition", "WS", "sequence_statement", "WS");
        g.sequence("xor_operation", "@84", "WS", "p3_operand");
        g.sequence("yield_value_statement", "PS", "@78", "SP", "WS", "expression", "WS", "SEMICOLON");
        g.sequence("yield_void_statement", "PS", "@77", "WS", "SEMICOLON");
        g.str("@0", "module");
        g.str("@1", "in");
        g.str("@106", "null");
        g.str("@108", "locals");
        g.str("@109", "if");
        g.str("@11", "enum");
        g.str("@110", "then");
        g.str("@111", "else");
        g.str("@114", "progn");
        g.str("@115", "dispatch");
        g.str("@116", "new");
        g.str("@117", "call");
        g.str("@120", "call");
        g.str("@123", "field");
        g.str("@124", "field");
        g.str("@126", "field");
        g.str("@127", "field");
        g.str("@129", "instanceof");
        g.str("@132", "''");
        g.str("@141", "is");
        g.str("@142", "&");
        g.str("@170", "::");
        g.str("@171", "true");
        g.str("@173", "false");
        g.str("@175", "'");
        g.str("@177", "'");
        g.str("@19", "defun");
        g.str("@199", "class");
        g.str("@2", "import");
        g.str("@210", "'");
        g.str("@211", "''");
        g.str("@22", "nop");
        g.str("@221", "'");
        g.str("@226", "//");
        g.str("@23", "if");
        g.str("@232", "/*");
        g.str("@233", "*/");
        g.str("@238", "*/");
        g.str("@24", "elif");
        g.str("@25", "else");
        g.str("@26", "when");
        g.str("@27", "then");
        g.str("@28", "goto");
        g.str("@29", "marker");
        g.str("@3", "annotation");
        g.str("@30", "debug");
        g.str("@31", "assert");
        g.str("@32", "echo");
        g.str("@33", "assume");
        g.str("@34", "echo");
        g.str("@35", "throw");
        g.str("@36", "try");
        g.str("@37", "catch");
        g.str("@4", "exception");
        g.str("@41", "break");
        g.str("@42", "continue");
        g.str("@43", "redo");
        g.str("@44", "for");
        g.str("@48", "foreach");
        g.str("@5", "extends");
        g.str("@50", "in");
        g.str("@53", "forever");
        g.str("@54", "until");
        g.str("@55", "while");
        g.str("@56", "do");
        g.str("@58", "until");
        g.str("@59", "while");
        g.str("@6", "design");
        g.str("@60", "var");
        g.str("@62", "val");
        g.str("@64", "let");
        g.str("@68", "lambda");
        g.str("@7", "tuple");
        g.str("@70", "=>");
        g.str("@71", "delegate");
        g.str("@73", "=>");
        g.str("@74", "recur");
        g.str("@75", "return");
        g.str("@76", "return");
        g.str("@77", "yield");
        g.str("@78", "yield");
        g.str("@79", "as");
        g.str("@8", "struct");
        g.str("@80", "is");
        g.str("@81", "??");
        g.str("@85", "->");
        g.str("@86", "===");
        g.str("@87", "!==");
        g.str("@88", "==");
        g.str("@89", "!=");
        g.str("@9", "functor");
        g.str("@90", ">=");
        g.str("@91", "<=");
        g.str("@94", "..");
        g.str("PS", "");
        g.str("TRIPLE_QUOTE", "'''");
        g.str("assertion_echo_empty", "");
        g.str("assumption_echo_empty", "");
        g.str("do_until_trigger", "");
        g.str("do_while_trigger", "");
        g.str("name_of_anonymous_module", "*");
        g.str("namespace_implicit", "");
        g.str("static_owner_implicit", "");
        g.str("type_namespace_implicit", "");

        // Specify which rule is the root of the grammar.
        g.setRoot("module");

        // Specify the number of tracing records to store concurrently.
        g.setTraceCount(1024);

        // Perform the actual construction of the grammar object.
        return g.build();
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public ParserOutput parse(final char[] input)
    {
        return grammar.newParser().parse(input);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public ParserOutput parse(final String input)
    {
        return parse(input.toCharArray());
    }
}
