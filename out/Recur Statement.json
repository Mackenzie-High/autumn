{ "summary" : "A recur-statement performs a tail-recursive invocation of the enclosing function.", "ast" : "autumn.lang.compiler.ast.nodes.RecurStatement", "syntax" : [[E-32, "<span class=\"keyword\">recur</span> <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>2</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> ;"]], "details" : [[E-32, "A recur-statement can be thought of as a combination of a return-statement and a call-expression."], [E-32, "Each <i>argument</i> will be boxed, if necessary."], [E-32, "Each <i>argument</i> will be unboxed, if necessary."], [E-32, "Each <i>argument</i> will be coerced, if necessary."], [E-32, "The <i>return-type</i> of the enclosing function can be void."], [E-32, "The <i>return-type</i> of the enclosing function can be non-void."]], "static-checks" : [["RECUR_IN_MEMOIZED_FUNCTION", "A recur-statement cannot be used inside of a memoized-function.", "null"], ["BAD_ARGUMENT_COUNT", "There must be exactly one <i>argument</i> for each <i>parameter</i> in the enclosing function.", "null"], ["IMPOSSIBLE_ASSIGNMENT", "The type of <i>argument<sub>i</sub></i> must be assignable to the type of <i>parameter<sub>i</sub></i> of the enclosing function.", "null"]], "example-1" : ["module Main in execution;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Compute the sum of the integers less than ten million%0A    # that are evenly divisible by both two and three. %0A%0A    val result = My::compute(0, 0);%0A%0A    F::println(result);%0A}%0A%0Adefun compute(index : int, sum : long) : long%0A{%0A    if (index == 10_000_000)%0A    {%0A        return sum;%0A    }%0A    elif ((index &#37; 2 == 0) & (index &#37; 3 == 0))%0A    {%0A        recur index + 1, sum + index;%0A    }%0A    else%0A    {%0A        recur index + 1, sum;%0A    }%0A}", "8333333333333"] }