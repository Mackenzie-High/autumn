{ "summary" : "This operator performs a less-or-equals comparison operation.", "ast" : "autumn.lang.compiler.ast.nodes.LessThanOrEqualsOperation", "syntax" : [[0, "<i><a href=\"TextPage.html?page=Expression\">left</a></i> &lt;= <i><a href=\"TextPage.html?page=Expression\">right</a></i>"]], "details" : [[0, "Precedence: 6"], [0, "Associativity: Left"], [0, "Predefined Overloads:"], [1, "(boolean <= boolean) &#8614; boolean"], [1, "(char <= char) &#8614; boolean"], [1, "(byte <= byte) &#8614; boolean"], [1, "(short <= short) &#8614; boolean"], [1, "(int <= int) &#8614; boolean"], [1, "(long <= long) &#8614; boolean"], [1, "(float <= float) &#8614; boolean"], [1, "(double <= double) &#8614; boolean"], [1, "(<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html\">Comparable</a> <= <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html\">Comparable</a>) &#8614; boolean"], [0, "The overload that best matches the operands will be selected."], [1, "Boxing will be performed, if necessary."], [1, "Unboxing will be performed, if necessary."], [1, "Coercion will be performed, if necessary."], [0, "Both operands are greedily evaluated."], [1, "The left-operand is evaluated first."], [1, "The right-operand is evaluated second."], [0, "Return Type: boolean"], [0, "Return true when the left-operand is less-than-or-equal to the right-operand."]], "static-checks" : [["NO_SUCH_BINARY_OPERATOR", "None of the overloads will accept the left-operand due to its type.", "null"], ["NO_SUCH_BINARY_OPERATOR", "None of the overloads will accept the right-operand due to its type.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    var case1 = false;%0A    var case2 = false;%0A    var case3 = false;%0A    var case4 = false;%0A%0A%0A    F::println(%22Case: boolean%22);%0A%0A    case1 = false <= false;%0A    case2 = false <= true;%0A    case3 = true <= false;%0A    case4 = true <= true;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A    F::println(case4);%0A%0A    F::println();%0A    F::println(%22Case: char%22);%0A%0A    case1 = 2C <= 3C;%0A    case2 = 3C <= 3C;%0A    case3 = 3C <= 2C;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A   %0A    F::println();%0A    F::println(%22Case: byte%22);%0A%0A    case1 = 2B <= 3B;%0A    case2 = 3B <= 3B;%0A    case3 = 3B <= 2B;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: short%22);%0A%0A    case1 = 2S <= 3S;%0A    case2 = 3S <= 3S;%0A    case3 = 3S <= 2S;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: int%22);%0A%0A    case1 = 2 <= 3;%0A    case2 = 3 <= 3;%0A    case3 = 3 <= 2;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: long%22);%0A%0A    case1 = 2L <= 3L;%0A    case2 = 3L <= 3L;%0A    case3 = 3L <= 2L;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: float%22);%0A%0A    case1 = 2.0F <= 3.0F;%0A    case2 = 3.0F <= 3.0F;%0A    case3 = 3.0F <= 2.0F;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: double%22);%0A%0A    case1 = 2.0 <= 3.0;%0A    case2 = 3.0 <= 3.0;%0A    case3 = 3.0 <= 2.0;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A%0A    F::println();%0A    F::println(%22Case: Comparable%22);%0A%0A    case1 = %22A%22 <= %22B%22;%0A    case2 = %22B%22 <= %22B%22;%0A    case3 = %22B%22 <= %22A%22;%0A%0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A}", "Case: boolean%0Atrue%0Atrue%0Afalse%0Atrue%0A%0ACase: char%0Atrue%0Atrue%0Afalse%0A%0ACase: byte%0Atrue%0Atrue%0Afalse%0A%0ACase: short%0Atrue%0Atrue%0Afalse%0A%0ACase: int%0Atrue%0Atrue%0Afalse%0A%0ACase: long%0Atrue%0Atrue%0Afalse%0A%0ACase: float%0Atrue%0Atrue%0Afalse%0A%0ACase: double%0Atrue%0Atrue%0Afalse%0A%0ACase: Comparable%0Atrue%0Atrue%0Afalse"] }