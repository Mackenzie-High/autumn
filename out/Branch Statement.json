{ "summary" : "A branch-statement creates an unstructured jump-table.", "ast" : "autumn.lang.compiler.ast.nodes.BranchStatement", "syntax" : [[0, "<span class=\"keyword\">branch</span> ( <a href=\"TextPage.html?page=Expression\">index</a> ) ( <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>0</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>n - 1</sub></i> ) <span class=\"keyword\">default</span> <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>n</sub></i>;"]], "details" : [[0, "A branch-statement is a low-level operation that should usually be avoided by programmers."], [0, "A branch-statement cannot be used to jump out of a function."], [0, "The <i>index</i> will be unboxed, if necessary."], [0, "The <i>index</i> will be coerced, if necessary."], [0, "Algorithm:"], [1, "Let <i>X</i> be the result of evaluating the <i>index</i>."], [1, "Let <i>N</i> be the number of labels in the branch-statement, including the default label, minus one."], [1, "Unbox <i>X</i>, if necessary."], [1, "Coerce <i>X</i>, if necessary."], [1, "If <i>X</i> &lt; 0, then jump to the location denoted by <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>N</sub></i>, which is the default label."], [1, "If <i>X</i> &gt= <i>N</i>, then jump to the location denoted by <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>N</sub></i>, which is the default label."], [1, "Otherwise, jump to the location denoted by <i><a href=\"ConstructPage.html?construct=Label\">label</a><sub>X</sub></i>."]], "static-checks" : [["EXPECTED_INTEGER", "The type of <i>index</i> must be assignable to type int.", "null"], ["NO_SUCH_LABEL", "Each <i>label<sub>i</sub></i> must be declared somewhere in the enclosing function.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    My::act(0, 2);%0A    My::act(1, 2);%0A    My::act(2, 2);%0A    My::act(3, 2);%0A%0A    My::act(0, 3);%0A    My::act(1, 3);%0A    My::act(2, 3);%0A    My::act(3, 3);%0A%0A    My::act(0, 4);%0A    My::act(1, 4);%0A    My::act(2, 4);%0A    My::act(3, 4);%0A%0A    My::act(0, 5);%0A    My::act(1, 5);%0A    My::act(2, 5);%0A    My::act(3, 5);%0A}%0A%0Adefun act (x : int, n : int) : void%0A{%0A    branch (x) (ACTION_1, ACTION_2, ACTION_3) default ELSE;%0A%0A    marker ACTION_1;%0A    {%0A        F::println(n);%0A        return;%0A    }%0A%0A    marker ACTION_2;%0A    {%0A        F::println(n * n);%0A        return;%0A    }%0A%0A    marker ACTION_3;%0A    {%0A        F::println(n * n * n);%0A        return;%0A    }%0A%0A    marker ELSE;%0A    {%0A        F::println();%0A        return;%0A    }%0A}", "2%0A4%0A8%0A%0A3%0A9%0A27%0A%0A4%0A16%0A64%0A%0A5%0A25%0A125"] }