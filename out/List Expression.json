{ "summary" : "A list-expression creates a new mutable list from a list of expressions.", "ast" : "autumn.lang.compiler.ast.nodes.ListExpression", "syntax" : [[0, "[ <i><a href=\"TextPage.html?page=Expression\">value</a><sub>1</sub></i> , <i><a href=\"TextPage.html?page=Expression\">value</a><sub>2</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">value</a><sub>n</sub></i> ]"]], "details" : [[0, "The values of the elements will be boxed when necessary."], [0, "Return Type: java.util.List"], [0, "Return A new mutable list object is returned that contains the values of the arguments."]], "static-checks" : [["VALUE_REQUIRED", "The type of each <i>element</i> must be either a primitive-type or a reference-type.", "null"]], "example-1" : [1, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create an empty list.%0A    val empty = [];%0A%0A    # Create a list with a single element. %0A    val home = [%22Earth%22];%0A%0A    # Create a list with two elements. %0A    val hot = [%22Mercury%22, %22Venus%22];%0A%0A    # Create a list with multiple elements.%0A    val jovian = [%22Jupiter%22, %22Saturn%22, %22Uranus%22, %22Neptune%22];%0A%0A    # Print the results.%0A    (F::println empty);%0A    (F::println home);%0A    (F::println hot);%0A    (F::println jovian);%0A}", "[]%0A[Earth]%0A[Mercury, Venus]%0A[Jupiter, Saturn, Uranus, Neptune]"], "example-2" : [2, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create an empty list.%0A    val pets = [];%0A%0A    # Add elements to the list. %0A    (pets.add %22Jet%22);%0A    (pets.add %22Fluffy%22);%0A    (pets.add %22Chicky%22);%0A    (pets.add %22Picky%22);%0A    (pets.add %22Sikorsky%22);%0A    (pets.add %22Lucky%22);%0A    (pets.add %22Eyeball%22);%0A%0A    # Print the results.%0A    (F::println pets);%0A}", "[Jet, Fluffy, Chicky, Picky, Sikorsky, Lucky, Eyeball]"] }