{ "summary" : "A progn-expression executes a series of expressions sequentially.", "ast" : "autumn.lang.compiler.ast.nodes.PrognExpression", "syntax" : [[0, "( <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"]], "details" : [[0, "There must be at least one argument in the sequence."], [0, "Return Type: type of <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i>"], [0, "Return the value produced by the last argument."]], "checks" : [], "example-1" : [1, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val value = (progn (F::println %22X%22), %0A                       (F::println %22Y%22), %0A                       (F::println %22Z%22),%0A                       1010);%0A%0A    (F::println %22value = %22 .. value);%0A}", "X%0AY%0AZ%0Avalue = 1010"] }