{ "summary" : "A functor-definition creates a new functor-type in the enclosing package.", "ast" : "autumn.lang.compiler.ast.nodes.FunctorDefinition", "syntax" : [[0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">functor</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ( <i><a href=\"ConstructPage.html?construct=Formal Parameter\">param</a><sub>1</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=Formal Parameter\">param</a><sub>n</sub></i> ) : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">return-type</a></i> ;"], [0, "<hr class=&#92%22syntax-hr&#92%22>"], [0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">functor</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ( <i><a href=\"ConstructPage.html?construct=Formal Parameter\">param</a><sub>1</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=Formal Parameter\">param</a><sub>n</sub></i> ) : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">return-type</a></i> <span class=\"keyword\">extends</span> </i><a href=\"ConstructPage.html?construct=TypeSpecifier\">super</a></i> ;"]], "details" : [[0, "Regarding the functor-type T created by a functor-definition:"], [1, "T is a form of class-type."], [1, "T has the <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/annotations/FunctorDefinition.html'>FunctorDefinition</a> annotation applied directly to it."], [1, "T is <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Modifier.html#PUBLIC\">public</a>."], [1, "T is a subtype of interface <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/DefinedFunctor.html\">DefinedFunctor</a>"], [1, "T is a subtype of interface <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/TypedFunctor.html\">TypedFunctor</a>"], [1, "T is a subtype of interface <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Functor.html\">Functor</a>"], [1, "T is a subtype of class <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractDefinedFunctor.html\">AbstractDefinedFunctor</a>"], [1, "T is a subtype of the functor-type specified by <i>super</i>, if <i>super</i> is present."], [1, "T defines the following methods and constructors:"], [2, "constructor: T (<a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/TypedFunctor.html\">TypedFunctor</a>)"], [3, "parameter - inner : <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/TypedFunctor.html\">TypedFunctor</a>"], [3, "This constructor creates a new instance of T that wraps another functor."], [2, "method: invoke (<i>parameter-types</i>) : <i>return-type</i>"], [3, "This method provides a type-safe mechanism for invoking the functor."], [3, "This is the method that programmers will use most frequently."], [2, "method: parameterTypes () : <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/List.html\">List</a>&lt;<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html\">Class</a>&gt;"], [3, "This method creates a list containing the <i>parameter-types</i> as provided in the declaration."], [2, "method: returnType () : <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html\">Class</a>"], [3, "This method retrieves the <i>return-type</i> that was provided in the declaration."], [2, "method: inner () : <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/TypedFunctor.html\">TypedFunctor</a>"], [3, "This method retrieves the inner functor that was provided to the constructor."], [2, "method: apply (<a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/ArgumentStack.html\">ArgumentStack</a>) : void"], [3, "This method is the low-level method that handles invocations of the functor."], [3, "This method is not intended for direct use by programmers."], [1, "T is covariant in terms of a supertype S, iff either:"], [2, "Ǝ <i>i</i> such that T.formals<sub>i</sub> is a proper subtype of S.formals<sub>i</sub>"], [2, "T.return-type is a proper subtype of S.return-type"], [1, "Subtyping Requirements:"], [2, "Let S be any of the super functor-types of T."], [2, "T.formals.length must equal S.formals.length"], [2, "T.formals<sub>i</sub> must be a subtype of S.formals<sub>i</sub> ∀ <i>i</i>"], [2, "T.return-type must be a subtype of S.return-type"], [1, "T inherits the following special method declarations from its supertypes."], [2, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Functor.html#apply(autumn.lang.internals.ArgumentStack)'>apply (<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/ArgumentStack.html'>ArgumentStack</a>)</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)'>equals (<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>)</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass()'>getClass ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()'>hashCode ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notify()'>notify ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notifyAll()'>notifyAll ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#toString()'>toString ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait()'>wait ()</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long)'>wait (long)</a>"], [2, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long, int)'>wait (long, int)</a>"]], "static-checks" : [["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_TYPE", "No two types can share the same descriptor.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>param<sub>i</sub></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>param<sub>i</sub></i> must be accessible.", "null"], ["EXPECTED_VARIABLE_TYPE", "The type of param<sub>i</sub> must be a variable-type.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>return-type</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>return-type</i> must be accessible.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>super</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>super</i> must be accessible.", "null"], ["EXPECTED_CLASS_TYPE", "The type of <i>super</i> must be a class-type.", "null"], ["EXPECTED_DEFINED_FUNCTOR_TYPE", "The type of <i>super</i> must have the FunctorDefinition annotation applied directly to it.", "null"], ["CIRCULAR_INHERITANCE", "The new type cannot be a subtype of itself either directly or indirectly.", "null"], ["COVARIANCE_VIOLATION", "The subtyping requirements must be obeyed.", "null"]], "example-1" : ["module Main in examples;%0A%0Afunctor Calculation (x : int) : int;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create a function object that refers to function square. %0A    delegate p : Calculation => My::square;%0A%0A    # Create a function object that refers to function cube. %0A    delegate q : Calculation => My::cube;%0A%0A    for (i = 0; i < 10; i + 1)%0A    {%0A        # Perform a calculation using the first function object.%0A        val x = My::compute(p, i);%0A%0A        # Perform a calculation using the second function object.%0A        val y = My::compute(q, i);%0A%0A        # Print the results.%0A        F::println([i, x, y]);%0A    }%0A}%0A%0Adefun compute (function : Calculation, %0A               value : int) : int%0A{%0A    return function.invoke(value);%0A}%0A%0Adefun square (x : int) : int%0A{%0A    return x * x;%0A}%0A%0Adefun cube (x : int) : int%0A{%0A    return x * x * x;%0A}", "[0, 0, 0]%0A[1, 1, 1]%0A[2, 4, 8]%0A[3, 9, 27]%0A[4, 16, 64]%0A[5, 25, 125]%0A[6, 36, 216]%0A[7, 49, 343]%0A[8, 64, 512]%0A[9, 81, 729]"] }