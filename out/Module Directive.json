{ "summary" : "A module-directive is used to specify the name and namespace of the enclosing module.", "ast" : "autumn.lang.compiler.ast.nodes.ModuleDirective", "syntax" : [[0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">module</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> <span class=\"keyword\">in</span> <i><a href=\"ConstructPage.html?construct=Namespace\">namespace</a></i> ;"], [0, "<hr class=&#92%22syntax-hr&#92%22>"], [0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">module</span> * <span class=\"keyword\">in</span> <i><a href=\"ConstructPage.html?construct=Namespace\">namespace</a></i> ;"]], "details" : [[0, "There are two forms of module-directive, as indicated syntactically above."], [1, "The first form indicates that the enclosing module is a named module."], [1, "The second form indicates that the enclosing module is an anonymous module."], [2, "An anonymous module is simply a module with a compiler generated name."], [0, "The annotations applied to the directive will be applied to the type of the enclosing module."]], "static-checks" : [["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"]], "example-1" : ["module Enterprise in starships;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val mod = My::instance();%0A%0A    F::println (mod.getClass());%0A}", "class starships.Enterprise"], "example-2" : ["module * in starships;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val mod = My::instance();%0A%0A    F::println (mod.getClass());%0A}", "class starships.Module$1"], "example-3" : ["@Captain (%22Jonathan Archer%22)%0A@Scientist (%22T'Pol%22)%0Amodule Enterprise in starships;%0A%0Aannotation Captain;%0A%0Aannotation Scientist;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val klass = My::instance().getClass();%0A%0A    val anno1 = klass.getAnnotation((class Captain));%0A    val anno2 = klass.getAnnotation((class Scientist));%0A%0A    val captain = Reflect::getAnnotationValue(anno1);%0A    val scientist = Reflect::getAnnotationValue(anno2);%0A    %0A    F::println(%22Starship Captain = %22 .. captain);%0A    F::println(%22Science  Officer = %22 .. scientist);%0A}", "Starship Captain = Jonathan Archer%0AScience  Officer = T'Pol"] }