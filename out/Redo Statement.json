{ "summary" : "A redo-statement causes execution to immediately restart the current iteration of the nearest enclosing loop.", "ast" : "autumn.lang.compiler.ast.nodes.RedoStatement", "syntax" : [[0, "<span class=\"keyword\">redo</span> ;"]], "details" : [[0, "A redo-statement cannot be used to exit an invocation."], [0, "Types of Loops:"], [1, "<a href=\"ConstructPage.html?construct=Forever Statement\">Forever Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=While Statement\">While Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Until Statement\">Until Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Do-While Statement\">Do-While Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Do-Until Statement\">Do-Until Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=For Statement\">For Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Foreach Statement\">Foreach Statement</a>s"]], "static-checks" : [["REDO_OUTSIDE_OF_LOOP", "A redo-statement must be in the <i>body</i> of a loop.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    var i = 1;%0A%0A    while ((My::condition i))%0A    {%0A        (F::println %22i = %22 .. i);%0A        (F::println);%0A%0A        i = i + 1;%0A%0A        when (i == 2) then redo;%0A    }%0A}%0A%0Adefun condition(x : int) : boolean%0A{%0A    (F::println %22x = %22 .. x);%0A%0A    return x < 4;%0A}", "x = 1%0Ai = 1%0A%0Ai = 2%0A%0Ax = 3%0Ai = 3%0A%0Ax = 4"] }