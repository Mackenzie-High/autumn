{ "group" : "Functors", "summary" : "This function applies a functor to a list of arguments and then returns the result.", "signature" : "apply (functor : <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/TypedFunctor.html'>TypedFunctor</a>, arguments : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html'>Iterable</a>) : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>", "formals" : [["functor", "interface autumn.lang.TypedFunctor", "is the function object itself."], ["arguments", "interface java.lang.Iterable", "contains the arguments to pass to the functor."]], "returns" : ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>", "Return the result produced by the functor invocation."], "throws" : [["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>functor</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>arguments</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html'>IllegalArgumentException</a>", "if the number of arguments differs from the number of parameters."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html'>Throwable</a>", "in order to propagate exceptions thrown from within the functor."]], "details" : [], "example-1" : ["module Main in execution;%0A%0Afunctor MyFunction (x : int, y : int) : int;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create a function object. %0A    delegate p : MyFunction => My::sum2;%0A%0A    # Perform some applications. %0A    val result1 = F::apply(p, [2, 3]);%0A    val result2 = F::apply(p, [3, 5]);%0A    val result3 = F::apply(p, [2, 8]);%0A%0A    # Verify the results. %0A    assert (2 + 3) * (2 + 3) == result1;%0A    assert (3 + 5) * (3 + 5) == result2;%0A    assert (2 + 8) * (2 + 8) == result3;%0A%0A    # Print the results.%0A    F::println(result1);%0A    F::println(result2);%0A    F::println(result3);%0A}%0A%0Adefun sum2 (x : int, y : int) : int%0A{%0A    return (x + y) * (x + y);%0A}", "25%0A64%0A100"] }