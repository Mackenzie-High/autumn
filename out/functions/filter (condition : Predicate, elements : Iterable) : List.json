{ "summary" : "This function creates a list containing the elements from an iterable which match a predicate.", "signature" : "filter (condition : <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/util/functors/Predicate.html'>Predicate</a>, elements : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html'>Iterable</a>) : <a href='https://docs.oracle.com/javase/7/docs/api/java/util/List.html'>List</a>", "formals" : [["condition", "class autumn.util.functors.Predicate", "is used to determine whether to keep each element."], ["elements", "interface java.lang.Iterable", "contains the elements to filter."]], "returns" : ["<a href='https://docs.oracle.com/javase/7/docs/api/java/util/List.html'>List</a>", "Return an immutable list containing the elements that were kept."], "throws" : [["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>condition</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>elements</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html'>Throwable</a>", "in order to propagate exceptions thrown from within the <i>predicate</i>."]], "details" : [], "example-1" : ["module Main in execution;%0A%0Atuple Pet (name : String, type : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create some pet objects. %0A    val pet1 = new Pet(%22Lizzy%22,    %22Lizard%22);%0A    val pet2 = new Pet(%22Chicky%22,   %22Chicken%22);%0A    val pet3 = new Pet(%22Jet%22,      %22Dog%22);%0A    val pet4 = new Pet(%22Picky%22,    %22Chicken%22);%0A    val pet5 = new Pet(%22Sikorsky%22, %22Chicken%22);%0A    val pet6 = new Pet(%22Fluffy%22,   %22Cat%22);%0A    val pet7 = new Pet(%22Lucky%22,    %22Chicken%22);%0A    val pet8 = new Pet(%22Eyeball%22,  %22Sheep%22);%0A%0A    # Create a list containing the pets. %0A    val pets = [pet1, pet2, pet3, pet4, pet5, pet6, pet7, pet8];%0A%0A    # Create a predicate that matches chickens only. %0A    lambda p : Predicate => ($1 is Pet).type() == %22Chicken%22;%0A%0A    # Create a list of chickens by filtering out the other pets. %0A    val chickens = F::filter(p, pets);%0A%0A    # Print the results. %0A    F::printlns(chickens);%0A}", "(Chicky, Chicken)%0A(Picky, Chicken)%0A(Sikorsky, Chicken)%0A(Lucky, Chicken)"] }