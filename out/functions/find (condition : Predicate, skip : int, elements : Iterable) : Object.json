{ "summary" : "This function searches through an iterable for a value.", "signature" : "find (condition : <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/util/functors/Predicate.html'>Predicate</a>, skip : int, elements : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html'>Iterable</a>) : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>", "formals" : [["condition", "class autumn.util.functors.Predicate", "is used to identify the sought after value."], ["skip", "int", "is the number of matching elements to skip."], ["elements", "interface java.lang.Iterable", "contains the elements to search through."]], "returns" : ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>", "Return the sought after value, if it is found; otherwise, return null."], "throws" : [["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>condition</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>elements</i> is null."], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/IllegalArgumentException.html'>IllegalArgumentException</a>", "if <i>skip</i> is less-than zero"], ["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html'>Throwable</a>", "in order to propagate exceptions thrown from within the <i>predicate</i>."]], "details" : [], "example-1" : ["module Main in execution;%0A%0Atuple Volcano (name : String, country : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create some volcanoes. %0A    val v1 = new Volcano(%22Mount Etna%22,       %22Italy%22);%0A    val v2 = new Volcano(%22Mount Rainier%22,    %22USA%22);%0A    val v3 = new Volcano(%22Mount Pinatubo%22,   %22Philippines%22);%0A    val v4 = new Volcano(%22Mount Baker%22,      %22USA%22);%0A    val v5 = new Volcano(%22Mount Vesuvius%22,   %22Italy%22);%0A    val v6 = new Volcano(%22Mount St. Helens%22, %22USA%22);%0A    val v7 = new Volcano(%22Mount Vesuvius%22,   %22Italy%22);%0A   %0A    # Put the volcanoes into a list. %0A    val volcanoes = [v1, v2, v3, v4, v5, v6, v7];%0A%0A    # Create a predicate that only matches USA volcanoes.%0A    lambda p : Predicate => ($1 is Volcano).country() == %22USA%22;%0A%0A    # Find the matching volcanoes.%0A    val match1 = F::find(p, 0, volcanoes);%0A    val match2 = F::find(p, 1, volcanoes);%0A    val match3 = F::find(p, 2, volcanoes);%0A    val match4 = F::find(p, 3, volcanoes);%0A%0A    # Print the results.%0A    F::println(%22Volcano #1: %22 .. match1);%0A    F::println(%22Volcano #2: %22 .. match2);%0A    F::println(%22Volcano #3: %22 .. match3);%0A    F::println(%22Volcano #4: %22 .. match4);%0A}", ""] }