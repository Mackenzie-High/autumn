{ "summary" : "This function determines whether one type is a subtype of another.", "signature" : "isSubtypeOf (subtype : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html'>Class</a>, supertype : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html'>Class</a>) : boolean", "formals" : [["subtype", "class java.lang.Class", "may be a subtype of the <i>supertype</i>."], ["supertype", "class java.lang.Class", "may be a supertype of the <i>subtype</i>."]], "returns" : ["boolean", "Return true, iff <i>subtype</i> is in fact a subtype of <i>supertype</i>."], "throws" : [], "details" : [[0, "The <a href=\"http://www.mackenziehigh.me/autumn/TextPage.html?page=Type%20Conversions%20and%20Assignability\">subtyping</a> rules are given elsewhere in this specification."]], "example-1" : ["module Main in execution;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # A LinkedList is both an Object and a Collection.  %0A    val case1 = F::isSubtypeOf(class LinkedList, class Object);%0A    val case2 = F::isSubtypeOf(class LinkedList, class Collection);%0A%0A    # A String is an Object, but an Object is not a String. %0A    val case3 = F::isSubtypeOf(class String, class Object);%0A    val case4 = F::isSubtypeOf(class Object, class String);%0A%0A    # Null is a String, because null is the bottom-type. %0A    val case5 = F::isSubtypeOf(null, class String);%0A%0A    # Print the results. %0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A    F::println(case4);%0A    F::println(case5);%0A}", "true%0Atrue%0Atrue%0Afalse%0Atrue"] }