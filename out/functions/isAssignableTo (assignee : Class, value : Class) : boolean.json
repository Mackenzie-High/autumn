{ "summary" : "This function determines whether one type is assignable to another type in Autumn.", "signature" : "isAssignableTo (assignee : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html'>Class</a>, value : <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Class.html'>Class</a>) : boolean", "formals" : [["assignee", "class java.lang.Class", "is the the type of the entity being assigned to."], ["value", "class java.lang.Class", "is the type of the value that is being assigned to the assignee."]], "returns" : ["boolean", "Return true, iff Autumn allows the <i>value</i> type to be assigned to the <i>assignee</i> type."], "throws" : [], "details" : [[0, "The <a href=\"http://www.mackenziehigh.me/autumn/TextPage.html?page=Type%20Conversions%20and%20Assignability\">assignability</a> rules are given elsewhere in this specification."]], "example-1" : ["module Main in execution;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Identity%0A    val case1 = F::isAssignableTo(class String, class String);%0A%0A    # Subtyping%0A    val case2 = F::isAssignableTo(class Object, class String);%0A%0A    # Boxing%0A    val case3 = F::isAssignableTo(class Integer, class int);%0A%0A    # Unboxing%0A    val case4 = F::isAssignableTo(class int, class Integer);%0A%0A    # Coercion%0A    val case5 = F::isAssignableTo(class long, class int);%0A%0A    # Forbidden%0A    val case6 = F::isAssignableTo(class List, class int);%0A%0A    # Print the results. %0A    F::println(case1);%0A    F::println(case2);%0A    F::println(case3);%0A    F::println(case4);%0A    F::println(case5);%0A    F::println(case6);%0A}", "true%0Atrue%0Atrue%0Atrue%0Atrue%0Afalse"] }