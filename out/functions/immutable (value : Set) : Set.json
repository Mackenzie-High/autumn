{ "summary" : "This function creates an immutable set from another set.", "signature" : "immutable (value : <a href='https://docs.oracle.com/javase/7/docs/api/java/util/Set.html'>Set</a>) : <a href='https://docs.oracle.com/javase/7/docs/api/java/util/Set.html'>Set</a>", "formals" : [["value", "interface java.util.Set", "is the data-structure to copy."]], "returns" : ["<a href='https://docs.oracle.com/javase/7/docs/api/java/util/Set.html'>Set</a>", "Return an immutable copy of the <i>value</i>."], "throws" : [["<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html'>NullPointerException</a>", "if <i>value</i> is null."]], "details" : [], "example-1" : ["module Main in execution;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val original = new TreeSet();%0A%0A    My::add(original, 100);%0A    My::add(original, 200);%0A    My::add(original, 300);%0A%0A    val derived = F::immutable(original is Set);%0A    %0A    My::add(original, 400);%0A    My::add(original, 500);%0A%0A    My::add(derived, 600);%0A    My::add(derived, 700);%0A%0A    F::println(%22Original: %22 .. original);%0A    F::println(%22Derived: %22 .. derived);%0A}%0A%0Adefun add (ds : Set, value : Object) : void%0A{%0A    try%0A    {%0A        ds.add(value);%0A    }%0A    catch (ex : UnsupportedOperationException)%0A    {%0A        F::println(%22Failed to Add: %22 .. value);%0A    }%0A}", "Failed to Add: 600%0AFailed to Add: 700%0AOriginal: [100, 200, 300, 400, 500]%0ADerived: [100, 200, 300]"] }