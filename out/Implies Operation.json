{ "summary" : "This operator performs a  logical implication operation.", "ast" : "autumn.lang.compiler.ast.nodes.XorOperation", "syntax" : [[0, "<i><a href=\"TextPage.html?page=Expression\">left</a></i> -> <i><a href=\"TextPage.html?page=Expression\">right</a></i>"]], "details" : [[0, "Precedence: 7"], [0, "Associativity: Left"], [0, "This is a <a href=\"http://en.wikipedia.org/wiki/Short-circuit_evaluation\">short-circuit</a> operator:"], [1, "The left-operand is always evaluated."], [1, "The right-operand is only evaluated when the left-operand produces true."], [0, "Return Type: boolean"], [0, "Return true when the left-operand implies the right-operand."]], "checks" : [["EXPECTED_CONDITION", "The type of the left-operand must be either boolean or <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Boolean.html\">Boolean</a>.", "null"], ["EXPECTED_CONDITION", "The type of the right-operand must be either boolean or <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Boolean.html\">Boolean</a>.", "null"]], "example-1" : [1, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val case1 = false -> false;%0A    val case2 = false -> true;%0A    val case3 = true -> false;%0A    val case4 = true -> true;%0A%0A    (F::println %22F -> F = %22 .. case1);%0A    (F::println %22F -> T = %22 .. case2);%0A    (F::println %22T -> F = %22 .. case3);%0A    (F::println %22T -> T = %22 .. case4);%0A}", "F -> F = true%0AF -> T = true%0AT -> F = false%0AT -> T = true"], "example-2" : [2, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val case1 = false -> false;%0A    val case2 = false -> true;%0A    val case3 = true -> false;%0A    val case4 = true -> true;%0A%0A    (F::println %22Truth Table:%22);%0A    (F::println %22  F -> F = %22 .. case1);%0A    (F::println %22  F -> T = %22 .. case2);%0A    (F::println %22  T -> F = %22 .. case3);%0A    (F::println %22  T -> T = %22 .. case4);%0A%0A    (F::println);%0A%0A    (F::println %22Short Circuit:%22);%0A    (My::sc false, false);%0A    (My::sc false, true);%0A    (My::sc true, false);%0A    (My::sc true, true);%0A}%0A%0Adefun sc(left : boolean, right : boolean) : void%0A{%0A    (F::print %22  %22);%0A    (My::operand1 left) -> (My::operand2 left);%0A    (F::println);%0A}%0A%0Adefun operand1(value : boolean) : boolean%0A{%0A    (F::print %22L%22);%0A    return value;%0A}%0A%0Adefun operand2(value : boolean) : boolean%0A{%0A    (F::print %22R%22);%0A    return value;%0A}", "Truth Table:%0A  F -> F = true%0A  F -> T = true%0A  T -> F = false%0A  T -> T = true%0A%0AShort Circuit:%0A  L%0A  L%0A  LR%0A  LR"] }