{ "summary" : "A struct-definition creates a new struct-type in the enclosing package.", "ast" : "autumn.lang.compiler.ast.nodes.StructDefinition", "syntax" : [[0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">struct</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ( <i><a href=\"ConstructPage.html?construct=Element\">element</a><sub>1</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=Element\">element</a><sub>n</sub></i> ) ;"], [0, "<hr class=&#92%22syntax-hr&#92%22>"], [0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">struct</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ( <i><a href=\"ConstructPage.html?construct=Element\">element</a><sub>1</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=Element\">element</a><sub>n</sub></i> ) <span class=\"keyword\">extends</span> <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">super</a><sub>1</sub></i> & ... & <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">super</a><sub>n</sub></i>;"]], "details" : [[0, "A struct is an immutable user-defined datatype."], [0, "Regarding the struct-type T created by a definition:"], [1, "T is form of class-type."], [1, "T has the <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/annotations/StructDefinition.html'>StructDefinition</a> annotation applied directly to it."], [1, "T is both <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Modifier.html#PUBLIC\">public</a> and <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Modifier.html#FINAL\">final</a>."], [1, "T is a subtype of interface <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Record.html\">Record</a>."], [1, "T is a subtype of class <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html\">AbstractRecord</a>."], [1, "T inherits all the elements that are declared in its supertypes."], [1, "The order of the elements in T is lexicographical."], [2, "On the other hand, the order of the elements in a tuple is user-defined."], [2, "As a consequence, T can implicitly inherit elements."], [1, "T declares the following methods and constructors:"], [2, "Let C denote the sole constructor declared by T:"], [3, "C creates an immutable instance of T."], [3, "C takes one formal-parameter P for each element E."], [4, "P's static-type is the static-type of the element E."], [4, "C will assign the value of P to element E in the new instance."], [3, "The order of the formal-parameters in C is the same as the order of the elements in T."], [2, "For each element E in T:"], [3, "Let I represent an instance of T."], [3, "T contains a setter method S for element E."], [4, "The name of S is the name of E."], [4, "S takes a single formal-parameter P."], [5, "The static-type of P is the static-type of E."], [4, "S obtains a copy M of I."], [4, "S assigns the value of P to element E in instance M."], [4, "The return-type of S is T."], [4, "S returns M."], [3, "T contains a getter method G for element E."], [4, "The name of G is the name of E."], [4, "G does not take any formal-parameters."], [4, "The return-type of G is the static-type of element E."], [4, "G returns the value stored in element E in instance I."], [2, "T provides bridge methods for each setter method S of an element E."], [3, "For X, where X is a supertype of T, such that X also declares E:"], [4, "S : X is a bridge method in T."], [4, "S : T is invoked by the bridge method."], [2, "T provides bridge methods for method set(int, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\">Object</a>)."], [3, "For X, where X is T or a supertype thereof, such that X is also a subtype of <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Record.html\">Record</a>:"], [4, "set(int, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\">Object</a>) : X is a bridge method in T."], [4, "set(int, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\">Object</a>) : <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Record.html\">Record</a> is invoked by the bridge method."], [4, "Although the bridge method must downcast the return-value, the cast always succeeds."], [2, "T provides a special static method instance() : T."], [3, "The method returns an instance of T in which each element is set to is default value."], [3, "The method always returns the same object."], [2, "T inherits the following special method declarations from its supertypes."], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#compareTo(autumn.lang.Record)'>compareTo (<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Record.html'>Record</a>)</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#compareTo(java.lang.Object)'>compareTo (<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>)</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#equals(java.lang.Object)'>equals (<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>)</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#get(int)'>get (int)</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass()'>getClass ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#hashCode()'>hashCode ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#isEmpty()'>isEmpty ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#isStruct()'>isStruct ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#isTuple()'>isTuple ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#iterator()'>iterator ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#keys()'>keys ()</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notify()'>notify ()</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#notifyAll()'>notifyAll ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#set(int, java.lang.Object)'>set (int, <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>)</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#size()'>size ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#toString()'>toString ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#types()'>types ()</a>"], [3, "<a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/AbstractRecord.html#values()'>values ()</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait()'>wait ()</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long)'>wait (long)</a>"], [3, "<a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#wait(long, int)'>wait (long, int)</a>"]], "static-checks" : [["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_TYPE", "No two types can share the same descriptor.", "null"], ["DUPLICATE_ELEMENT", "The <i>name</i> of each element must be unique within the enclosing definition.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>element.type</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>element.type</i> must be accessible.", "null"], ["EXPECTED_VARIABLE_TYPE", "The <i>type</i> of each <i>element</i> must be a variable-type.", "null"], ["RETYPED_ELEMENT", "The type of an element must be the same in all the declarations of the element.", "null"], ["NAME_CONFLICT", "The name of an element cannot also be the name of an inherited method.", "null"]], "example-1" : ["module Main in execution;%0A%0Adesign Taxable (income : int);%0A%0Adesign Citizen (id : int);%0A%0Astruct Person (name : String) extends Citizen & Taxable;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val anna = new Person (7_433_9_7452, 25_000, %22Anna%22);%0A    val emma = new Person (9_214_7_6357, 50_000, %22Emma%22);%0A    val kate = new Person (8_123_3_8721, 10_000, %22Kate%22);%0A%0A    My::printTax(anna);%0A    My::printTax(emma);%0A    My::printTax(kate);%0A}%0A%0Adefun printTax (person : Person) : void%0A{%0A    val name = person.name();%0A%0A    val id = person.id();%0A%0A    val tax = My::computeTax(person);%0A%0A    F::println(%22Name = %22 .. name);%0A    F::println(%22ID   = %22 .. id);%0A    F::println(%22Tax  = %22 .. tax);%0A    F::println();%0A}%0A%0Adefun computeTax (taxable : Taxable) : int%0A{%0A    val income = taxable.income();%0A%0A    # 25&#37; Tax Rate%0A    return income / 4; %0A}", "Name = Anna%0AID   = 743397452%0ATax  = 6250%0A%0AName = Emma%0AID   = 921476357%0ATax  = 12500%0A%0AName = Kate%0AID   = 812338721%0ATax  = 2500"], "example-2" : ["module Main in execution;%0A%0Astruct City (name : String, %0A             country : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val city = new City (%22France%22, %22Paris%22);%0A    %0A    F::println (%22Keys = %22 .. city.keys());%0A    F::println ();%0A    F::println (%22Values = %22 .. city.values());%0A    F::println ();%0A    F::println (%22Size = %22 .. city.size());%0A    F::println ();%0A    F::println (%22Tuple? = %22 .. city.isTuple());%0A    F::println ();%0A    F::println (%22Struct? = %22 .. city.isStruct());%0A    F::println ();%0A%0A    foreach (value : String in city)%0A    {%0A        F::println (%22Value = %22 .. value);%0A    }%0A}", "Keys = [country, name]%0A%0AValues = [France, Paris]%0A%0ASize = 2%0A%0ATuple? = false%0A%0AStruct? = true%0A%0AValue = France%0AValue = Paris"], "example-3" : ["module Main in execution;%0A%0Astruct City (name : String, %0A             country : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val x = new City (%22France%22, %22Paris%22);%0A    %0A    val y = x.country (%22United States%22);%0A%0A    val z = y.country (%22France%22);%0A%0A    F::println (%22X = %22 .. x);%0A    F::println (%22X.name = %22 .. x.name());%0A    F::println (%22X.country = %22 .. x.country());%0A    F::println ();%0A%0A    F::println (%22Y = %22 .. y);%0A    F::println (%22Y.name = %22 .. y.name());%0A    F::println (%22Y.country = %22 .. y.country());%0A    F::println ();%0A%0A    F::println (%22Z = %22 .. z);%0A    F::println (%22Z.name = %22 .. z.name());%0A    F::println (%22Z.country = %22 .. z.country());%0A    F::println ();%0A%0A    F::println (%22Value Equality: %22 .. (x == z));%0A    F::println (%22Identity Equality: %22 .. (x === z));%0A}", "X = (France, Paris)%0AX.name = Paris%0AX.country = France%0A%0AY = (United States, Paris)%0AY.name = Paris%0AY.country = United States%0A%0AZ = (France, Paris)%0AZ.name = Paris%0AZ.country = France%0A%0AValue Equality: true%0AIdentity Equality: false"] }