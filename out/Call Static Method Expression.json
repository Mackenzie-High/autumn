{ "summary" : "A call-static-expression performs an invocation of a static method or function.", "ast" : "autumn.lang.compiler.ast.nodes.CallStaticMethodExpression", "syntax" : [[0, "( <span class=\"keyword\">call</span> <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">Owner</a></i>::<i><a href=\"ConstructPage.html?construct=Name\">name</a></i> <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"], [0, "<hr class=&$92%22syntax-hr&$92%22>"], [0, "( <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">Owner</a></i>::<i><a href=\"ConstructPage.html?construct=Name\">name</a></i> <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"]], "details" : [[0, "The method overload will be selected using the <a href=\"TextPage.html?page=Resolution\">Static Method Resolution Algorithm</a>."], [0, "The method overload is selected at compile-time."], [0, "Boxing of the arguments will be performed, when necessary."], [0, "Unboxing of the arguments will be performed, when necessary."], [0, "Coercion of the arguments will be performed, when necessary."], [0, "Remember, a function is technically a static method."], [0, "Return Type: [return-type of the selected method overload]"], [0, "Return the value returned by the invoked method."]], "static-checks" : [["NO_SUCH_TYPE", "The type specified by <i><i>owner</i></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i><i>owner</i></i> must be accessible.", "null"], ["EXPECTED_DECLARED_TYPE", "The type specified by <i>owner</i> must be a declared-type.", "null"], ["NO_SUCH_METHOD", "No acceptable method overload was found.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    (call My::printNumber 17);%0A%0A    (My::printNumber 23);%0A}%0A%0Adefun printNumber (x : int) : void%0A{%0A    (F::println %22x = %22 .. x);%0A}", "x = 17%0Ax = 23"] }