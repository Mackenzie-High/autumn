{ "summary" : "An assume-statement enforces an invariant.", "ast" : "autumn.lang.compiler.ast.nodes.AssertStatement", "syntax" : [[0, "<span class=\"keyword\">assume</span> <i><a href=\"TextPage.html?page=Expression\">condition</a></i> ;"], [0, "<hr class=&#92%22syntax-hr&#92%22>"], [0, "<span class=\"keyword\">assume</span> <i><a href=\"TextPage.html?page=Expression\">condition</a></i> <span class=\"keyword\">echo</span> <i><a href=\"TextPage.html?page=Expression\">message</a></i> ;"]], "details" : [[0, "Unlike an <a href=\"ConstructPage.html?construct=Assert Statement\">Assert Statement</a>, assume-statements can be disabled."], [1, "By default, assume-statements are enabled."], [1, "If assume-statements are disabled:"], [2, "The runtime simply ignores all assume-statements."], [2, "The <i>condition</i> is not evaluated."], [2, "The <i>message</i> is not evaluated."], [1, "To enable assume-statements use: <a href=\"http://www.mackenziehigh.me/autumn/javadoc/autumn/lang/compiler/Autumn.html#enableAssume()e\">enableAssume()</a>"], [1, "To disable assume-statements use: <a href=\"http://www.mackenziehigh.me/autumn/javadoc/autumn/lang/compiler/Autumn.html#disableAssume()\">disableAssume()</a>"], [0, "If the <i>condition</i> evaluates to false, then an <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/exceptions/AssumptionFailedException.html\">AssumptionFailedException</a> will be thrown."], [0, "If the <i>condition</i> evaluates to true, then execution simply continues onward."], [0, "The <i>condition</i> will be unboxed, if necessary."]], "static-checks" : [["EXPECTED_CONDITION", "The type of <i><i>condition</i></i> must be assignable to type boolean.", "null"], ["EXPECTED_STRING", "The type of <i>message</i> must be assignable to type java.lang.String.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    Autumn::enableAssume();%0A%0A    Main::irs(-1000);%0A    Main::irs(-1000);%0A    Main::irs(-2000);%0A    Main::irs(-3000);%0A%0A    Main::irs(1000);%0A    Main::irs(1000);%0A    Main::irs(2000);%0A    Main::irs(3000);%0A%0A    Autumn::disableAssume();%0A%0A    Main::irs(-1000);%0A    Main::irs(-1000);%0A    Main::irs(-2000);%0A    Main::irs(-3000);%0A%0A    Main::irs(1000);%0A    Main::irs(1000);%0A    Main::irs(2000);%0A    Main::irs(3000);%0A}%0A%0Adefun irs (income : int) : void%0A{%0A    try%0A    {%0A        F::println(%22Income = %22 .. income);%0A%0A        val taxes = My::tax(income);%0A%0A        F::println(%22Taxes = %22 .. taxes);%0A    }%0A    catch (ex : AssumptionFailedException)%0A    {%0A        F::println(%22Error - Tax Computation Failed%22);%0A    }%0A%0A    F::println();%0A}%0A%0Adefun tax (income : int) : int%0A{%0A    assume income >= 0;%0A%0A    # Flat Tax of 25&#37;.%0A    return income / 4; %0A}", "Income = -1000%0AError - Tax Computation Failed%0A%0AIncome = -1000%0AError - Tax Computation Failed%0A%0AIncome = -2000%0AError - Tax Computation Failed%0A%0AIncome = -3000%0AError - Tax Computation Failed%0A%0AIncome = 1000%0ATaxes = 250%0A%0AIncome = 1000%0ATaxes = 250%0A%0AIncome = 2000%0ATaxes = 500%0A%0AIncome = 3000%0ATaxes = 750%0A%0AIncome = -1000%0ATaxes = -250%0A%0AIncome = -1000%0ATaxes = -250%0A%0AIncome = -2000%0ATaxes = -500%0A%0AIncome = -3000%0ATaxes = -750%0A%0AIncome = 1000%0ATaxes = 250%0A%0AIncome = 1000%0ATaxes = 250%0A%0AIncome = 2000%0ATaxes = 500%0A%0AIncome = 3000%0ATaxes = 750"], "example-2" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    Autumn::enableAssume();%0A%0A    for (i = 1; i <= 9; i + 1)%0A    {%0A        try%0A        {%0A            My::oddSquare(i);%0A        }%0A        catch (ex : AssumptionFailedException)%0A        {%0A            F::println(%22Error - %22 .. ex.getMessage());%0A        }%0A    }%0A}%0A%0Adefun oddSquare (n : int) : void%0A{%0A    assume n &#37; 2 == 0 echo (n .. %22 is even.%22);%0A%0A    F::println(n .. %22 => %22 .. n * n);%0A}", "Error - 1 is even.%0A2 => 4%0AError - 3 is even.%0A4 => 16%0AError - 5 is even.%0A6 => 36%0AError - 7 is even.%0A8 => 64%0AError - 9 is even."] }