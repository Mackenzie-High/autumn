{ "summary" : "A new-expression creates a new instance of a specified class-type.", "ast" : "autumn.lang.compiler.ast.nodes.NewExpression", "syntax" : [[0, "( <span class=\"keyword\">new</span> <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i> <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"]], "details" : [[0, "The constructor overload will be selected using the <a href=\"TextPage.html?page=Resolution\">Constructor Resolution Algorithm</a>."], [0, "The constructor overload is selected at compile-time."], [0, "Boxing of the arguments will be performed, when necessary."], [0, "Unboxing of the arguments will be performed, when necessary."], [0, "Coercion of the arguments will be performed, when necessary."], [0, "Return Type: type of <i>type</i>"], [0, "Return a new instance of the <i>type</i>."]], "static-checks" : [["NO_SUCH_TYPE", "The type specified by <i><i>type</i></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i><i>type</i></i> must be accessible.", "null"], ["EXPECTED_CLASS_TYPE", "The <i>type</i> must be a class-type.", "null"], ["NO_SUCH_CONSTRUCTOR", "No acceptable constructor overload was found.", "null"]], "example-1" : [1, "module Main in examples;%0A%0Atuple Pet (type : String, name : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val animal1 = (new Pet %22Sheep%22, %22Eyeball%22);%0A%0A    val animal2 = (new Pet %22German Shepherd%22, %22Jet%22);%0A%0A    val animal3 = (new Pet %22Cat%22, %22Fluffy%22);%0A%0A    (F::printlns [animal1, animal2, animal3]);%0A}", "(Sheep, Eyeball)%0A(German Shepherd, Jet)%0A(Cat, Fluffy)"] }