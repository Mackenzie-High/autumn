{ "summary" : "An as-operation converts a value to another type.", "ast" : "autumn.lang.compiler.ast.nodes.AsOperation", "syntax" : [[0, "<i>value</i> <span class=\"keyword\">as</span> <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i>"]], "details" : [[0, "Precedence: 9"], [0, "For every conversion provided by this operation, there is a similar conversion provided by the is-operation."], [1, "More formally, as-operations are symmetric to is-operations."], [0, "Predefined Conversions"], [1, "Boxing Conversions"], [2, "boolean &#8614; Boolean"], [2, "char &#8614; Character"], [2, "byte &#8614; Byte"], [2, "short &#8614; Short"], [2, "int &#8614; Integer"], [2, "long &#8614; Long"], [2, "float &#8614; Float"], [2, "double &#8614; Double"], [2, "boolean &#8614; Object"], [2, "char &#8614; Object"], [2, "byte &#8614; Object"], [2, "short &#8614; Object"], [2, "int &#8614; Object"], [2, "long &#8614; Object"], [2, "float &#8614; Object"], [2, "double &#8614; Object"], [1, "Unboxing Conversions"], [2, "Boolean &#8614; boolean"], [2, "Character &#8614; char"], [2, "Byte &#8614; byte"], [2, "Short &#8614; short"], [2, "Integer &#8614; int"], [2, "Long &#8614; long"], [2, "Float &#8614; float"], [2, "Double &#8614; double"], [1, "To String Conversions"], [2, "boolean &#8614; String"], [2, "char &#8614; String"], [2, "byte &#8614; String"], [2, "short &#8614; String"], [2, "int &#8614; String"], [2, "long &#8614; String"], [2, "float &#8614; String"], [2, "double &#8614; String"], [2, "Object &#8614; String"], [1, "Primitive To Primitive Conversions"], [2, "boolean &#8614; boolean"], [2, "boolean &#8614; char"], [2, "boolean &#8614; byte"], [2, "boolean &#8614; short"], [2, "boolean &#8614; int"], [2, "boolean &#8614; long"], [2, "boolean &#8614; float"], [2, "boolean &#8614; double"], [2, "char &#8614; boolean"], [2, "char &#8614; char"], [2, "char &#8614; byte"], [2, "char &#8614; short"], [2, "char &#8614; int"], [2, "char &#8614; long"], [2, "char &#8614; float"], [2, "char &#8614; double"], [2, "byte &#8614; boolean"], [2, "byte &#8614; char"], [2, "byte &#8614; byte"], [2, "byte &#8614; short"], [2, "byte &#8614; int"], [2, "byte &#8614; long"], [2, "byte &#8614; float"], [2, "byte &#8614; double"], [2, "short &#8614; boolean"], [2, "short &#8614; char"], [2, "short &#8614; byte"], [2, "short &#8614; short"], [2, "short &#8614; int"], [2, "short &#8614; long"], [2, "short &#8614; float"], [2, "short &#8614; double"], [2, "int &#8614; boolean"], [2, "int &#8614; char"], [2, "int &#8614; byte"], [2, "int &#8614; short"], [2, "int &#8614; int"], [2, "int &#8614; long"], [2, "int &#8614; float"], [2, "int &#8614; double"], [2, "long &#8614; boolean"], [2, "long &#8614; char"], [2, "long &#8614; byte"], [2, "long &#8614; short"], [2, "long &#8614; int"], [2, "long &#8614; long"], [2, "long &#8614; float"], [2, "long &#8614; double"], [2, "float &#8614; boolean"], [2, "float &#8614; char"], [2, "float &#8614; byte"], [2, "float &#8614; short"], [2, "float &#8614; int"], [2, "float &#8614; long"], [2, "float &#8614; float"], [2, "float &#8614; double"], [2, "double &#8614; boolean"], [2, "double &#8614; char"], [2, "double &#8614; byte"], [2, "double &#8614; short"], [2, "double &#8614; int"], [2, "double &#8614; long"], [2, "double &#8614; float"], [2, "double &#8614; double"], [0, "Resolution of a Predefined Conversion (X => T):"], [1, "Sort the predefined conversions from most specific to most abstract."], [1, "Remove the conversions where the output is not type T."], [1, "For each remaining conversion C:"], [2, "If X is a subtype of the input type of C, then C is the conversion to select."], [1, "No predefined conversion was found, so the conversion is a cast."], [0, "A cast (X => T) is impossible when both:"], [1, "X is not a supertype of T"], [1, "X is not a subtype of T"], [0, "Return Type: <i>type</i>"], [0, "Return the result of the predefined conversion or cast."], [0, "If the conversion is an unsuccessful cast, then null is returned."]], "static-checks" : [["NO_SUCH_TYPE", "The type specified by <i>type</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>type</i> must be accessible.", "null"], ["IMPOSSIBLE_CONVERSION", "The conversion must be either predefined or a valid cast.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Case: Predefined Conversion (int ==> char). %0A    val value1 = 65 as char;%0A%0A    # Generalized Input%0A    val input = %22Mars%22 is Object;%0A%0A    # Case: Successful Cast%0A    val value2 = input as CharSequence;%0A%0A    # Case: Unsuccessful Cast%0A    val value3 = input as List;%0A%0A    # Print the results.%0A    F::println(%22Case 1: %22 .. value1);%0A    F::println(%22Case 2: %22 .. value2);%0A    F::println(%22Case 3: %22 .. value3);%0A}", "Case 1: A%0ACase 2: Mars%0ACase 3: null"] }