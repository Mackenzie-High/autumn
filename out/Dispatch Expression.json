{ "summary" : "A dispatch-expression dispatches an invocation to a nearby function using multiple dispatch.", "ast" : "autumn.lang.compiler.ast.nodes.DispatchExpression", "syntax" : [[0, "<span class=\"keyword\">dispatch</span> <a href=\"ConstructPage.html?construct=Name\">name</a> ( <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"]], "details" : [[0, "The potentially applicable function overloads will be selected statically."], [1, "The overloads will be sorted topologically from the most specific to the most generalized."], [1, "An overload is not applicable, if it takes a non reference-type parameter."], [1, "An overload is not applicable, if its return-type is not either a reference-type or the void-type."], [2, "If the return-type of an overload is the void-type, then the overload will appear to return null."], [0, "At runtime, the overload to invoke is selected as follows:"], [1, "Let A<sub>1</sub> ... A<sub>n</sub> denote the arguments."], [1, "Select the first overload from the sorted list of overloads, where each argument matches the related parameter."], [2, "Let P<sub>1</sub> ... P<sub>n</sub> denote the types of an overload's parameters."], [3, "A<sub>i</sub> matches P<sub>i</sub>, iff:"], [3, "A<sub>i</sub> is null."], [3, "A<sub>i</sub> is an instance of P<sub>i</sub>."], [0, "Boxing of the arguments will be performed, when necessary."], [0, "Unboxing of the arguments will not be performed."], [0, "Coercion of the arguments will not be performed."], [0, "Return Type: <a href='https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html'>Object</a>"], [1, "If the return-type of the dynamically selected overload is the void-type, then return null."], [1, "Otherwise, return the value returned by invoking the dynamically selected overload."], [0, "A <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/exceptions/DispatchException.html\">DispatchException</a> will be thrown, if none of the selected overloads will accept the arguments at runtime."]], "static-checks" : [["NO_SUCH_METHOD", "No applicable function overload(s) exist.", "null"]], "example-1" : ["module Main in execution;%0A%0Adesign Animal (name : String);%0A%0Atuple Cat (name : String) extends Animal;%0A%0Atuple Dog (name : String) extends Animal;%0A%0Atuple Cow (name : String) extends Animal;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create some animals. %0A    val owner_1 = new Cat(%22Fluffy%22);%0A    val owner_2 = new Dog(%22Jet%22);%0A    val owner_3 = new Cow(%22Moo%22);%0A%0A    # Print a description of each animal. %0A    My::describe(owner_1);%0A    My::describe(owner_2);%0A    My::describe(owner_3);%0A}%0A%0Adefun describe (owner : Animal) : void%0A{%0A    val message = dispatch about (owner) is String;%0A%0A    F::println(message);%0A}%0A%0Adefun about (owner : Cat) : String%0A{%0A    return %22Cat: %22 .. owner.name();%0A}%0A%0Adefun about (owner : Dog) : String%0A{%0A    return %22Dog: %22 .. owner.name();%0A}%0A%0Adefun about (owner : Cow) : String%0A{%0A    return %22Cow: %22 .. owner.name();%0A}", "Cat: Fluffy%0ADog: Jet%0ACow: Moo"], "example-2" : ["module Main in execution;%0A%0Adesign Animal (name : String);%0A%0Atuple Cat (name : String) extends Animal;%0A%0Atuple Dog (name : String) extends Animal;%0A%0Atuple Cow (name : String) extends Animal;%0A%0Atuple AnimalHouse (owner : Animal, area : int);%0A%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Create some animals. %0A    val owner_1 = new Cat(%22Fluffy%22);%0A    val owner_2 = new Dog(%22Jet%22);%0A    val owner_3 = new Cow(%22Moo%22);%0A%0A    # Place them in appropriately sized houses.%0A    My::provideHome(owner_1);%0A    My::provideHome(owner_2);%0A    My::provideHome(owner_3);%0A}%0A%0Adefun provideHome (owner : Animal) : void%0A{%0A    val house = dispatch create (owner) is AnimalHouse;%0A%0A    F::println(%22Home Owner: %22 .. owner.name());%0A    F::println(%22Home Size:  %22 .. house.area());%0A    F::println();%0A}%0A%0Adefun create (owner : Cat) : AnimalHouse%0A{%0A    # Assume that a cat needs a 25 sqft. house. %0A    return new AnimalHouse(owner, 5 * 5);%0A}%0A%0Adefun create (owner : Dog) : AnimalHouse%0A{%0A    # Assume that a dog needs a 100 sqft. house. %0A    return new AnimalHouse(owner, 10 * 10);%0A}%0A%0Adefun create (owner : Cow) : AnimalHouse%0A{%0A    # Assume that a cow needs a 2500 sqft. house. %0A    return new AnimalHouse(owner, 50 * 50);%0A}", "Home Owner: Fluffy%0AHome Size:  25%0A%0AHome Owner: Jet%0AHome Size:  100%0A%0AHome Owner: Moo%0AHome Size:  2500"] }