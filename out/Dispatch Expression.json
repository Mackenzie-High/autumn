{ "summary" : "A dispatch-expression dispatches an invocation to a nearby function using multiple dispatch.", "ast" : "autumn.lang.compiler.ast.nodes.DispatchExpression", "syntax" : [[E-32, "<span class=\"keyword\">dispatch</span> <a href=\"ConstructPage.html?construct=Name\">name</a> ( <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>1</sub></i> , ... , <i><a href=\"TextPage.html?page=Expression\">argument</a><sub>n</sub></i> )"]], "details" : [[E-32, "The possible function overloads will be selected statically using the $Dispatch Resolution Algorithm$."], [1, "The overloads will be sorted topologically from the most specific to the most generalized."], [1, "Only overloads whose parameters are all reference-types are applicable for selection."], [1, "The enclosing function is not applicable for selection, because this would too easily result in infinitely recursive code."], [E-32, "At runtime, the overload to execute is selected as follows."], [1, "Let A<sub>1</sub> ... A<sub>n</sub> denote the arguments."], [1, "Select the first overload from the sorted list of overloads, where each argument matches the related parameter."], [2, "Let P<sub>1</sub> ... P<sub>n</sub> denote the types of an overload's parameters."], [3, "A<sub>i</sub> matches P<sub>i</sub>, iff:"], [3, "A<sub>i</sub> is null."], [3, "A<sub>i</sub> is an instance of P<sub>i</sub>."], [E-32, "Return Type:"], [1, "Let R<sub>1</sub> ... R<sub>n</sub> be the return-types of the selected method overloads."], [1, "Let S denote the return-type of the dispatch-expression itself."], [2, "If R<sub>x</sub> equals R<sub>y</sub> ∀ (x, y), then S is R<sub>x</sub>."], [2, "If R<sub>x</sub> is not equal to R<sub>y</sub> ∃ (x, y), then S is <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\">Object</a>."], [3, "This implies that the return-types of some of the overloads will may need to be automatically boxed."], [E-32, "Return the value returned by invoking the dynamically selected method overload."], [E-32, "A XXX exception will be thrown, if none of the selected overloads will accept the arguments at runtime."]], "static-checks" : [["NO_SUCH_TYPE", "The type specified by <i><i>module</i></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i><i>module</i></i> must be accessible.", "null"], ["VALUE_REQUIRED", "The type of each <i>argument</i> must be either a primitive-type or a reference-type.", "null"], ["NO_SUCH_METHOD", "No acceptable method overload was found.", "null"]] }