{ "summary" : "An annotation-definition creates a new annotation-type in the enclosing package.", "ast" : "autumn.lang.compiler.ast.nodes.AnnotationDefinition", "syntax" : [[0, "@<i>annotation<sub>1</sub></i>"], [0, "@<i>annotation<sub>2</sub></i>"], [0, "@<i>annotation<sub>n</sub></i>"], [0, "<span class=\"keyword\">annotation</span> <i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ;"]], "details" : [[0, "Regarding the annotation-type T defined by a definition:"], [1, "T is <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Modifier.html#PUBLIC\">public</a>."], [1, "T is a subtype of class <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html\">Object</a>."], [1, "T is a subtype of interface <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html\">Annotation</a>."], [1, "T has a <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/RetentionPolicy.html\">RetentionPolicy</a> of RUNTIME."], [1, "T does not declare any fields."], [1, "T does not declare any constructors."], [1, "T declares a single method."], [2, "The name of the method is 'value'."], [2, "The method does not take any formal-parameters."], [2, "The return-type of the method is <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/String.html\">String</a>[]."], [2, "The method is an annotation-method."], [0, "The <a href='http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/internals/annotations/AnnotationDefinition.html'>AnnotationDefinition</a> annotation is automatically applied."]], "static-checks" : [["DUPLICATE_ANNOTATION", "Each annotation in an annotation-list must be uniquely typed.", "null"], ["DUPLICATE_TYPE", "No two types can share the same descriptor.", "null"]], "example-1" : ["module Main in examples;%0A%0Aannotation Alien;%0A%0A@Alien%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val owner = (class Main);%0A    val name = %22main%22;%0A    val params = [ (class String[]) ];%0A%0A    val func = Reflect::getMethod(owner, name, params);%0A%0A    val applied = func.isAnnotationPresent((class Alien));%0A%0A    F::println(%22@Alien Present = %22 .. applied);%0A}", "Warning: NO_SUCH_TYPE%0A  File: file:/media/disk/Code/EclipseProjects/AutumnSpecification/autumn/examples/E0052/project/src/Main.leaf%0A  Line: #13%0A  Column: #16%0A  Message: The specified type does not exist.%0A  Type: Reflect%0A%0AWarning: NO_SUCH_VARIABLE%0A  File: file:/media/disk/Code/EclipseProjects/AutumnSpecification/autumn/examples/E0052/project/src/Main.leaf%0A  Line: #15%0A  Column: #19%0A  Message: A variable was used before it was declared.%0A  Variable: func%0A%0AWarning: NO_SUCH_VARIABLE%0A  File: file:/media/disk/Code/EclipseProjects/AutumnSpecification/autumn/examples/E0052/project/src/Main.leaf%0A  Line: #17%0A  Column: #39%0A  Message: A variable was used before it was declared.%0A  Variable: applied"], "example-2" : ["module Main in examples;%0A%0Aimport java.lang.reflect.Modifier;%0A%0Aannotation Alien;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val klass = (class Alien);%0A%0A    val modifiers = Modifier::toStringklass().getModifiers();%0A%0A    F::println(%22Name = %22 .. klass.getName());%0A%0A    F::println(%22Annotation? = %22 .. klass.isAnnotation());%0A%0A    F::println(%22Modifiers = %22 .. modifiers);%0A}", "Warning: NO_SUCH_METHOD%0A  File: file:/media/disk/Code/EclipseProjects/AutumnSpecification/autumn/examples/E0051/project/src/Main.leaf%0A  Line: #12%0A  Column: #21%0A  Message: No acceptable method overload was found.%0A  Invocation: Modifier::toStringklass()%0A%0AWarning: NO_SUCH_VARIABLE%0A  File: file:/media/disk/Code/EclipseProjects/AutumnSpecification/autumn/examples/E0051/project/src/Main.leaf%0A  Line: #18%0A  Column: #34%0A  Message: A variable was used before it was declared.%0A  Variable: modifiers"] }