{ "summary" : "A try-statement provides a mechanism for catching exceptions.", "ast" : "autumn.lang.compiler.ast.nodes.TryCatchStatement", "syntax" : [[0, "<span class=\"keyword\">try</span>"], [0, "{"], [1, "<i><a href=\"TextPage.html?page=Statement\">body</a></i>"], [0, "}"], [0, "<span class=\"keyword\">catch</span> ( <i><a href=\"ConstructPage.html?construct=Variable\">variable</a><sub>1</sub></i> : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a><sub>1</sub></i> )<sub>1</sub>"], [0, "{"], [1, "<i><a href=\"TextPage.html?page=Statement\">handler</a><sub>1</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">catch</span> ( <i><a href=\"ConstructPage.html?construct=Variable\">variable</a><sub>2</sub></i> : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a><sub>2</sub></i> )<sub>2</sub>"], [0, "{"], [1, "<i><a href=\"TextPage.html?page=Statement\">handler</a><sub>2</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">catch</span> ( <i><a href=\"ConstructPage.html?construct=Variable\">variable</a><sub>n</sub></i> : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a><sub>n</sub></i> )<sub>n</sub>"], [0, "{"], [1, "<i><a href=\"TextPage.html?page=Statement\">handler</a><sub>n</sub></i>"], [0, "}"]], "details" : [[0, "Exceptions can be thrown using a <a href=\"ConstructPage.html?construct=Throw Statement\">Throw Statement</a>, <a href=\"ConstructPage.html?construct=Assert Statement\">Assert Statement</a>, etc."], [0, "At least one handler is syntactically required."], [0, "An exception will only be caught when an applicable handler is available."], [1, "A handler is applicable when the exception's type is a subtype of the handler's <i>type</i>."], [0, "The scope of the <i><i>variable<sub>i</sub></i></i> is anywhere in the enclosing function."], [0, "The <i><i>variable<sub>i</sub></i></i> is alive precisely during an activation of the enclosing function."], [0, "The compiler will automatically reorder the handlers based on their specificity."], [1, "Reordering ensures that the handler that best matches an exception will be used to handle it."], [1, "A handler <i>X</i> is more specific than a handler <i>Y</i>, if <i>type<sub>X</sub></i> is a subclass of <i>type<sub>Y</sub></i>."]], "static-checks" : [["DUPLICATE_VARIABLE", "The <i><i>variable<sub>i</sub></i></i> cannot share its name with another variable declared in the same scope.", "null"], ["NO_SUCH_TYPE", "The type specified by <i><i>type<sub>i</sub></i></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i><i>type<sub>i</sub></i></i> must be accessible.", "null"], ["EXPECTED_THROWABLE", "Each <i>type<sub>i</sub></i> must be a subtype of <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html\">Throwable</a>.", "null"], ["DUPLICATE_EXCEPTION_HANDLER", "No two handlers can catch exactly the same type.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    for (i = 1; i < 9; i + 1)%0A    {%0A        try%0A        {%0A            # This invocation throws an exception,%0A            # whenever the argument is an even number. %0A            My::oddCube(i);%0A        }%0A        catch (ex : IllegalArgumentException)%0A        {%0A            # Handle the exception, by issuing an error message. %0A            F::println (%22Error: %22 .. i .. %22 is even.%22);%0A        }%0A    }%0A}%0A%0Adefun oddCube(x : int) : void%0A{%0A    if (x &#37; 2 == 0)%0A    {%0A        # Since the argument is even, throw an exception.%0A        throw new IllegalArgumentException();%0A    }%0A    else%0A    {%0A        # Print the argument and its cube. %0A        F::println(x .. %22 => %22 .. x * x * x);%0A    }%0A}", "1 => 1%0AError: 2 is even.%0A3 => 27%0AError: 4 is even.%0A5 => 125%0AError: 6 is even.%0A7 => 343%0AError: 8 is even."], "example-2" : ["module Main in examples;%0A%0Aexception Disaster extends RuntimeException;%0A%0Aexception Invasion extends Disaster;%0A%0Aexception NaturalDisaster extends Disaster;%0A%0Aexception Asteroid extends NaturalDisaster;%0A%0Aexception Storm extends NaturalDisaster;%0A%0Aexception Tornado extends Storm;%0A%0Aexception Hurricane extends Storm;%0A%0Aexception Volcano extends NaturalDisaster;%0A%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    Main::fema(1);%0A    Main::fema(2);%0A    Main::fema(3);%0A    Main::fema(4);%0A    Main::fema(5);%0A    Main::fema(6);%0A}%0A%0Adefun fema (n : int) : void%0A{%0A    try %0A    {%0A        F::println (%22Day %22 .. n);%0A%0A        My::world(n);%0A%0A        F::println(%22Good. No Disaster.%22);%0A    }%0A    catch (natural : NaturalDisaster)%0A    {%0A        F::println (%22Handle Natural Disaster - %22 .. natural.getClass());%0A    }%0A    catch (storm : Storm)%0A    {%0A        F::println (%22Handle Storm - %22 .. storm.getClass());%0A    }%0A    catch (disaster : Disaster)%0A    {%0A        F::println (%22Handle Disaster - %22 .. disaster.getClass());%0A    }%0A%0A    F::println();%0A}%0A%0Adefun world (x : int) : void%0A{%0A    when (x == 1) then throw new Asteroid();%0A%0A    when (x == 2) then throw new Invasion();%0A%0A    when (x == 3) then throw new Hurricane();%0A%0A    when (x == 4) then throw new Tornado();%0A%0A    when (x == 5) then throw new Volcano();%0A}", "Day 1%0AHandle Natural Disaster - class examples.Asteroid%0A%0ADay 2%0AHandle Disaster - class examples.Invasion%0A%0ADay 3%0AHandle Storm - class examples.Hurricane%0A%0ADay 4%0AHandle Storm - class examples.Tornado%0A%0ADay 5%0AHandle Natural Disaster - class examples.Volcano%0A%0ADay 6%0AGood. No Disaster."], "example-3" : ["module Main in examples;%0A%0Aexception Disaster extends RuntimeException;%0A%0Aexception BankRun extends Disaster;%0A%0Aexception CivilUnrest extends Disaster;%0A%0Aexception Invasion extends Disaster;%0A%0Aexception Tornado extends Disaster;%0A%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    Main::goverment(1);%0A    Main::goverment(2);%0A    Main::goverment(3);%0A    Main::goverment(4);%0A    Main::goverment(5);%0A}%0A%0Adefun goverment (n : int) : void%0A{%0A    try%0A    {%0A        F::println(%22Day %22 .. n);%0A%0A        My::fema(n);%0A%0A        F::println(%22Pander for votes.%22);%0A    }%0A    catch (problem1 : BankRun)%0A    {%0A        F::println(%22Issue Banker Bailout.%22);%0A    }%0A    catch (problem2 : Disaster)%0A    {%0A        F::println(%22Handle Disaster - %22 .. problem2.getClass());%0A    }%0A%0A    F::println();%0A}%0A%0Adefun fema (n : int) : void%0A{%0A    try %0A    {%0A        My::world(n);%0A    }%0A    catch (tornado : Tornado)%0A    {%0A        F::println (%22Handle Tornado.%22);%0A    }%0A}%0A%0Adefun world (x : int) : void%0A{%0A    when (x == 1) then throw new BankRun();%0A%0A    when (x == 2) then throw new CivilUnrest();%0A%0A    when (x == 3) then throw new Invasion();%0A%0A    when (x == 4) then throw new Tornado();%0A}", "Day 1%0AIssue Banker Bailout.%0A%0ADay 2%0AHandle Disaster - class examples.CivilUnrest%0A%0ADay 3%0AHandle Disaster - class examples.Invasion%0A%0ADay 4%0AHandle Tornado.%0APander for votes.%0A%0ADay 5%0APander for votes."] }