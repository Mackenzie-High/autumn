{ "summary" : "A continue-statement causes execution to immediately enter the next iteration of the nearest enclosing loop.", "ast" : "autumn.lang.compiler.ast.nodes.ContinueStatement", "syntax" : [[0, "<span class=\"keyword\">continue</span> ;"]], "details" : [[0, "A continue-statement cannot be used to exit an invocation."], [0, "Types of Loops:"], [1, "<a href=\"ConstructPage.html?construct=Forever Statement\">Forever Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=While Statement\">While Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Until Statement\">Until Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Do-While Statement\">Do-While Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Do-Until Statement\">Do-Until Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=For Statement\">For Statement</a>s"], [1, "<a href=\"ConstructPage.html?construct=Foreach Statement\">Foreach Statement</a>s"]], "static-checks" : [["CONTINUE_OUTSIDE_OF_LOOP", "A continue-statement must be in the <i>body</i> of a loop.", "null"]], "example-1" : [1, "module Main in examples;%0A%0Aimport java.util.LinkedList;%0A%0Atuple Pet (kind : String, name : String);%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val barn = (new LinkedList);%0A%0A    (barn.add (new Pet %22Chicken%22, %22Chicky%22)); %0A    (barn.add (new Pet %22Chicken%22, %22Picky%22));%0A    (barn.add (new Pet %22Dog%22,     %22Jet%22));%0A    (barn.add (new Pet %22Chicken%22, %22Sikorsky%22));%0A    (barn.add (new Pet %22Cat%22,     %22Fluffy%22));%0A    (barn.add (new Pet %22Sheep%22,   %22Eyeball%22));%0A    (barn.add (new Pet %22Chicken%22, %22Lucky%22));%0A%0A    foreach (pet : Pet in barn)%0A    {%0A        when ((pet.kind) != %22Chicken%22) then continue;%0A%0A        (F::println %22Name of Chicken: %22 .. (pet.name));%0A    }%0A}", "Name of Chicken: Chicky%0AName of Chicken: Picky%0AName of Chicken: Sikorsky%0AName of Chicken: Lucky"], "example-2" : [2, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    var i = 0;%0A%0A    while (i < 5)%0A    {%0A        i = i + 1;%0A%0A        when (i == 3) then continue;%0A%0A        (F::println %22i = %22 .. i);%0A    }%0A}", "i = 1%0Ai = 2%0Ai = 4%0Ai = 5"] }