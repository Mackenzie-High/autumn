{ "summary" : "An annotation allows metadata to be applied to a module, function, etc.", "ast" : "autumn.lang.compiler.ast.nodes.Annotation", "syntax" : [[0, "@<i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i>"], [0, "<hr class=&#92%22syntax-hr&#92%22>"], [0, "@<i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i> ( <i><a href=\"ConstructPage.html?construct=String Datum\">string</a><sub>1</sub></i> , ... , <i><a href=\"ConstructPage.html?construct=String Datum\">string</a><sub>n</sub></i> )"]], "details" : [], "static-checks" : [], "example-1" : ["module Main in execution;%0A%0A/// This is the definition of a new annotation type. %0A/// %0Aannotation Location;%0A%0A%0A%0A/// This function has three annotations applied to it. %0A@Author (%22Mackenzie High%22)%0A@Location (%22United States%22 , %22Virginia%22)%0A@Hide%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # Get this function. %0A    val function = F::findMethod(class Main, %22main%22, [class String[]]);%0A%0A    # Get the author and location annotations that are applied thereto. %0A    val anno1 = F::findAnnotation(function, class Author);%0A    val anno2 = F::findAnnotation(function, class Location);%0A%0A    # Retrieve the information about the author. %0A    val name = F::get(anno1, 0);%0A    val country = F::get(anno2, 0);%0A    val state = F::get(anno2, 1);%0A%0A    # Print the information to standard-output. %0A    F::println(%22Author: %22 .. name);%0A    F::println(%22Country: %22 .. country);%0A    F::println(%22State: %22 .. state);%0A}", "Author: Mackenzie High%0ACountry: United States%0AState: Virginia"] }