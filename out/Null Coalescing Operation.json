{ "summary" : "A null-coalescing provides an alternate value when a primary value is null.", "ast" : "autumn.lang.compiler.ast.nodes.NullCoalescingOperation", "syntax" : [[0, "<i><a href=\"TextPage.html?page=Expression\">left</a></i> ?? <i><a href=\"TextPage.html?page=Expression\">right</a></i>"]], "details" : [[0, "Precedence: 8"], [0, "Associativity: Left"], [0, "The left-operand is always evaluated."], [0, "The right-operand is only evaluated when the left-operand produces null."], [0, "Return Type: widest(typeof(<i>left</i>), typeof(<i>right</i>))"], [0, "Return the left-operand, if the value is not null; otherwise, the right-operand."]], "static-checks" : [["EXPECTED_REFERENCE_TYPE", "The type of the left-operand must be a reference-type.", "null"], ["EXPECTED_REFERENCE_TYPE", "The type of the right-operand must be a reference-type.", "null"], ["INCOMPATIBLE_OPERANDS", "The type of one of the operands must be a subtype of the other.", "null"]], "example-1" : [1, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val value1 = %22Mercury%22;%0A    val value2 = %22Venus%22;%0A    val value3 = %22Earth%22;%0A%0A    # Case: The left operand is non-null.%0A    val value4 = (value1 ?? value2) is String;%0A%0A    # Case: The left-operand is null.%0A    val value5 = (null ?? value3) is String;%0A%0A    # Case: Both operands are null.%0A    val value6 = (null ?? null) is String;%0A%0A    # Print the results.%0A    (F::println value4);%0A    (F::println value5);%0A    (F::println value6);%0A}", "Mercury%0AEarth%0Anull"], "example-2" : [2, "module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val value1 = null is Object;%0A    val value2 = %22Not Null%22; %0A%0A    (F::print %22Case 1: %22);%0A    (My::operand1 value1) ?? (My::operand2 value1);%0A    (F::println);%0A%0A    (F::print %22Case 2: %22);%0A    (My::operand1 value1) ?? (My::operand2 value2);%0A    (F::println);%0A%0A    (F::print %22Case 3: %22);%0A    (My::operand1 value2) ?? (My::operand2 value1);%0A    (F::println);%0A%0A    (F::print %22Case 4: %22);%0A    (My::operand1 value2) ?? (My::operand2 value2);%0A    (F::println);%0A}%0A%0Adefun operand1(value : Object) : Object%0A{%0A    (F::print %22L%22);%0A    return value;%0A}%0A%0Adefun operand2(value : Object) : Object%0A{%0A    (F::print %22R%22);%0A    return value;%0A}", "Case 1: LR%0ACase 2: LR%0ACase 3: L%0ACase 4: L"] }