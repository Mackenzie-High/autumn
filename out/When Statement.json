{ "summary" : "A when-statement makes the execution of another statement conditional.", "ast" : "autumn.lang.compiler.ast.nodes.WhenStatement", "syntax" : [[0, "<span class=\"keyword\">when</span> ( <i><a href=\"TextPage.html?page=Expression\">condition</a></i> ) <span class=\"keyword\">then</span> <i><a href=\"TextPage.html?page=Statement\">statement</a></i>"]], "details" : [[0, "The condition will be unboxed, if necessary."], [0, "The statement will be executed, only if the <i>condition</i> produces true."], [0, "The <i>condition</i> will be unboxed, if necessary."]], "static-checks" : [["EXPECTED_CONDITION", "The type of <i><i>condition</i></i> must be assignable to type boolean.", "T0019"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    My::write(%22Europa%22, false);%0A    My::write(%22Titan%22, false);%0A    My::write(%22Ceres%22, false);%0A    My::write(%22Mimas%22, false);%0A%0A    My::write(%22Mercury%22, true);%0A    My::write(%22Venus%22, true);%0A    My::write(%22Earth%22, true);%0A    My::write(%22Mars%22, true);%0A}%0A%0Adefun write(name : String, planet : boolean) : void%0A{%0A    when (planet) then F::println(name .. %22 is a planet.%22);%0A}", "Mercury is a planet.%0AVenus is a planet.%0AEarth is a planet.%0AMars is a planet."], "example-2" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val emma = 5000;%0A    val elle = 23000;%0A    val evie = 127000;%0A    val erin = 230000;%0A%0A    My::write(%22Emma%22, emma);%0A    My::write(%22Elle%22, elle);%0A    My::write(%22Evie%22, evie);%0A    My::write(%22Erin%22, erin);%0A}%0A%0Adefun write(name : String, income : int) : void%0A{%0A    val tax = My::tax(income);%0A%0A    F::println(name .. %22's Tax = %22 .. tax);%0A}%0A%0Adefun tax(income : int) : int%0A{%0A    // No tax, if income is less than $10000.%0A    when (income < 10000) then return 0;%0A%0A    // 10&#37; tax, if income is less than $100,000.%0A    when (income < 100000) then return income / 10;%0A%0A    // 20&#37; tax, if income is less than $200,000.%0A    when (income < 200000) then return income / 5;%0A%0A    // Otherwise, 50&#37; tax.%0A    return income / 2;%0A}", "Emma's Tax = 0%0AElle's Tax = 2300%0AEvie's Tax = 25400%0AErin's Tax = 115000"] }