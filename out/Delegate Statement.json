{ "summary" : "A delegate-statement creates function-object that is essentially a type-safe function-pointer.", "ast" : "autumn.lang.compiler.ast.nodes.DelegateStatement", "syntax" : [[0, "<span class=\"keyword\">delegate</span> <i><a href=\"ConstructPage.html?construct=Variable\">assignee</a></i> : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i> => <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">Owner</a></i>::<i><a href=\"ConstructPage.html?construct=Name\">name</a></i> ;"]], "details" : [[0, "The <i>assignee</i> will be declared in the enclosing scope as a readonly local variable."], [0, "The scope of the <i>assignee</i> is anywhere in the enclosing function."], [0, "The <i>assignee</i> is alive precisely during an activation of the enclosing function."], [0, "A delegate-statement can create a delegate that refers to a special static method."], [1, "In particular, a delegate-statement can create a delegate that refers to the instance() method."], [0, "The function <i>X</i> that the delegate will refer to must be compatible with the functor-type <i>T</i>."], [1, "<i>T</i> is the functor-type specified by the <i>type</i>."], [1, "The return-type of <i>X</i> must be a subtype of the return-type of <i>T</i>."], [1, "The number of parameters of <i>X</i> must match the number of parameters of <i>T</i>."], [1, "The type of each parameter<sub>i</sub> of <i>X</i> must be a subtype of parameter<sub>i</sub> of <i>T</i>."], [0, "Return Type: type of <i>type</i>"], [0, "Return a <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Delegate.html\">Delegate</a> that refers to the specified function.."]], "static-checks" : [["DUPLICATE_VARIABLE", "The <i>assignee</i> cannot share its name with another variable declared in the same scope.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>type</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>type</i> must be accessible.", "null"], ["EXPECTED_DEFINED_FUNCTOR_TYPE", "The type specified by <i>type</i> must be a subtype of <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/DefinedFunctor.html\">DefinedFunctor</a>.", "null"], ["EXPECTED_CLASS_TYPE", "The type specified by <i>type</i> must be a class-type.", "null"], ["NO_SUCH_TYPE", "The type specified by <i>Owner</i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i>Owner</i> must be accessible.", "null"], ["EXPECTED_MODULE_TYPE", "The type specified by <i>Owner</i> must be a subtype of <a href=\"http://mackenzie-high.github.io/autumn/javadoc/autumn/lang/Module.html\">Module</a>.", "null"], ["NO_SUCH_METHOD", "The type specified by <i>Owner</i> must contain a function with the given <i>name</i>.", "null"], ["OVERLOADED_METHOD", "The <i>name</i> can only refer to one function in the type specified by <i>Owner</i>.", "null"], ["INCOMPATIBLE_DELEGATE", "The signature of the targeted function must be compatible with the functor-type specified by <i>type</i>.", "null"]], "example-1" : ["module Main in execution;%0A%0Afunctor TaxCalculator (income : int) : int;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    delegate poor : TaxCalculator => My::poorTax;%0A    delegate rich : TaxCalculator => My::richTax;%0A%0A    My::printTax(10_000, poor);%0A    My::printTax(20_000, poor);%0A    My::printTax(30_000, poor);%0A%0A    My::printTax(100_000, rich);%0A    My::printTax(200_000, rich);%0A    My::printTax(300_000, rich);%0A}%0A%0Adefun printTax (income : int, %0A                irs : TaxCalculator) : void%0A{%0A    val tax = irs.invoke(income);%0A%0A    F::println(%22Income = %22 .. income);%0A    F::println(%22Tax = %22 .. tax);%0A    F::println();%0A}%0A%0Adefun poorTax (income : int) : int%0A{%0A    // Flat Rat = 10&#37;%0A    return income / 10;%0A}%0A%0Adefun richTax (income : int) : int%0A{%0A    // Flat Rat = 25&#37;%0A    return income / 4;%0A}", "Income = 10000%0ATax = 1000%0A%0AIncome = 20000%0ATax = 2000%0A%0AIncome = 30000%0ATax = 3000%0A%0AIncome = 100000%0ATax = 25000%0A%0AIncome = 200000%0ATax = 50000%0A%0AIncome = 300000%0ATax = 75000"] }