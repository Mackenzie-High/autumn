{ "summary" : "An instance-of-expression determines whether a value is an instance of a particular type.", "ast" : "autumn.lang.compiler.ast.nodes.InstanceOfExpression", "syntax" : [[E-32, "<span class=\"keyword\">instanceof</span> <i><a href=\"TextPage.html?page=Expression\">value</a></i> : <i><a href=\"ConstructPage.html?construct=TypeSpecifier\">type</a></i>"]], "details" : [[E-32, "An instance-of operation is viable, iff:"], [1, "The type of <i>value</i> is not the null-type."], [1, "and:"], [2, "The type of <i>value</i> is a subtype of the type specified by <i>type</i>."], [2, "The type specified  by <i>type</i> is a subtype of the type of <i>value</i>."], [E-32, "Return Type: boolean"], [E-32, "Return Return true, iff the <i>value</i> at runtime is both non-null and a subtype of the <i>type</i>."]], "static-checks" : [["NO_SUCH_TYPE", "The type specified by <i><i>type</i></i> must exist.", "null"], ["INACCESSIBLE_TYPE", "The type specified by <i><i>type</i></i> must be accessible.", "null"], ["EXPECTED_DECLARED_TYPE", "The type of <i>value</i> must be a declared-type.", "null"], ["EXPECTED_DECLARED_TYPE", "The type of <i>type</i> must be a declared-type.", "null"], ["NON_VIABLE_INSTANCEOF", "The operation must be viable at compile-time.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    # String%0A    My::print(%22Text%22);%0A%0A    # Integer%0A    My::print(17);%0A%0A    # List%0A    My::print([2, 4, 6, 8]);%0A}%0A%0Adefun print(x : Object) : void%0A{%0A    F::println(%22Object? = %22  .. (instanceof x : Object));%0A    F::println(%22Integer? = %22 .. (instanceof x : Integer));%0A    F::println(%22String? = %22  .. (instanceof x : String));%0A    F::println(%22List? = %22    .. (instanceof x : List));%0A    F::println();%0A}", "Object? = true%0AInteger? = false%0AString? = true%0AList? = false%0A%0AObject? = true%0AInteger? = true%0AString? = false%0AList? = false%0A%0AObject? = true%0AInteger? = false%0AString? = false%0AList? = true"] }