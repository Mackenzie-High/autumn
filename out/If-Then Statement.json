{ "summary" : "An if-statement conditionally executes one or more other statements.", "ast" : "autumn.lang.compiler.ast.nodes.IfStatement", "syntax" : [[0, "<span class=\"keyword\">if</span> ( <i><a href=\"TextPage.html?page=Expression\">condition</a><sub>1</sub></i> )"], [0, "{"], [1, "<i>body<sub>1</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">elif</span> ( <i><a href=\"TextPage.html?page=Expression\">condition</a><sub>2</sub></i> )<sub>1</sub>"], [0, "{"], [1, "<i>body<sub>2</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">elif</span> ( <i><a href=\"TextPage.html?page=Expression\">condition</a><sub>3</sub></i> )<sub>2</sub>"], [0, "{"], [1, "<i>body<sub>3</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">elif</span> ( <i><a href=\"TextPage.html?page=Expression\">condition</a><sub>4</sub></i> )<sub>n</sub>"], [0, "{"], [1, "<i>body<sub>4</sub></i>"], [0, "}"], [0, "<span class=\"keyword\">else</span><sub>opt</sub>"], [0, "{"], [1, "<i>body<sub>5</sub></i>"], [0, "}"]], "details" : [[0, "An if-statement can have zero or more elif-clauses."], [0, "An if-statement can omit the else-clause."], [0, "For all <i>i</i> &gt; 1, <i>condition<sub>i</sub></i> will be evaluated, only if <i>condition<sub>i - 1</sub></i> produces false."], [0, "For all <i>i</i> &gt; 0, <i>body<sub>i</sub></i> will only be executed, only if <i>condition<sub>i</sub></i> produces true."], [0, "The body of the else-clause will be executed, only if all of the conditions produce false."], [0, "The conditions will be unboxed, if necessary."]], "static-checks" : [["EXPECTED_CONDITION", "The type of each condition must be assignable to primitive-type boolean.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    for(i = 10; i < 25; i + 1)%0A    {%0A        (My::write i);%0A    }%0A} %0A%0Adefun write(index : int) : void%0A{%0A    val case1 = index &#37; 3 == 0; // Fizz%0A    val case2 = index &#37; 5 == 0; // Buzz%0A    val case3 = case1 & case2;  // Both%0A%0A    if(case3)%0A    {%0A        (F::println index .. %22 = Both%22);%0A    }%0A    elif(case2)%0A    {%0A        (F::println index .. %22 = Buzz%22);%0A    }%0A    elif(case1)%0A    {%0A        (F::println index .. %22 = Fizz%22);%0A    }%0A    else%0A    {%0A        (F::println index);%0A    }%0A}", "10 = Buzz%0A11%0A12 = Fizz%0A13%0A14%0A15 = Both%0A16%0A17%0A18 = Fizz%0A19%0A20 = Buzz%0A21 = Fizz%0A22%0A23%0A24 = Fizz"], "example-2" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    (My::write %22Mercury%22, false);%0A    (My::write %22Venus%22, false);%0A    (My::write %22Earth%22, false);%0A    (My::write %22Mars%22, false);%0A%0A    (F::println);%0A%0A    (My::write %22Jupiter%22, true);%0A    (My::write %22Saturn%22, true);%0A    (My::write %22Uranus%22, true);%0A    (My::write %22Neptune%22, true);%0A}%0A%0Adefun write(name : String, jovian : boolean) : void%0A{%0A    if(jovian)%0A    {%0A        (F::println name .. %22 is a jovian planet.%22);%0A    }%0A    else%0A    {%0A        (F::println name .. %22 is a terrestrial planet.%22);%0A    }%0A}", "Mercury is a terrestrial planet.%0AVenus is a terrestrial planet.%0AEarth is a terrestrial planet.%0AMars is a terrestrial planet.%0A%0AJupiter is a jovian planet.%0ASaturn is a jovian planet.%0AUranus is a jovian planet.%0ANeptune is a jovian planet."], "example-3" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    (My::write 0);%0A    (My::write 1);%0A    (My::write 2);%0A    (My::write 3);%0A    (My::write 4);%0A    (My::write 5);%0A    (My::write 6);%0A    (My::write 7);%0A    (My::write 8);%0A    (My::write 9);%0A}%0A%0Adefun write(number : int) : void%0A{%0A    if(number &#37; 2 != 0)%0A    {%0A        (F::println number .. %22 is very odd.%22);%0A    }%0A}", "1 is very odd.%0A3 is very odd.%0A5 is very odd.%0A7 is very odd.%0A9 is very odd."] }