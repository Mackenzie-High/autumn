{ "summary" : "This operator performs an arithmetic negation operation.", "ast" : "autumn.lang.compiler.ast.nodes.NegateOperation", "syntax" : [[0, "- <i><a href=\"TextPage.html?page=Expression\">value</a></i>"]], "details" : [[0, "Precedence: 1"], [0, "Predefined Overloads:"], [1, "(- byte) &$8614; byte"], [1, "(- short) &$8614; short"], [1, "(- int) &$8614; int"], [1, "(- long) &$8614; long"], [1, "(- float) &$8614; float"], [1, "(- double) &$8614; double"], [1, "(- <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html\">BigInteger</a>) => <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html\">BigInteger</a>"], [1, "(- <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\">BigDecimal</a>) => <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\">BigDecimal</a>"], [0, "The overload that best matches the operand will be selected."], [1, "Unboxing will be performed, if necessary."], [1, "Coercion will be performed, if necessary."], [0, "Return Type: Return-Type of Selected Overload"], [0, "Return the result of the operation."]], "static-checks" : [["NO_SUCH_UNARY_OPERATOR", "None of the overloads will accept the operand due to its type.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    val B = 17B;%0A    val S = 17S;%0A    val I = 17;%0A    val L = 17L;%0A    val F = 17.0F;%0A    val D = 17.0;%0A    val BI = F::big(17);%0A    val BD = F::big(17.0);%0A%0A    var value = null as Object;%0A    %0A    # Negate a byte and print it. %0A    value = - B;%0A    F::println(%22byte = %22 .. value);%0A%0A    # Negate a short and print it. %0A    value = - S;%0A    F::println(%22short = %22 .. value);%0A%0A    # Negate an int and print it. %0A    value = - I;%0A    F::println(%22int = %22 .. value);%0A%0A    # Negate a long and print it. %0A    value = - L;%0A    F::println(%22long = %22 .. value);%0A%0A    # Negate a float and print it. %0A    value = - F;%0A    F::println(%22float = %22 .. value);%0A%0A    # Negate a double and print it. %0A    value = - D;%0A    F::println(%22double = %22 .. value);%0A%0A    # Negate a BigInteger and print it. %0A    value = - BI;%0A    F::println(%22BigInteger = %22 .. value);%0A%0A    # Negate a BigDecimal and print it. %0A    value = - BD;%0A    F::println(%22BigDecimal = %22 .. value);%0A}", "byte = -17%0Ashort = -17%0Aint = -17%0Along = -17%0Afloat = -17.0%0Adouble = -17.0%0ABigInteger = -17%0ABigDecimal = -17.0"] }