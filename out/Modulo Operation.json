{ "summary" : "This operator performs an arithmetic modulus operation.", "ast" : "autumn.lang.compiler.ast.nodes.ModuloOperation", "syntax" : [[0, "<i><a href=\"TextPage.html?page=Expression\">left</a></i> &$37; <i><a href=\"TextPage.html?page=Expression\">right</a></i>"]], "details" : [[0, "Precedence: 2"], [0, "Associativity: Left"], [0, "Predefined Overloads:"], [1, "(char &$37; char) &$8614; char"], [1, "(byte &$37; byte) &$8614; byte"], [1, "(short &$37; short) &$8614; short"], [1, "(int &$37; int) &$8614; int"], [1, "(long &$37; long) &$8614; long"], [1, "(float &$37; float) &$8614; float"], [1, "(double &$37; double) &$8614; double"], [1, "(<a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html\">BigInteger</a> &$37; <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html\">BigInteger</a>) &$8614; <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html\">BigInteger</a>"], [1, "(<a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\">BigDecimal</a> &$37; <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\">BigDecimal</a>) &$8614; <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html\">BigDecimal</a>"], [0, "The overload that best matches the operands will be selected."], [1, "Unboxing will be performed, if necessary."], [1, "Coercion will be performed, if necessary."], [0, "Both operands are greedily evaluated."], [1, "The left-operand is evaluated first."], [1, "The right-operand is evaluated second."], [0, "Return Type: Return-Type of Selected Overload"], [0, "Return the result of the operation."]], "static-checks" : [["NO_SUCH_BINARY_OPERATOR", "None of the overloads will accept the left-operand due to its type.", "null"], ["NO_SUCH_BINARY_OPERATOR", "None of the overloads will accept the right-operand due to its type.", "null"]], "example-1" : ["module Main in examples;%0A%0A@Start%0Adefun main (args : String[]) : void%0A{%0A    var value = null as Object;%0A%0A    value = 231C &#37; 83C;%0A    F::println(%22char = %22 .. value);%0A%0A    value = 32B &#37; 3B;%0A    F::println(%22byte = %22 .. value);%0A%0A    value = 32S &#37; 3S;%0A    F::println(%22short = %22 .. value);%0A%0A    value = 32 &#37; 3;%0A    F::println(%22int = %22 .. value);%0A%0A    value = 32L &#37; 3L;%0A    F::println(%22long = %22 .. value);%0A%0A    value = 32.0F &#37; 3.0F;%0A    F::println(%22float = %22 .. value);%0A%0A    value = 32.0 &#37; 3.0;%0A    F::println(%22double = %22 .. value);%0A%0A    value = F::big(32) &#37; F::big(3);%0A    F::println(%22BigInteger = %22 .. value);%0A%0A    value = F::big(32.0) &#37; F::big(3.0);%0A    F::println(%22BigDecimal = %22 .. value);%0A}", "char = A%0Abyte = 2%0Ashort = 2%0Aint = 2%0Along = 2%0Afloat = 2.0%0Adouble = 2.0%0ABigInteger = 2%0ABigDecimal = 2.00000000000000000000000000000000"] }