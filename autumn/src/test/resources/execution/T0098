module * in execution;

import java.util.concurrent.atomic.AtomicInteger;

@Start
defun main (args : String[]) : void
{
    // This test case needs to test two things.
    // 1. The operator must produce the correct truth table.
    // 2. The operator must short-circuit.
    //    In other words, sometimes the second operand will not be evaluated.

    val T = true;
    val F = false;

    val left = new AtomicInteger();
    val right = new AtomicInteger();

    // Case: F F
    assert My::operand(left, F) | My::operand(right, F) == F;
    assert call left.get() == 1;
    assert call right.get() == 1;

    // Case: F T
    assert My::operand(left, F) | My::operand(right, T) == T;
    assert call left.get() == 2;
    assert call right.get() == 2;

    // Case: T F
    assert My::operand(left, T) | My::operand(right, F) == T;
    assert call left.get() == 3;
    assert call right.get() == 2;

    // Case: T T
    assert My::operand(left, T) | My::operand(right, T) == T;
    assert call left.get() == 4;
    assert call right.get() == 2;
}


defun operand(atom : AtomicInteger,
             result : boolean) : boolean
{
    // Increment the atom by one.
    call atom.incrementAndGet();

    return result;
}