module Main in execution;

functor Function (a : int,
                  b : long,
                  c : short,
                  d : int,
                  e : long,
                  f : int,
                  g : long,
                  h : long,
                  i : double) : List;

@Start
defun main (args : String[]) : void
{
    delegate p : Function => My::function;

    val stack = autumn.lang.internals.ArgumentStack::getThreadStack();

    # Push values onto the stack.
    stack.push('A');    # char  to int
    stack.push('B');    # char  to long
    stack.push(13B);    # byte  to short
    stack.push(17B);    # byte  to int
    stack.push(19B);    # byte  to long
    stack.push(23S);    # short to int
    stack.push(27S);    # short to long
    stack.push(33);     # int   to long
    stack.push(47.0F);  # float to double

    # Invoke the delegate, which should result in coercions being performed.
    p.apply(stack);

    # Get the return-value.
    val result = stack.popO();

    assert result == [65, 66L, 13S, 17, 19L, 23, 27L, 33L, 47.0];
}

defun function (a : int,
                b : long,
                c : short,
                d : int,
                e : long,
                f : int,
                g : long,
                h : long,
                i : double) : List
{
    return [a, b, c, d, e, f, g, h, i];
}