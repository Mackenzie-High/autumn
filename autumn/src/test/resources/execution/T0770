module Main in execution;

import java.io.File;

@Start
defun main (args : String[]) : void
{
    # Get the folder that contains the class Functor.
    # This folder corresponds to the autumn.lang package.
    # Thus, there are multiple sub-folders therein.
    # For example, autumn.lang.compiler is one sub-folder inside of the autumn.lang folder.
    val folder = new File("src/main/java/autumn/lang");

    assert folder.exists() echo "No Such Folder: " .. folder;

    # Get the files (non-recursively) contained in the folder.
    val files = F::mutable(FileIO::filesOf(folder, false));

    # Ensure that the invocation did not recur into sub-directories.
    foreach (file : File in files)
    {
        assert new File(file.getParent()) == folder;
    }

    # The following files must exist in the given directory.
    My::require(files, "DefinedFunctor.java");
    My::require(files, "Delegate.java");
    My::require(files, "Functor.java");
    My::require(files, "Lambda.java");
    My::require(files, "Local.java");
    My::require(files, "LocalsMap.java");
    My::require(files, "Module.java");
    My::require(files, "ModuleInfo.java");
    My::require(files, "Record.java");
    My::require(files, "TypedFunctor.java");
    My::require(files, "package-info.java");

    # The following sub-directories must exist in the directory. 
    My::require(files, "annotations");
    My::require(files, "compiler");
}

/// This function asserts that a file with a given name is in the list of files.
///
/// @param files are the files themselves.
/// @param name is the name of the file that must exist.
/// @return the file, if it exists.
///
defun require (files : Set,
               name : String) : File
{
    foreach (file : File in files)
    {
        when (file.getName() == name) then return file;
    }

    assert false echo "File Not Found: " .. name;
}













