module Main in execution;

functor Function () : void;

@Start
defun main (args : String[]) : void
{
    # This test ensures that checked exceptions can propagate out of an apply(ArgumentStack) invocation.

    delegate p : Function => My::function;

    val stack = autumn.lang.internals.ArgumentStack::getThreadStack();

    val tracker = new StringBuilder();

    try
    {
        tracker.append("1");

        p.apply(stack);

        tracker.append("2");
    }
    catch (ex : Throwable)
    {
        tracker.append("3");
    }

    assert tracker.toString() == "13";
}

defun function () : void
{
    throw new Throwable();
}